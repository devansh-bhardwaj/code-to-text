0	Save the model to disk .
1	Creates a neural network .
2	Create a convolution layer .
3	Create a subproc env .
4	Parse unknown args .
5	Temporarily change the environment variables .
6	Calculate the correlation coefficients
7	Create an observation placeholder .
8	Create an observation input .
9	Encode an observation .
10	Save the policy to disk .
11	Return a list of log values for each experiment .
12	Smooth the input array .
13	Return a copy of an observation dict .
14	Return shape and shape of obs_space .
15	Compute q retrace .
16	Calculate the value at time t .
17	Subprocess worker .
18	Train a network .
19	Compute the first axis of an array .
20	Convert seconds to human readable format .
21	Add a boolean flag .
22	Get a wrapper for the given class name .
23	Load a pickle file .
24	Update the value .
25	Store the arguments of a method .
26	Flatten gradients .
27	Create a dense layer .
28	fork n processes
29	Get a TensorFlow session .
30	Initialize the graph .
31	Adjust the shape of the data .
32	Wrap an Environment into an Environment .
33	Reset the environment .
34	Count GPU number .
35	Sets MPI_VISIBLE_DEVICES environment variable .
36	Get the size of each node in the community .
37	Share a local file
38	Gather all the elements of a dictionary
39	Discretize a signal .
40	Add an item to the heap .
41	Update the priorities for the given indices .
42	Wrap an Environment into an Environment .
43	Generate a sample of Herk transitions .
44	Parse command line arguments .
45	Compute the geometric median of the data .
46	Projects the coordinates of the x y - axis to the given shape .
47	Shift x y and y .
48	Draws the image on the given image .
49	Generate a matrix of similar points .
50	Return a shallow copy of this TimeSeries .
51	Return a shallow copy of this Keypoint .
52	Project the image onto an image .
53	Draws all keypoints on an image .
54	Shift the key .
55	Return a copy of this RDD .
56	Return a shallow copy of the keypoints .
57	Projects the coordinates onto the original shape .
58	Extend the bounding box .
59	Return the intersection of another bounding box .
60	Return the union of another bounding box .
61	Compute the intersection of self and other .
62	Return True if the rectangle is fully within the image .
63	Return True if this region is part of the image .
64	Determines if the image is out of the image .
65	Clip the image to the given image .
66	Draws the bounding box on an image .
67	Extract image from image .
68	Return a copy of the bounding box .
69	Draws all bounding boxes .
70	Return a new bounding box that is out of the bounding box .
71	Clip out all bounding boxes .
72	Return a shallow copy of the bounding box .
73	Creates an embedding of an embedding .
74	Generate an edge detection .
75	Draws a directed edge detection .
76	Normalize shape .
77	Projects coordinates into coordinates .
78	Create a Poisson Poisson Poisson noise .
79	Create a dropout .
80	Create a continuous dropout .
81	Generate an ImpulseNoise noise .
82	Creates a new Salt and returns a seed .
83	Generate an element - wise replacement .
84	Construct a CoarsePepper .
85	Create a Linear contrast normalization .
86	Return True if value is a single float .
87	Return True if value is an integer .
88	Return True if value is a float .
89	Return a new random state .
90	Copy a random state .
91	Derives a list of random states .
92	Normalize extract .
93	Compute the resized shape .
94	Generate a quokka image .
95	Generate a segmentation map .
96	Generate a list of keypoints .
97	Get bounding boxes of quokka .
98	Get a list of polygons .
99	Compute the angle between two vectors .
100	Compute the intersection of a line .
101	Draw text on the image .
102	Resize a single image .
103	Compute padding for an image .
104	Pad array to aspect ratio .
105	Apply a function to an array .
106	Calculate an average across blocks .
107	Max pooling .
108	Draw a grid of images .
109	Display a grid of images .
110	Plot an image .
111	Warn a deprecation warning .
112	Determine if the image is activated .
113	Run postprocessor .
114	Return a multiprocessing pool .
115	Apply a batch of batches to the pool .
116	Map batches into batches .
117	Iterate over batches .
118	Iterate over batches of batches .
119	Terminate the pool .
120	Terminate the worker threads .
121	Get a batch from the queue .
122	Augment image worker .
123	Terminate all workers .
124	Convert this UnnormalizedBatch into a Batch .
125	Create a force sign .
126	Create a force sign .
127	The area of the polygon .
128	Projects a shape to a shapely shape .
129	Finds the closest point in the convex hull .
130	Return True if the image is within the given image .
131	Return True if the image is within the given image .
132	Determines if the polygon is out of the image .
133	Clip the image to the given image .
134	Extract a polygon from an image .
135	Change the first point by the given coordinates .
136	Change the first point with the given index .
137	Convert to shapely Polygon .
138	Convert a shapely Polygon to a shapely LineString .
139	Convert to bounding box .
140	Return a list of keypoints .
141	Convert to a LineString .
142	Create a Polygon from a shapely Polygon .
143	Return an ellipsoid of a polygon .
144	Return a shallow copy of the Compound .
145	Return a shallow copy of the Polygon .
146	Return a new Polygon on the given image .
147	Draw polygons on an image .
148	Remove polygons from the polygon .
149	Clip polygon out of image .
150	Return a shallow copy of the polygons .
151	Convert a shapely geometry into a MultiPolygon .
152	Returns a list of all intersections .
153	Return the minimum item of the tree .
154	Return the maximum item of the tree .
155	Return the previous value of a key .
156	Return the value of a key .
157	Compute the noise of a pixel .
158	Create a new colorpace with the given colorspace .
159	Create a new grayscale .
160	The height of the cylinder .
161	The width of each pixel .
162	Return mask of pointwise inside image .
163	Compute the distance between each point in the mesh .
164	Compute pointwise distances between self and other .
165	Compute the distance between self and other .
166	Project the coordinates onto the coordinates of the mesh .
167	Return True if the point is within the image .
168	Determines if the region is within an image .
169	Find the intersection of this shapely geometry .
170	Draw a heatmap .
171	Draw a heatmap from an image .
172	Draw points on an image .
173	Draw a heatmap .
174	Draw the points on the image .
175	Draws the image on the given image .
176	Extract coordinates from an image .
177	Concatenate two LineString objects .
178	Subdivide a set of points .
179	Convert to a list of keypoints .
180	Convert to bounding box .
181	Convert to a Polygon .
182	Create a heatmap on the image .
183	Create a segmentation map on the image .
184	Return True if coords are almost equal .
185	Determine if two coordinates are almost equal .
186	Return a copy of the LineString .
187	Draws lines on the given image .
188	Return a new LineStrings on the image .
189	Return a new LineStrings on the current image .
190	Return a deep copy of this LineStrings .
191	Blend an image with alpha .
192	Simplex noise .
193	Creates a random element .
194	Create an AssertLambda .
195	Generate a random motion .
196	Create a new cloud layers .
197	Create a cloud layer .
198	Create a new snowflakes layer .
199	Draw the segmentation map .
200	Draw the image on an image .
201	Return a new segmentation on the aspect ratio .
202	Resize the segmentation map .
203	Convert to heatmaps .
204	Create a SegmentationMap on an image .
205	Return a shallow copy of the segmentation map .
206	Add an event to the list .
207	Draw a heatmap .
208	Draw a heatmap on an image .
209	Invert this heatmap onto an image .
210	Pad image to aspect ratio .
211	Convert to an unsigned integer .
212	Create a heatmap on an image .
213	Create a heatmaps on an image .
214	Change the normalization of an image .
215	Return a shallow copy of the current heatmaps .
216	Set the value of a key .
217	Append a key to the list .
218	Parses the docstring into a dictionary .
219	Return a list of directories in a directory .
220	Get a response for a given path .
221	Check that the static files exist .
222	Check if the response is not modified .
223	Build the WSGI environment .
224	Receive a message from the server .
225	Send a message .
226	Calculates the top - left and short - left and short data for a given positions .
227	Calculates the maximum median position for each allocation .
228	Returns a DataFrame containing the long - and short positions of each asset .
229	Compute the total style factor exposure .
230	Plots the hazard factor exposure factor exposures .
231	Given a list of positions and a list of sectors and sector positions return a list of those exposures .
232	Plots long and short and short and short exposures in sectors .
233	Plots the total exposure in sectors .
234	Plot the net exposures in sectors .
235	Compute a list of short_exposures .
236	Plot net exposure to matplotlib .
237	Computes and returns the number of days for each volume .
238	Create a full tear sheet .
239	Creates a tear sheet .
240	Creates a tear sheet for transactions .
241	Calculates the capacity sheet for a given market .
242	Creates a tear sheet .
243	Convert a list of transactions into a DataFrame .
244	Returns the number of days to deposit positions .
245	Compute low deposit transactions for a given list of transactions .
246	Apply slippage penalty .
247	Map a transaction object to a dict .
248	Convert a list of transactions into a pandas DataFrame .
249	Calculate the total volume of each transaction .
250	Adjust the returns for a slippage portfolio .
251	Calculates the turnover of a portfolio .
252	Group the number of transactions grouped by the number of times .
253	Extract round - trip prices from a list of transactions .
254	Add the closing transactions to the given positions .
255	Map sector_mappings to sector_trips .
256	Generate statistics for a round trip .
257	Print round_trip stats
258	Calculate the performance of a function .
259	Compute predicted positions .
260	Create a summary of the perf attribute stats .
261	Create a summary of the perf attribute stats .
262	Plots the total returns of a function .
263	Plot the factor attribution to a given factor .
264	Helper function to stack positions .
265	Compute the cumulative returns less than costs .
266	Format an asset .
267	Convert a Pandas DataFrame into a Series .
268	Print a table as an HTML table .
269	Detects the amount of transactions in a given transaction .
270	Infer intraday strategy .
271	Estimate the amount of deposits in the market .
272	Clip returns to a given benchmark returns
273	Convert df to UTC
274	Get the return data for a symbol
275	Sample a colormap .
276	Decorator for plotting functions .
277	Create a plotting context .
278	Set axes style .
279	Plots a heatmap of the monthly returns .
280	Plot annual returns .
281	Plots the distribution of daily returns
282	Plots the average portfolio for each period .
283	Plots long shortholdings .
284	Plot a series of drawdown periods .
285	Plot the drawdown under a given ax .
286	Plots the perf stats for a given factor returns .
287	Show the performance statistics for a given portfolio .
288	Plot the returns of a given period .
289	Plot the rolling returns .
290	Plot the portfolio portfolio portfolio .
291	Plot the rolling volatility .
292	Plot a rolling sharpe .
293	Plot the gross leverage .
294	Plot a matplotlib .
295	Plot the maximum median position concentration .
296	Plots the sector allocation over time .
297	Plot the returns quantiles for a given period .
298	Plot daily turnover .
299	Plot the slippage of a given number of returns .
300	Plots the Sippage s slippage .
301	Plot daily turnover rates .
302	Plot daily trading volume .
303	Plots the time of each transaction .
304	Shows the worst drawdown periods .
305	Plots a time series of returns .
306	Plot the lifetimes of each round trip .
307	Shows profitability of round_trips .
308	Plots profit of a given round trip .
309	Plot a scatter plot of cone returns .
310	Variance covariance .
311	Calculate the Sortino ratio for the given returns .
312	Calculate downside risk .
313	Calculate Sharpe ratio .
314	Calculate beta of a portfolio .
315	Compute the gross elevation of the given positions .
316	Compute the performance statistics for a given portfolio .
317	Calculates the bootstrap statistics for the given returns .
318	Calculates a bootstrap bootstrap function .
319	Calculates the distribution statistics for a distribution .
320	Determine the max drawdown of the water .
321	Returns the maximum drawdown of a portfolio .
322	Retrieve a list of all drawdowns .
323	Generate a DataFrame of drawdown table .
324	Calculates the volatility of a portfolio .
325	Calculate the rolling Sharpepe .
326	Simulate the trajectories .
327	Calculate cone bounds .
328	Extract a date range from a series of dates .
329	Calculates the model returns t and beta .
330	Generates a model for a normal distribution .
331	Compute the best - fit model .
332	Stochastic model .
333	Plot the stochastic volatility .
334	Compute Bayesian Coefficient for a set of predicates .
335	Compute the consistency score .
336	Run a model .
337	Plot the Coefficient Coefficient .
338	Retrieves the next log count per token .
339	Logs a message at the specified level .
340	Log a message with the given condition .
341	Generate a string for logging .
342	Creates a distributed training session .
343	Compute the validation metrics .
344	Train and validate and validate the next step .
345	Load the MNIST dataset .
346	Load the MATLAB_TEXT8 dataset .
347	Load an IMDB dataset .
348	Load a text file from S3 .
349	Load wmt_enfr dataset .
350	Load a 25k dataset .
351	Download a file from Google Drive .
352	Load dataset from Google Drive .
353	Assigns parameters to a network .
354	Load and assign parameters to a numpy array .
355	Save a tensorflow model .
356	Save a checkpoint .
357	Load a checkpoint .
358	Load a numpy array from a file .
359	r Load a list of files from a directory .
360	Load folder list
361	Check if path exists
362	Download and extract filename from url_source .
363	Return a list of natural keys .
364	Apply a function to data .
365	Apply transformation to a list of coordinates .
366	Projects an image by applying a projection on each point .
367	Rotate an image .
368	Crop an image .
369	Crop multiple images .
370	Flip an axis .
371	Flip an axis across multiple axes .
372	Shift an image by one axis .
373	Color brightness .
374	Generate an illumination .
375	Adjusts the color of an image .
376	Resize an array .
377	Scale a pixel value .
378	Sample a numpy array .
379	Feature - wise normalization .
380	Compute the principal components of an image .
381	Whitening x .
382	Drop an array .
383	convert a list of points to a map
384	r Parse a darknet annotation string .
385	Parses a darknet annotation list into a class and bounding box .
386	Flip an image horizontally .
387	Resize an image box .
388	Remove padding sequences from sequences .
389	Generate a mask from a list of sequences .
390	Randomly crop an image .
391	Flip an image .
392	Resize an image .
393	Discount an episode rewards .
394	Compute the cross entropy loss .
395	Log weight .
396	Chooses a random action by probabilities .
397	Compute the cross entropy of a tensor .
398	Sigmoid cross_entropy .
399	Binary cross entropy .
400	Normalized mean squared error .
401	Cross - entropy cross - entropy .
402	Creates a regularizer function .
403	Ramp x to v_max .
404	Swish tensor .
405	Compute the softmax of x .
406	Retrieves the length of the input data .
407	The state size of the LSTM state .
408	Repeat a tensor .
409	Compute the coordinates of the batch map .
410	Applies a batch map to the input data .
411	Generate batches of mini - batches .
412	Save model to database .
413	Find the top model .
414	Delete a model from the database .
415	Save a dataset .
416	Find the top dataset .
417	Find all datasets in the database .
418	Delete multiple datasets .
419	Save training log to database .
420	Save validation log .
421	Delete a training log .
422	Delete validation log .
423	Create a new task .
424	Run a task .
425	Delete multiple tasks .
426	Check if a task is unfinished .
427	Augment unigrams with n - grams .
428	Load and preprocess training data .
429	Read an image from disk .
430	Read a list of images from a thread .
431	Save an image to disk .
432	Save images to disk .
433	Draw boxes and labels .
434	Plot a 2D 2D network .
435	Displays a TSNE embedding .
436	Draw weights .
437	Convert images into TFRecord .
438	Read and decode a TFRecord from a file .
439	Print the parameters of the network .
440	Print all the layers .
441	Count the number of parameters .
442	Returns a list of all parameters .
443	Get the initialization parameters from the stack .
444	Perform a pooling operation on the input .
445	Prefetch values from a file .
446	Create batch with dynamic padding .
447	Scale x .
448	Add bias to x_format .
449	Batch normalization .
450	Compute the alpha of x .
451	Flattens the input variable .
452	Get all layers with a given name .
453	Get all variables with a given name .
454	Initialize RSTM state .
455	Remove repeated elements from a list .
456	A ternary operation .
457	Add a notice to a docstring .
458	Create an alpha value .
459	Predict function .
460	Evaluate the f1_score function .
461	Returns a list of random integers .
462	Close tensorflow and nvidia - process .
463	Open tensorboard .
464	Clear all placeholder variables .
465	Sets the memory fraction .
466	Generate batch batch .
467	Draw a random sample from the vocabulary .
468	Return a random sample from an array .
469	Create vocabulary .
470	Read words from a file .
471	Read analogy information from an analogy file .
472	Build a reverse dictionary from word_to_id .
473	Build a vocabulary dataset .
474	Save vocabulary .
475	Convert a sentence into a list of tokens .
476	Convert data into token ids .
477	Compute multiple bleu .
478	Return the ID of a word .
479	Return the ID of a word .
480	Convert word ID to word .
481	Restore embedding layer .
482	Create and start a new hypervisor .
483	Get the parameters of a swarm model .
484	Enables concurrency checks .
485	Returns a dictionary with the common command line arguments .
486	Return a logger .
487	Release this instance .
488	Track the instance and check if it is exceeded .
489	Close the connection policy .
490	Acquire a connection .
491	Close the connection pool .
492	Acquire a connection to the pool .
493	Close the connection policy .
494	Acquire a new connection .
495	Releases a connection to the database .
496	Classify the KNNAnomaly classifier .
497	Construct classification record .
498	Add a record to KNN .
499	Delete records from KNN .
500	Delete a range from kNN .
501	Recompute the model from KNN .
502	Convert a label to a category number .
503	Converts a list of labels to a category number .
504	Convert a category to a label list .
505	Returns the anomaly vector of the state .
506	Get the labels for the given start and end records .
507	Remove labeled records from the model .
508	Return True if the record matches the filter .
509	Strip unlearned columns .
510	Update min dutyCycles .
511	Update self . _minOverlapCycles .
512	Updates the minimum number of active dutyCycles .
513	Update the dutyCycles based on the overlapping columns .
514	Returns the total number of columns per input .
515	Returns the number of connected synapses in the given column .
516	Compute the average spanning span of a column .
517	Bump all active columns .
518	Raises an exception if perm is too high .
519	Initialize synPermConnection .
520	Initialize the permanence .
521	Initialize the permanence .
522	Update global boost factors .
523	Update the boost factors for each column .
524	Inhibit the number of active columns .
525	Inhibit all active columns in the window .
526	Inhibit all active columns for a given overlaps .
527	Returns the neighborhood of the given center column .
528	Returns the input neighborhood of the input center .
529	Creates an array type .
530	Returns a list of all input names .
531	Returns a list of all outputs .
532	Retrieve a parameter from the region .
533	Set a parameter value .
534	Return a collection of Region objects .
535	Write this SDRClassifier to proto .
536	Create a new SDRClassifier from a proto .
537	Run the model .
538	Main loop .
539	Finalize the model .
540	Create the model checkpoint .
541	Delete the model checkpoint .
542	Returns the metric label for the optimization pattern .
543	Returns a dictionary with the field stats .
544	Update the results for the model .
545	Check if the job is best completed
546	Write prediction .
547	Flushes the prediction cache .
548	Delete output cache .
549	Initialize the periodic activity .
550	Cancels the model .
551	Check that the current model is older than the minimum .
552	Mark the job as finished .
553	Read the prior state from the database .
554	Returns the field contributions for each field .
555	Returns a list of all swarm ids in the swarm .
556	Returns a list of all tasks that have completed .
557	Returns the list of swarm IDs that have completed .
558	Returns the model ID and error score for the given sprintIdx
559	Set the status of a swarm .
560	Determines if anyprints are active .
561	Determines if a sprint is completed .
562	Add an encoder .
563	Assert that the model is invariant .
564	Return a dictionary representation of the model .
565	Updates the results for this job .
566	Create an encoder .
567	Validate experiment control .
568	Match all report keys .
569	Get a report item from a list of results .
570	Called when an exception occurs .
571	Run an OPF model on a model .
572	Return a copy of a dict .
573	Apply a function f to a dictionary .
574	Clip an object to a maximum length .
575	Load a JSON value from a file .
576	Iterate over the active activities .
577	Update a dictionary with updates .
578	Print the differences between two dictionaries .
579	Diff two dictionaries
580	Returns the spec for IdentityRegion .
581	Sets the encoder resolution .
582	Remove labels from the model .
583	Add a record to the KNN .
584	Delete records from KNN .
585	Delete a range from the KNNK model .
586	Recompute the model from KNN .
587	Constructs the classification record .
588	Compute the classification record .
589	Sets the autoDetect wait records .
590	Allocates a SpatialFDR class .
591	Run the compute method .
592	Compute the spatial pooler .
593	Initialize the spatial variables .
594	Cache the sequence info type .
595	Returns the TP class corresponding to the temporal imp .
596	Build arguments from a function f .
597	Execute the TensorFlow computation .
598	Finalize the temporal memory .
599	Compute the anomaly score of the predicted columns .
600	Compute anomaly score .
601	Add a graph to the plot .
602	Adds a histogram to the plot .
603	Add 2D data to the plot .
604	Add a subplot .
605	Retrieves the version string
606	Determine if Nupic bindings are installed .
607	Find the requirements . txt file .
608	Indent the given string .
609	Generates a metricSpec as a string .
610	Generate a file from template files .
611	Get the value for a given property name .
612	Get the experiment description schema .
613	Generates a list of metric specs .
614	Get the predicted field .
615	Generate inference arguments .
616	Command line entry point .
617	Parse a timestamp .
618	Convert string to a boolean value .
619	Unescape escaped characters .
620	Parse sdr string .
621	Parses a string into a list of integers .
622	Returns a list of coordinates corresponding to the given index .
623	Calculate the index from a list of coordinates .
624	Calculate the neighborhood of a given center .
625	Return the neighbors of a coordinate .
626	Return the topW coordinates of the top W coordinate .
627	Helper function to hash a coordinate .
628	Generate a random order .
629	Generate a bit for a coordinate .
630	Binary search .
631	Create a segment .
632	Destroy a segment
633	Create a synapse .
634	Destroys a synapse .
635	Compute the number of active synapses for each synapses .
636	Returns the number of segments in the cell .
637	Read CellData from proto .
638	Get the value of a property .
639	Get a value from a config property .
640	Set property value
641	Return the configuration as a dictionary .
642	Read a configuration file .
643	Returns a list of configuration paths .
644	Add noise to the input array .
645	Generate a new coinc matrix .
646	Generate a list of trajectories .
647	Generate a list of simple sequences .
648	Generate a list of hubs for each hub .
649	Generate a simple coincidences matrix .
650	Generates a sequence of motifs .
651	Returns True if tp1 and tp2 are different
652	Determine if two segments are identical .
653	Determine the differences between two cells .
654	Accumulate frequency counts .
655	Fill in durations in durations .
656	Calculate the average of timeseries at each time .
657	Calculate average on time series .
658	Plots the histogram .
659	Calculate the population Stability distribution .
660	Calculates the percentage of outputs stable over nTime steps .
661	Compute saturation levels for outputs .
662	Check if input matches the given prediction .
663	Calculates the center and spread offsets for a space .
664	Creates a map from the given columns shape .
665	Return a string representation of a numpy array .
666	Sample from the distribution .
667	Compute the log probability of a distribution .
668	Sample from a Poisson distribution
669	Creates a data out of a sensor region .
670	Create links between sensor and classifier regions .
671	Create a network .
672	Returns the prediction results for the given class .
673	Run a hotgym model .
674	Load dummy model parameters
675	Get the metric for this model .
676	Determine if the job should exit .
677	Get the description of this object .
678	Generate records .
679	Return a list of all the records .
680	Returns a list of all records .
681	Add a list of values to the list of values .
682	Return the SDR for the given value .
683	Get the encodings corresponding to n records .
684	Returns the total number of fields .
685	Returns the total w
686	Return the encoding of the field n .
687	Returns a list of all encodings .
688	Save records to a csv file .
689	Remove all records .
690	Encode a value .
691	Set encoder types .
692	Initialize encoder .
693	Load an experiment description from a directory .
694	Load experiment description from directory .
695	Load an experiment description file .
696	Get model ID from params hash
697	Return the best model ID and error score for a swarm .
698	Returns the information about a model .
699	Get all particle states for a swarm .
700	Return a list of all particle states in the swarm .
701	Returns the number of non - full partitions per generation .
702	Returns a dictionary with the results per choice .
703	Get the stream definition .
704	Check if the job has finished .
705	Record the model progress .
706	Run a model .
707	Check if the engine services are running .
708	Runs a json file with the given options .
709	Run a permutations script .
710	Create a backup file from a file path .
711	Iterate over the model IDs .
712	Launch worker processes .
713	Starts the hypersearch worker .
714	Load a new hypersearch job .
715	Save the hypersearch job ID to disk .
716	Loads the hypersearch job ID
717	Returns the path to the hypersearch job ID .
718	Print the modelInfo to stdout .
719	Query the model IDs .
720	Retrieves the hyperparameters from the hyperparameters .
721	Returns all the metrics for this analysis .
722	Return n records .
723	Returns a list of callbacks for each model termination function .
724	Returns the number of rows in the datastream .
725	Get the pattern at the given position .
726	Add noise to bits .
727	Return a set of all numbers for the given bit .
728	Returns a mapping of bits to numbers for each bit .
729	Pretty print pattern .
730	Generate a set of patterns .
731	Get a random W .
732	Generate a set of patterns .
733	Infer the prediction of a single step .
734	Calculates the error for a given record .
735	Sort a file .
736	Sort records by chunkIndex .
737	Merge multiple records into a single file .
738	Compute the predicted cells .
739	Print a message to stdout .
740	Calculate the coordinate for a given position .
741	Returns the radius for a given speed .
742	Read from a file .
743	Write the message to a file .
744	Decorator to require a TemporalAnomalyDetector model .
745	Remove labels from the anomaly class .
746	Add a label to the anomaly class .
747	Get the labels of the anomaly .
748	Compute anomaly score .
749	Remove duplicates from the likelihoodsDict
750	Returns the region of the classifier .
751	Add an anomaly classifier to the network .
752	Sets the results per choice .
753	Translates the metrics into a JSON string .
754	Sets the metric names .
755	Returns a list of field meta info .
756	Creates the directory of the experiment .
757	Decorator for adding new attributes .
758	Generate random input .
759	Append an input with identical values .
760	Append the input with the nearest neighbor values .
761	Modify the number of bits .
762	Get a random value from the input space .
763	Create a record sensor .
764	Create a spatial network .
765	Run a network .
766	Strip whitespace from a string .
767	Returns a dictionary of all the metrics .
768	Returns the details of a metric .
769	Add the results .
770	Returns the ground truth value for the sensor element .
771	Constructs the metrics module .
772	Shift the inference result based on the current model result .
773	Generate stats for a file .
774	Run SDR classifier .
775	Abbreviate a string .
776	Returns the database name for the given version .
777	Connect to the client .
778	Retrieves matching rows from the given tableInfo .
779	Retrieves one or more rows from the table .
780	Insert a new job .
781	Start a job with retry .
782	Reactivate all running jobs .
783	Returns a list of all the jobs in the scheduler .
784	Cancel all running jobs .
785	Count the number of jobs in this job .
786	Retrieve the jobs that are cancelled .
787	Partition data into chunks of given interval .
788	Retrieve the job info with the given job ID .
789	Retrieve the job info for a given job ID .
790	Set the status of a job .
791	Marks a job as completed .
792	Cancel a job .
793	Retrieve model IDs for a job .
794	Returns the number of jobs associated with a clientInfo .
795	Returns the number of jobs associated with a client key .
796	Get all jobs for a given clientInfo .
797	Update the results of a job .
798	Delete all models from the database .
799	Retrieve the model info for the specified model IDs .
800	Get the fields for a given job .
801	Retrieve the model fields for a checkpointed job .
802	Retrieve the model parameters for the given model IDs .
803	Retrieve the result and status of a model .
804	Advance the next job in the database .
805	Initialize the model .
806	Enables tap .
807	Disables tap .
808	Print output to stdout .
809	Store the samples in the dataset .
810	Finish the learner .
811	Generate a stats file .
812	Fix up the encoder parameters .
813	Read TemporalMemoryMemoryMonitor from proto .
814	Pick a random element from a distribution .
815	Create a new indicator .
816	Create a multi - index indicator .
817	Calculate the distribution of a distribution
818	Grow the histogram .
819	Update the histogram .
820	Import and run a function on a module .
821	Compute the total value of a sliding window .
822	Compute next value
823	Add an instance .
824	Returns the most likely outcome of a prediction .
825	Compute the exp value of a pred .
826	Returns a list of scalar names .
827	Get the value of an input record .
828	Get the description of a field .
829	Return the description of the field .
830	Print the description .
831	Decodes the encoded field .
832	Generate a matplotlib plot .
833	Create a random input vector
834	Run the SDR algorithm .
835	Clears the model .
836	Remove rows from the matrix .
837	Returns the distances between each category .
838	Infer the inference result .
839	Get the nearest neighbors of a given pattern .
840	Find the closest training pattern for the given category .
841	Get the pattern at the given index .
842	Returns the partition ID for the given index .
843	Add a partition ID to the partition .
844	Rebuild the partition ID map .
845	Calculate the distance between the input pattern .
846	Calculate the distances between the inputPattern and the model .
847	Replace the categories with the given mapping .
848	Convert non - numeric data to output .
849	returns the number of elements with the given name
850	Sets the parameter value .
851	Rewind the file .
852	Get the next record from the file .
853	Append a record to the file .
854	Append a list of records .
855	Returns the record as a JSON string .
856	Seek to the end of the file .
857	Update the sequence info .
858	Get the start row of the file .
859	Returns whether the inference element is a temporal inference element .
860	Returns the temporal delay for the specified inference element .
861	Returns the maximum delay of the given inference element .
862	Is this inference type?
863	Create an Enum .
864	Make a directory from an absolute path .
865	Read a configuration file .
866	Set custom properties .
867	Clears the configuration file .
868	Reset all custom configuration properties .
869	Remove the dynamic configuration file .
870	Retrieves a custom configuration file .
871	Edit a custom configuration store .
872	Sets the path to the config file .
873	Get the state of the particle .
874	Initialize a particle state from a particle state .
875	Copies the variable states from the particle state .
876	Returns a dictionary with all variables in the state
877	Agitate variables .
878	Return the position of the particle .
879	Return a logger .
880	Create a model from a dictionary .
881	Compute the active cells .
882	Activate the active cells .
883	Activate dendrites based on activation threshold .
884	Reset all cells .
885	Activate a predicted column .
886	Submits a predicted column .
887	Helper function to create a segment .
888	Remove permanence synapses from the given segment .
889	Determine the number of cells to use .
890	Grow synapses for synapses .
891	Adapt a segment to synapses .
892	Returns the number of cells in the cell .
893	Return the number of cells in the given column .
894	Map a list of cells to their respective columns .
895	Returns the predicted cells .
896	Create a TMapper from a proto .
897	Generates a sequence from a list of numbers .
898	Add spatial noise to a sequence .
899	Pretty print a sequence .
900	Pretty print traces .
901	Pretty print metrics .
902	Update anomaly likelihoods .
903	Calculate the number of records to skip .
904	Create an anomalyLike object from a proto .
905	Write the history to proto .
906	Estimate anomaly probability based on anomaly score .
907	Replace an iteration cycle .
908	Process input record .
909	Advance phase .
910	Process input record .
911	Advance the iterator .
912	Write previous value to proto .
913	Read a previous value from a proto .
914	Compute the log - sum of a list of vectors .
915	Normalize a vector .
916	Log a debug message .
917	Log an info message .
918	Log a warning .
919	Log an error .
920	Log a critical message .
921	Log a message .
922	Return True if the filter is valid False otherwise .
923	Calculates the sum of the aggrgr_mean value .
924	Calculates the mean of each element in list .
925	Determine the mode of an AGGR mode .
926	Generate a dataset from input filename
927	Determine the filename of the input file .
928	Return the end time of the given datetime .
929	Get the pointer for a function name .
930	Create an aggregate record .
931	Get the next record from the record .
932	Run the model .
933	Returns the path to the model checkpoint file .
934	Write the model to a checkpoint directory .
935	Read model from checkpoint directory .
936	Write base to proto .
937	Save the model to disk .
938	Return the path to the model pickle file .
939	Run an experiment .
940	Parses variable arguments and sets them as a value .
941	Report the usage error and exit .
942	Run the experiment .
943	Get the path to the checkpoint directory .
944	Determine the parent directory of the checkpoint directory .
945	Get a checkpoint label from a checkpoint directory .
946	Return True if the directory is a checkpoint directory .
947	Print the available checkpoints .
948	Run the task .
949	Create periodic activities .
950	Corrupts a vector with the given noise level .
951	Shows the predicted columns .
952	Train the TM matrix .
953	Compute closeness scores .
954	Retrieves the caller s name and its name .
955	Print a title .
956	Get the description of a function .
957	Generate a logging file path .
958	Convert an aggregation dictionary to months seconds .
959	Convenience function to divide an aggregation dict into a float
960	Validate that value is a valid opf value .
961	Initialize a logger .
962	Match a list of keys .
963	Get the value of the sensor .
964	Export the network to a MultiDiGraph .
965	Convert array to string
966	Compute the percentage of overlap between two arrays .
967	reset the vector to x2
968	Run CPU on CPU .
969	Extract the arguments from the calling frame .
970	Returns a list of all cells .
971	Copies the current state of all active states .
972	Sets the state pointers for each cell .
973	Check if a segment is active .
974	Map a bucket index to nonzero bits .
975	Create a bucket .
976	Return a new representation of the bucket .
977	Determine if newRep is correct .
978	Count the number of overlaps in the bucket .
979	Count the number of overlap between rep1 and rep2 .
980	Determines if the overlap is within the max overlap .
981	Initialize bucket map .
982	Create a SDR classifier .
983	Builds a Metric from a Trace object .
984	Calculates the number of predicted cells per column .
985	Returns a metric for each predicted cell .
986	Pretty print connections .
987	Pretty - print the sequence cell representation .
988	Create a temporal anomaly .
989	Add a value to the writer .
990	Scale a reader by multiple times .
991	Copy a reader to a writer .
992	Sample from a reader .
993	Get the first on bit value
994	Generates a string describing the ranges .
995	Reset the state .
996	Update the stats infer end
997	Prints a state .
998	Print the confidence table .
999	Prints a column confidence interval .
1000	Print parameters to stdout .
1001	Print summary of compute end summary .
1002	Update the average length according to the previous learning rate .
1003	Infer Phase 1
1004	Infer phase 2 .
1005	learn backtrack from startOffset
1006	Try to learn the path to the previous pattern .
1007	Learning phase 1 .
1008	Learning phase 2 .
1009	Compute the duty cycle for each column .
1010	Trim segments in a cell .
1011	Trim segments in the grid .
1012	Remove all segments in the given cell
1013	Find the closest active cell in the given column .
1014	Find the best matching segment .
1015	Get a new cell for a new cell .
1016	Choose cells to learn from the cluster .
1017	Adapt a segment to a new cell .
1018	Add a synapse .
1019	Return a list of simplePatterns .
1020	Builds the overlapping sequences based on the pattern overlap .
1021	Build a pool of training sequences .
1022	Create a dictionary of TMs .
1023	Assert that TMs have the same TMs .
1024	Determine if a character is quoting .
1025	Quote a character .
1026	Encodes the input into the output .
1027	Convert a string to an integer .
1028	Encode a base64 - encoded string .
1029	Decode base64 to base64 .
1030	Encode a 32 - bit string into a binary string .
1031	Decode base32 to base32 .
1032	Decode base16 to base16 .
1033	Encode a base64 - encoded binary file .
1034	Decode a base64 - encoded file .
1035	Encodes a string into a base64 - encoded string .
1036	Return a range with expanded_from .
1037	Return the start of the range .
1038	Return the end of the range .
1039	Return the column of the source file .
1040	Return line number .
1041	Return a list of source lines .
1042	Compare two AST objects .
1043	Generic visit method .
1044	Unpack a float into a float
1045	Pack a float into a floating point number .
1046	Context manager for adding notes .
1047	Format a list of extracted files .
1048	Print a traceback .
1049	Print an exception to stderr .
1050	Formats the traceback of an exception .
1051	Return a list of lines for the exception .
1052	Print the stack trace to a file .
1053	Extract a stack trace from a function f .
1054	Seed generator .
1055	Shuffle a list .
1056	Return a list of slot names .
1057	Register an extension .
1058	Remove an extension .
1059	Recursively update the attributes of a wrapped object .
1060	Convert a cmp to a key .
1061	Unquote a string .
1062	Format a date into a human readable format .
1063	Read headers .
1064	Determine if a line is a header .
1065	Get the first matching header .
1066	Get a header value .
1067	Return a list of headers for a given name .
1068	Get the address list for a given name .
1069	Go to comments .
1070	Return a list of all IPv4 addresses .
1071	Return a comma - delimited string .
1072	Return the domain of the field .
1073	Get a delimited delimited string .
1074	Return a list of comments .
1075	year month to number of days in the given year .
1076	year month day day and ordinal .
1077	Convert ordinal to XYZ
1078	Return ISO - 8601 - formatted datetime string .
1079	Return a new date with new values replaced .
1080	Calculate the year of the week .
1081	Timezone name .
1082	Return a new time with new values replaced .
1083	Construct a datetime from a given date and a given time .
1084	Return the time part with tzinfo None .
1085	Return the time part with same tzinfo .
1086	Return a new datetime .
1087	Same as a plus b for a and b sequences .
1088	Return the number of times b occurrences in a .
1089	Return the first index of b in a .
1090	Same as a plus b for a and b sequences .
1091	Encode a base string .
1092	Substitute a string .
1093	Split a string .
1094	Find all matches in a string .
1095	Escape all non - alphanumeric characters in pattern .
1096	Free a temporary variable .
1097	Decode a BAM file .
1098	Get closest matches for a given word .
1099	Count the number of leading characters in a line .
1100	r Print a unified diff between two files .
1101	r Print a diff between two files .
1102	r Return a generator that yields a sequence of strings .
1103	Make a new Match object from a sequence or iterable
1104	Set the sequence 1 .
1105	Set the sequence number .
1106	Return a list of matching blocks .
1107	Get opcodes .
1108	Return a list of opcodes grouped by n .
1109	r Iterate over the lines of two lines .
1110	Recursively iterate over the data .
1111	r Produce qformat .
1112	Make a file from lines .
1113	Splits a single line into the data_list .
1114	Collect lines from diffs .
1115	Add prefix to the prefix .
1116	Convert flags into HTML .
1117	Make a table from two lines .
1118	Creates a benchmark .
1119	Return a list of all the files in a directory .
1120	Pretty printer .
1121	Return a pretty representation of an object .
1122	Decorator to apply action .
1123	Create a lexer .
1124	Create a locator .
1125	Creates a rule .
1126	Decorator to add an expected rule .
1127	A simple sequence rule .
1128	Create a Seq rule .
1129	Registers a newline rule .
1130	Join a base URL into a base .
1131	Reload a URL .
1132	Return a new SplitResult object replacing specified fields with new values
1133	Get the lines of a file .
1134	Update the contents of a file .
1135	Return True if path is a file .
1136	Return True if s is a directory .
1137	Given a list of pathnames returns the longest common leading component
1138	Splits a string into separate parts .
1139	Wraps the given text with the given width .
1140	Fill text with given width .
1141	Redent the given text .
1142	Convert a long integer to bytes .
1143	Transform a list of characters into a list of longs .
1144	Initialize the message - digest and set all fields to zero .
1145	Add an event to the queue .
1146	Make a copy of an object .
1147	Recursively copy an object .
1148	Keep the cache and keep it alive
1149	Warn a warning .
1150	Print a warning message .
1151	Format a warning message .
1152	Log a warning message .
1153	Calculate the hash of the sequence .
1154	Remove an item from the list .
1155	Pop an item off the list .
1156	Convert a value to a string .
1157	Acquire a lock .
1158	Release the lock .
1159	Block until the lock is acquired .
1160	Notify this lock .
1161	Acquire the lock .
1162	Set the flag to True .
1163	Wait for the lock .
1164	Start the thread .
1165	Execute the target .
1166	Joins the current thread .
1167	Dump the registry to a file .
1168	convert bp format to a qp format
1169	Convert a RQX string into a RLEcode .
1170	Format the given text .
1171	Formats the option names .
1172	Update the object s attributes .
1173	Insert x into a sorted array .
1174	Lock a function .
1175	Unlock the queue .
1176	Return a shallow copy of this matrix .
1177	Search a string using SRE_Match .
1178	Substitute a string .
1179	Split a string .
1180	Create a tuple of regular expressions .
1181	Groups the data into one or more groups .
1182	Perform a fast search .
1183	Push a new context onto the stack .
1184	Match the given context .
1185	Dispatch an opcode .
1186	Check character set .
1187	Extracts the remainder of the given part .
1188	Round a given number of digits to a given number .
1189	Return the next n bits below n .
1190	Return a list of names matching a pattern .
1191	Return True if name matches a pattern .
1192	Translate a regular expression to a regular expression .
1193	Mark all tasks as done .
1194	Put an item into the queue .
1195	Calculate the transitive dependencies of a module .
1196	Make future features .
1197	A context manager .
1198	Compute the loss .
1199	Returns a list of all variables .
1200	Create a baseline from a spec .
1201	Reset the state .
1202	Execute an action .
1203	Perform a single step .
1204	Create a Layer from a spec .
1205	Return the target optimizer arguments .
1206	Create an Environment from a spec .
1207	Set up Sphinx .
1208	Output an image link .
1209	Output an EOL literal marker .
1210	Generate a table table .
1211	Run the script .
1212	Generates a worker agent factory .
1213	Run a single agent .
1214	Convert a flat position to a tuple .
1215	Wait for the given state .
1216	Create an optimizer from a spec .
1217	Register saver ops .
1218	Save the tensor to the given path .
1219	Restore the current state of the tensor .
1220	Reset all fetches .
1221	Process a tensor .
1222	Process input shape .
1223	Create a preprocessor stack from a spec .
1224	Sets the optimizer .
1225	Sets up the memory and optimizer functions .
1226	Compute the cumulative reward for the given terminal .
1227	Compute tf loss per instance .
1228	Compute loss .
1229	Arguments for optimizer .
1230	Compute the optimizer .
1231	Import a tensorflow estimator .
1232	Import an experiment .
1233	Create a Distribution object from a spec .
1234	Synchronize the model .
1235	Create an Agent object from a spec .
1236	Retrieves a named tensor .
1237	Create a network from a spec .
1238	Put an item into the memory .
1239	Move an item from the queue .
1240	Move an item at the given position .
1241	Return the next position .
1242	Samples a child with the given priority .
1243	Sample a batch of memory .
1244	Update the batch .
1245	Import an experience .
1246	Disconnect the socket .
1247	Receive a message from the socket .
1248	Is the given action available?
1249	Determines if an action is available .
1250	Perform a single action .
1251	Perform a left action .
1252	Add a random tile .
1253	Print the current state .
1254	Setup the saver .
1255	Setup scaffold .
1256	Sets up the checkpoint hooks .
1257	Create atomic observer operations .
1258	Returns the set of Savable components .
1259	Save a component
1260	Restore a component
1261	Get a component by name .
1262	Import demonstration information .
1263	Return the current state of the screen .
1264	Make sure states are valid .
1265	Make sure the actions spec is valid .
1266	Make a game .
1267	Go to the board .
1268	Fire the game .
1269	Forward the game .
1270	Fires the plot .
1271	Sets up the tensorflow inputs .
1272	Create the distributions for each action .
1273	Create an exploration object from a spec .
1274	Create a Memory object from a spec .
1275	Retrieve the indices of the given indices .
1276	Initialize the optimization .
1277	Perform a single iteration step .
1278	Convert text into Markdown .
1279	Parse a lheading .
1280	Wrap the line breaks .
1281	Return a block of code .
1282	Remove HTML tag from HTML .
1283	Add a link to the page .
1284	Return HTML for a footnote .
1285	Render a footnote tag .
1286	Build a list of tf . meta_params .
1287	Process a docstring .
1288	Compute the loss function .
1289	Return the arguments for the baseline optimizer .
1290	Perform a single step .
1291	Sets up the TensorFlow components .
1292	Import a TensorFlow experiment .
1293	Compute the loss .
1294	Combined loss function .
1295	Import a demo experiment .
1296	Update the demo .
1297	Create a tensorflow object from a config object .
1298	Sets the text of the clipboard .
1299	Resets the console color .
1300	Create a window from a point .
1301	Sends a mouse event .
1302	Sends a keybd event .
1303	Post a message to the system .
1304	Send a message to the specified handle .
1305	Retrieves the console title .
1306	Retrieves the console title .
1307	Determines if the system is locked .
1308	Determines if a process is 64 bit .
1309	Create INPUT .
1310	Create a new input .
1311	Create an input .
1312	Create an input instruction .
1313	Create a control object from a point .
1314	Creates a control .
1315	Deletes the log .
1316	Retrieves all pixel colors of the rectangle .
1317	Retrieves the children .
1318	Sets the text .
1319	Determines if this window is a top level .
1320	Returns the control control .
1321	Maximize the window .
1322	Moves the window to the top level .
1323	Sets the active window .
1324	Main thread function .
1325	Compute saliency map
1326	Create a Keras model from a Keras model .
1327	Return the normalized distance of the image .
1328	Get channel axis .
1329	Returns True if the model has gradient .
1330	Returns the predictions for the given image .
1331	Batch prediction for images .
1332	Return the gradient of the image .
1333	Compute predictions and gradient of an image .
1334	Gradient of the model .
1335	Given a set of logits return the best class .
1336	Returns the name of the filter .
1337	Compute the softmax .
1338	Calculate cross entropy .
1339	Calculate the cross entropy of the batch .
1340	Binarize an array .
1341	Create an image .
1342	Generate samples from the dataset .
1343	One - hot - like object .
1344	Get the image corresponding to the input image .
1345	Compute predictions for the image .
1346	Calculate the gradient of an image .
1347	Clone a Git repository .
1348	Write a success response .
1349	Write an error response to the server .
1350	Write a response to the client .
1351	Make a response dictionary .
1352	Make a success response .
1353	Make an error response .
1354	Get the parameter cluster .
1355	Get the role of the request .
1356	Get the environment variable .
1357	Returns the topology of the request .
1358	Returns the component of the request .
1359	Returns an instance of the argument .
1360	Get the starttime of the request .
1361	Get the end time of the request .
1362	Get the query from the request .
1363	Get the offset of the request .
1364	Returns the length of the argument .
1365	Return the names of the required arguments .
1366	Validate the interval .
1367	Start the connection .
1368	Register a message builder .
1369	Create a tar archive .
1370	Get a subparser for the given command .
1371	Return the path to the Honon directory .
1372	Return a list of all heron libraries .
1373	Return the default cluster role env .
1374	Parses the override configuration file and writes it to disk .
1375	Parse an overrides configuration property .
1376	Returns the java path to the java .
1377	Check if JAVA_HOME is set .
1378	Check that the release file exists .
1379	Print build info .
1380	Get the version number from the hdf5 release file .
1381	Get the exception summary for a particular component .
1382	Register a callback .
1383	Unregister a watch .
1384	Trigger all registered watches .
1385	Set the physical plan .
1386	Set the packing plan .
1387	Set the execution state .
1388	Returns the number of instances in this cluster .
1389	Returns a list of all the machine names .
1390	Returns the current status of the plan .
1391	Convert a protobuf protobuf protobuf protobuf protobuf .
1392	Sync topologies .
1393	Get a topology by role and environment
1394	Returns a list of topologies for a state machine .
1395	Add a new topology .
1396	Remove a topology .
1397	Extract the execution state from the topology .
1398	Extract the scheduler location from the topology .
1399	Extracts tmaster location from the topology .
1400	Extracts the logical plan from the topology .
1401	Extracts packing plan from the topology .
1402	Set topology information .
1403	Get the topology info for a given topology
1404	Loads the configuration from the state machine .
1405	Validate extra links .
1406	Validate URL format .
1407	Emit a Top .
1408	Determine if we need to continue to work .
1409	Convert components to a table .
1410	Remove all bolts from a table .
1411	Filter out spouts .
1412	Get a callback for the topologies .
1413	Get a packing plan for a given topology .
1414	Get the PVLAN details for a given topology
1415	Create a physical plan .
1416	Get the execution state of a given topology
1417	Get the execution state for a given topology .
1418	Create an execution state .
1419	Get the location of the scheduler .
1420	Get the location of the scheduler .
1421	Load an object from a file - like object .
1422	Deserialize a Python object .
1423	Copy this object to another object .
1424	Validate state locations .
1425	Initialize the PulsarSpout .
1426	Retrieves a Jstack instance .
1427	Create a command line parser .
1428	Build a dictionary of arguments to be passed to the constructor .
1429	Convert a dictionary of arguments to a list .
1430	Run a command .
1431	Get the PID of an instance .
1432	Returns True if the grouping is a valid grouping .
1433	Convenience method to create a new GroupingGroup .
1434	Create a custom class grouping .
1435	Register the metrics with the given interval .
1436	Update a metric by name
1437	Update a reduced metric by name
1438	Update the received packet count .
1439	Update the number of sent packets .
1440	Register metrics .
1441	Serialize a data tuple .
1442	Update the next tuple .
1443	Update the executor count .
1444	Deserialize a data tuple .
1445	Register a metric .
1446	Return the next item from the queue .
1447	Put an item into the buffer .
1448	Parse a SemVer .
1449	Return a list of ZkStateManagers .
1450	Return a list of FileStateManagers .
1451	Increment the value by key .
1452	Update a metric by key .
1453	Add a key to the value .
1454	Add a new data tuple to the stream .
1455	Adds a checkpoint to the store .
1456	Validate classpath entry .
1457	Validate classpath .
1458	Return a list of the dependencies of the egg .
1459	Load a pex .
1460	Tries to load a module from a class path .
1461	Import a class from a pex path .
1462	Add a source to the builder .
1463	Build the topology .
1464	Replace wildcards in config file .
1465	Return a dictionary with the command handlers .
1466	Set the default value for a constant .
1467	Process a Tuple .
1468	Process a tick .
1469	Process a tick .
1470	Fetches all stmgrs from the Tmaster server .
1471	Sets up the executor .
1472	Main function .
1473	Returns the command line for the healthmgr .
1474	Return a dict with the tmaster processes
1475	Get the streaming processes .
1476	Create a checkpoint manager .
1477	Get the instance plans for a packing plan .
1478	Retrieve the process processes for the Heron shell .
1479	Wait for stdout and stderr logs to stdout .
1480	Start processes .
1481	Start the process monitor .
1482	Return the commands to run on the machine .
1483	Launch all processes .
1484	Start the state manager .
1485	Run the builder .
1486	Import a list of modules .
1487	Load a class from a dictionary .
1488	Save a module .
1489	Save an object to a file .
1490	Return the last n lines of a file .
1491	Load the serializer from the cluster configuration .
1492	Register a task in seconds .
1493	Get the next timeout interval .
1494	Trigger all timers .
1495	Find the closing braces in a query string .
1496	Splits a query into parts .
1497	Parse a query string .
1498	Process input tuples .
1499	Acknowledge a Tuple .
1500	Mark a failure as failed .
1501	Generate hcl for slave mode .
1502	Generate a yaml config file .
1503	Generate a yaml config file .
1504	Generate hcl for apiserver .
1505	Generate statemgr config file .
1506	Generate HCL for HCL .
1507	Print cluster info .
1508	Add additional command line arguments .
1509	Terminate a cluster .
1510	Start a cluster .
1511	Start Heron Tools on a master
1512	Distribute the Heron package to a tarball .
1513	Wait for the cluster to start up .
1514	Waits until the given job is available .
1515	Execute a SCP package .
1516	Create a tarball from source_dir .
1517	Start a list of masters .
1518	Start the slave nodes .
1519	Read and parse the roles from an inventory file .
1520	Get the home path of a remote host .
1521	Get the hostname of a remote host .
1522	Determines if an address belongs to this host .
1523	Log a message .
1524	Remove symlinks from src .
1525	Convert a result dict into a table table .
1526	Add error context .
1527	Check if port is reachable .
1528	Pick an unused port .
1529	Establish an SSH tunnel .
1530	Monitor the topologies .
1531	Get the PhysicalPlan object for the given topology .
1532	Get the execution state of a given topology .
1533	Get the location of a scheduler .
1534	Create socket options from sys_config .
1535	Initialize a Topology .
1536	Parse HOMON_OPTIONS environment variable .
1537	Add a spec to the topology builder .
1538	Add a spout .
1539	Add a bolt .
1540	Set the topology configuration .
1541	Build and submit the topology .
1542	Return a mapping of metric queries .
1543	Get cluster clusters
1544	Get the logical plan .
1545	Get topology info
1546	Get the metrics for a particular component .
1547	Configure logging .
1548	Initialize a rotating logger .
1549	Configure logging level .
1550	Return the spout .
1551	Create a Bolt .
1552	Return the base component of this component .
1553	Create a protobuf protobuf protobuf .
1554	Add in_streams into the pipeline .
1555	Add output streams to the output stream .
1556	Returns the set of streams in the output .
1557	Convert a stream_id into a protobuf .
1558	Create a stream schema from a list of fields .
1559	The component ID .
1560	Register a metric .
1561	Retrieves all the sources of a component .
1562	Returns a list of all tasks in the given component .
1563	Add a task hook .
1564	Returns the metrics collector .
1565	Invoke the spoutink .
1566	Invoke a spout_fail event .
1567	Invoke the task hooks .
1568	Invoke BoltAck .
1569	Invoke a bolt fail event .
1570	Submit a fat jar .
1571	Submit a topology file .
1572	Sets up the text file .
1573	Add verbose option .
1574	Add a tracker URL .
1575	Escape a hex string .
1576	Make a shell endpoint .
1577	Make log files URL .
1578	Make a log file URL .
1579	Create a OutgoingPacket .
1580	Send the message .
1581	Create an IncomingPacket .
1582	Read the incoming packet .
1583	Generate a REQID .
1584	Read a yaml config file .
1585	Send buffered messages .
1586	Handles a TopologyState change message .
1587	Check that the output schema is expected .
1588	Returns the topology configuration
1589	Sets the topology context .
1590	Convert a protobuf protobuf to a Python dict .
1591	Sets up the custom grouping object .
1592	Add a target to the workflow .
1593	Perform preparation of all targets .
1594	Choose the tasks for a given stream .
1595	Return a string representation of the mode .
1596	Format mtime .
1597	Format the prefix of a file .
1598	Read a chunk from a file .
1599	Create a subprocess from to_cmd .
1600	Execute a command
1601	Chain a list of commands .
1602	Parse the topology location .
1603	Convert a dictionary of metrics into a table .
1604	Get the metrics for the given command .
1605	Run the given command .
1606	Return a list of running containers .
1607	Create a HeronComponentSpec .
1608	Create a HeronTuple .
1609	Create a HeronTuple .
1610	Create a RootTupleInfo object .
1611	Parse NOLINT suppressions .
1612	Process global error suppression .
1613	Determines if an error is suppressed by Nolint .
1614	Matches a regular expression .
1615	Replaces all occurrences of a regular expression .
1616	Searches for the given pattern .
1617	Determines if an error should be printed .
1618	Determine whether a string is a Cpp string .
1619	Removes whitespace from raw strings .
1620	Find next multi line comment start .
1621	Find next multi line comment .
1622	Removes comments from a given range .
1623	Finds the end of an expression in a line .
1624	Search for closing expression .
1625	Searches for start of expression in a given line .
1626	Reverse closing expression .
1627	Check for copyright message .
1628	Extract indent level from a string .
1629	Retrieves the variable guardCPP variable from a file .
1630	Check for header guard .
1631	Checks if the given filename is included in include_state .
1632	Check for bad characters .
1633	Check for a newline at the end of the file .
1634	Check for POSIX threads .
1635	Checks for spacing for a function call .
1636	Checks for function lengths .
1637	Check if a comment is valid .
1638	Checks for spacing .
1639	Check parenthesis spacing .
1640	Check for whitespace spacing .
1641	Determines if expr is a type .
1642	Check for braces spacing .
1643	Check section spacing .
1644	Retrieves the previous line and the previous line .
1645	Check for trailing whitespace .
1646	Search for a check macro .
1647	Checks if the file is valid .
1648	Check for alternative tokens .
1649	Determines the width of a line .
1650	Drops common suffixes .
1651	Classify include .
1652	r Finds the text inside a given pattern .
1653	Check global static constants .
1654	Check for printf .
1655	Determines if a function is a derived function .
1656	Determines if a method definition is an out of a function definition .
1657	Determines if a line is a constructor list .
1658	Checks for nonconst references .
1659	Checks for constants .
1660	Checks if the given line matches the given pattern .
1661	Matches expected function arguments .
1662	Determines if two files belong to the same module .
1663	Update include state .
1664	Checks if the make_pair argument is a pair .
1665	Check for redundant virtual files .
1666	Check if a function is redundant .
1667	Determines if a block is within a namespace .
1668	Determines if a namespace indentation should be used .
1669	Flag C ++14 features .
1670	Process file data .
1671	Process config overrides .
1672	Process a file .
1673	Print error categories .
1674	Parses command - line arguments .
1675	Expand all directories in a directory .
1676	Find the first occurrence of a header .
1677	Reset the section .
1678	Determines if the file is in alphabetical order .
1679	Checks the next include order .
1680	Sets the verbose level .
1681	Add filter filters .
1682	Increments the error count .
1683	Prints the error counts .
1684	Begins a function .
1685	r Repository name .
1686	Split the repository name into a project name .
1687	Collapse a list of strings .
1688	Check for namespace end .
1689	Is a template argument list?
1690	Update preprocessor info .
1691	Return the innermost class .
1692	Check for completed blocks .
1693	Apply a map function to this map .
1694	Apply a flatmap function to this object .
1695	Apply a filter function to this object .
1696	Clones the partition .
1697	Create a reduce by applying a reduce function to the stream .
1698	Return the union of two streams .
1699	Create a log streamlet .
1700	Consume a stream .
1701	Join this stream into another streamlet .
1702	Perform an outer join on the streamlet .
1703	Create an outer join streamlet .
1704	Perform a join on the streamlet .
1705	Extract common arguments from command line .
1706	Expand a command into a list .
1707	Run a command .
1708	Connect to a command .
1709	Send string to stdin .
1710	Return a PyJS object .
1711	Set function name
1712	Constructs a NumPy array .
1713	Constructs an object from a dictionary .
1714	Emit an op .
1715	Compile the instruction .
1716	Pad a number to the right .
1717	Replace all occurrences of a replacement template .
1718	Fix javascript arguments .
1719	Emit an event .
1720	Translates an element to a class
1721	Decorator to limit a function .
1722	Return True if t is a Lval identifier .
1723	Translate a JavaScript file .
1724	Execute a JavaScript snippet .
1725	Evaluate expression .
1726	Return the start and end of the source .
1727	Parse an identifier .
1728	Convert to a list .
1729	Parse a statement .
1730	Matches a string at pos .
1731	Call this function .
1732	Return True if n is an empty object .
1733	Determine if a string is an object .
1734	Remove objects from code .
1735	Return True if source is a regular expression .
1736	Parse a number from a source string .
1737	Parse a number literal .
1738	Unify a JavaScript string .
1739	Determine whether this object is in the other .
1740	Download and extract the data and extract it .
1741	Add one or more states .
1742	Make a tensor .
1743	Save tensor to a file .
1744	Convert a comma - separated list of arguments to a string .
1745	Set permissions .
1746	Check if access is allowed
1747	Return True if index is in the range
1748	Convert an index into an index .
1749	Map memory to memory .
1750	Return a sorted list of mappings .
1751	Scan memory for data_to_find
1752	Return the name of the register .
1753	Get the argument values for a model .
1754	Write a value to the register .
1755	Read a single register .
1756	Emulate emulate .
1757	Writes an integer to the memory .
1758	Read raw data from the map .
1759	Read an integer from the memory .
1760	Read bytes from the stream .
1761	Read a string from the stream .
1762	Push bytes to the stack .
1763	Pop nbytes from the stack .
1764	Push an integer onto the stack .
1765	Pop an integer from the stack .
1766	Decodes an instruction .
1767	Execute the instruction .
1768	Publish an instruction as executed .
1769	Emulate the concrete unicorn emulation .
1770	Simulate the given insn .
1771	Visualize the workspace .
1772	Push a value to the CPU .
1773	Pop an item off the stack .
1774	Invalidate the instruction cache .
1775	Calculate the CPU ID .
1776	Multiply an AND instruction .
1777	Test if two sets are zero
1778	Perform OR operation on the dest .
1779	Sets the ARM address .
1780	Align an AH value .
1781	Align an AH instruction .
1782	Sets the AH and AF .
1783	Add an ADC to the destination .
1784	Compute the CMP .
1785	Compute CMP - CHG .
1786	Perform CMPX on the CPU .
1787	Sets DAA .
1788	Sets the DAS instruction .
1789	Divide the dividend .
1790	Divide integer .
1791	Multiply a set of operands .
1792	Increment an integer value .
1793	Multiply a register .
1794	Negate the given CPU .
1795	Substitute src into dest .
1796	Perform XADD operation .
1797	Perform BSWAP operation .
1798	Perform a CMOV operation .
1799	Move from src to dest .
1800	Copy the contents of src to dest .
1801	Activate the LAF .
1802	 LEA instruction .
1803	Moves bits from src to dest .
1804	Sets the Zend field .
1805	Write SETA data to dest .
1806	Writes a value to the dest .
1807	Sets the value of the CPU .
1808	Set the C value to the dest .
1809	Write an EBS instruction .
1810	Set the size of the given cpu .
1811	Writes an unsigned integer to dest .
1812	Sets the number of bits to the dest .
1813	Writes the CPU to the dest .
1814	Writes a new size to the dest .
1815	Sets the end of the given cpu .
1816	Write OFF mode to dest .
1817	Sets the size of the file .
1818	Write zeros to the dest .
1819	Set the number of bits left to dest .
1820	Set the fft value .
1821	Set the fft value .
1822	Sets the PPO instruction .
1823	Write a setter to the dest .
1824	Set zeros .
1825	Leaves the stack .
1826	Push bytes onto the CPU .
1827	Call op0 .
1828	Performs a RET instruction .
1829	Perform a JA instruction .
1830	Binary instruction .
1831	Perform a JBE instruction .
1832	Compute the PC instruction .
1833	CXZ instruction .
1834	Perform a JECXZ instruction .
1835	Perform the RRCXZ instruction .
1836	Perform a JG instruction .
1837	JGE instruction .
1838	BNB instruction .
1839	JNE instruction .
1840	Perform a JNG instruction .
1841	JNOOP instruction .
1842	JNP instruction .
1843	Send a JNS address .
1844	Joins the given target .
1845	Compute the PC instruction .
1846	Perform JavaScript instruction .
1847	Perform a ZZ instruction .
1848	Jump to the CPU .
1849	Perform a LOOP instruction .
1850	Loops the instruction .
1851	RCL instruction .
1852	Perform SAR operation .
1853	Perform SHR shift operation .
1854	Shift a number of bits .
1855	BSF instruction .
1856	BSR operation .
1857	Binary BT instruction .
1858	Set the value of BTC to the dest register .
1859	Multiply CMPS .
1860	Perform LODS operation .
1861	Moves the contents of src to dest .
1862	Compute the SCAS instruction .
1863	Sets the number of bytes from src to dest .
1864	S SARX operation .
1865	Perform a PSH instruction .
1866	Create a PSHUDF instruction .
1867	Multiply the remainder of op0 .
1868	Perform a PSRL - D - D - D Q - D Q - D q - q - q - q - q .
1869	Multiply a zend operation .
1870	Move the left of op0 to the left .
1871	Calls CWDE .
1872	Sets the RTSC value .
1873	Moves a LPD file .
1874	Moves the given HDPD to the destination .
1875	Perform a PSUBB .
1876	Perform a MOVQ instruction .
1877	Moves memory from src to dest .
1878	Moves the left and right bits .
1879	Perform an EXTRACTF128 operation on the destination .
1880	SRLQ instruction .
1881	Constrain a constraint .
1882	Create a symbolic buffer expression .
1883	Create a new symbolic value .
1884	Concatenate the expression .
1885	Solve the given buffer at the given address .
1886	Called by Xfer_mem .
1887	Emulate memory .
1888	Return True if constraints are true False otherwise .
1889	Minimize the problem .
1890	Find the minimum value of x .
1891	Get the solver version .
1892	Start the process .
1893	Reset the process .
1894	Send command to the process .
1895	Receive a single line from the server .
1896	Check if the solver is satis .
1897	Asserts that an expression is true .
1898	Get the value of an expression .
1899	Determines if the given expression can be true or not .
1900	Get all values for a given expression .
1901	Get a value from the model .
1902	Return a fully qualified name .
1903	Return a colored level name .
1904	Find the zero value of a constant .
1905	Compares two strings .
1906	Reads a string s length .
1907	Return the set of all events .
1908	Forward events to a sink .
1909	Get profiling stats .
1910	Start the Manticore .
1911	Retrieves the number of bits .
1912	Signed integer .
1913	Return a context manager for a policy .
1914	Enqueue a new state .
1915	Add a new state .
1916	Get a state .
1917	Fork a constraint .
1918	Main loop .
1919	Create an ELF binary .
1920	Create a binary tree from a binary path .
1921	Invoke all registered generic hooks
1922	Resolve a symbol by symbol .
1923	Determine whether the binary is an arch
1924	Return a list of symbols from a binary file .
1925	Get a group by name .
1926	Save group to a file .
1927	Parse a yaml config file .
1928	Load configuration overrides .
1929	Process config values .
1930	Add a new variable .
1931	Update a group .
1932	Get the description of a variable .
1933	Returns the signature for a function .
1934	Returns the constructor arguments .
1935	Get source code for a given offset .
1936	The constructor of the constructor .
1937	Get the functionabi for a given hsh .
1938	Return the type of the function argument .
1939	Return the return type of a function .
1940	Get the signature of a function .
1941	Callback for memory allocation .
1942	Unmap memory .
1943	Change memory protection .
1944	Calls sysscall .
1945	Called when a write operation is received .
1946	Emulate an instruction .
1947	Synchronize to Manticore .
1948	Write memory to memory .
1949	Write a value to the register .
1950	Update a segment .
1951	Mark a function as deprecated .
1952	Apply a function to each item in a list .
1953	 solve bytes in datas based on
1954	Get the constraints for the machine .
1955	Create a new empty platform .
1956	Execute a program .
1957	Initialize kernel helper .
1958	Open a file .
1959	Open a file .
1960	Rename a file
1961	Sync a file descriptor .
1962	Triggered by sys . trt .
1963	Determine the sigproces of the system .
1964	Change the root of a path .
1965	Multiply a system memory offset .
1966	Retrieve the syscall of the current system .
1967	Schedules the scheduler .
1968	Wait for the current process to finish .
1969	Wake a procid and reestablish it .
1970	Receive a signal .
1971	Update the timers .
1972	Return the total size of an interp segment .
1973	Open file descriptor .
1974	Allocates memory .
1975	Generate random bytes .
1976	Receive data from a file descriptor .
1977	Delete memory .
1978	Schedules the scheduler .
1979	Wait for one or more processes .
1980	Read from a file descriptor .
1981	Write to a file descriptor .
1982	Decorator to register a function .
1983	Save a value to a file .
1984	Load a value from the cache .
1985	Saves a value to a file .
1986	Load a value from the cache .
1987	Save a state to a file .
1988	Load a state from the cache .
1989	Saves a file with the given key .
1990	Remove a key from the cache .
1991	List files matching glob_str
1992	Get a unique id .
1993	Load a state .
1994	Save a state .
1995	Return a stream containing the named stream .
1996	Compare GEMU regs .
1997	Syncs the syscall .
1998	Visit the given node .
1999	Calls the method on the given expression
2000	Visit the operands and return the result .
2001	visit a bitvecor or expression
2002	Return the size of a type .
2003	Call a function call .
2004	Generate a function selector .
2005	Serialize an unsigned integer .
2006	Serialize an integer to an integer .
2007	Deserialize an unsigned integer .
2008	Deserialize an integer .
2009	Decorator for concretizing arguments .
2010	Get the amount of memory allocated to the given address .
2011	Read a byte from the bytecode .
2012	Return instruction instruction .
2013	Push a value onto the stack .
2014	Get the top n elements of the stack .
2015	Roll back the state of the transaction .
2016	Store memory at the given offset .
2017	Return the divider of the integer b .
2018	Return the modulo of b .
2019	Return the SMOD of an integer .
2020	Return the ADDMOD of the instruction .
2021	Return the amount of gas .
2022	Create a SIGNEXT instruction .
2023	Create an LT instruction .
2024	Return an unsigned integer .
2025	Return the SGT operator .
2026	Create a byte expression .
2027	Return the SHA3 of the buffer .
2028	Calls CALL instruction .
2029	Calls DATACOPY operation .
2030	Copy bytecode into memory .
2031	Copies an extended bytecode into memory .
2032	Load memory into memory .
2033	Store the value at the given address .
2034	Store an 8 - bit value .
2035	Read the value at the given offset .
2036	Store a value at the given offset .
2037	JUMPI instruction .
2038	Swap two operands .
2039	Sends a CALLCode code .
2040	Retrieve data from the buffer .
2041	Sends a recipient to the world .
2042	Return a tuple of human - readable transactions .
2043	Return the current transaction .
2044	Get the value of a given storage .
2045	Set storage data at the given offset .
2046	Get a list of items from storage .
2047	Checks if the given address has storage .
2048	Return a new address for a given sender .
2049	Create a contract .
2050	Swap the mode .
2051	Perform a MRC instruction .
2052	Compute the LDR DDR D between two registers .
2053	Compute a STRD between two registers .
2054	Advance the address .
2055	Add a register to the dest .
2056	Binary op .
2057	Multiply memory .
2058	Return the difference between two dictionaries
2059	Disassemble instruction .
2060	Add a constraint to the set .
2061	Declare a variable .
2062	Return the declarations of constraints .
2063	Determines if an expression is declared .
2064	Migrate an expression .
2065	Inverse of the encoder .
2066	Convert data to ordinal encoding .
2067	Reverse dummy values .
2068	Retrieve data from the source data .
2069	Get splice data .
2070	Convert column names to integer .
2071	Transform a column to the base .
2072	Return a list of column names in a DataFrame .
2073	Convert input to numeric values .
2074	Convert input to a pandas Series .
2075	Compute the cross validation score .
2076	Run a logistic regression .
2077	Print a message to stdout .
2078	Associate a notification template with a notification template .
2079	Disassociate a notification template .
2080	Register a callback .
2081	Decorator to aggregate a job template .
2082	Lookup the results of a job .
2083	Launch a workflow job .
2084	Parse command arguments .
2085	Format the options .
2086	Retrieve a single object by id .
2087	Convert pagenum to integer .
2088	Delete an object .
2089	Get a single record .
2090	Disassociate the given resource with another .
2091	Create a copy of the resource .
2092	Retrieve the latest job data .
2093	Get the stdout of a job .
2094	Write a job to a file .
2095	Monitor the status of a job .
2096	Get the status of a job .
2097	Cancel a job .
2098	Relaunch a container .
2099	Update inventory sources .
2100	Try to read the results from the server .
2101	Log a message to stderr .
2102	Configure a relationship
2103	Produce a method for a resource .
2104	Create a label .
2105	Print Ansible Tower CLI version .
2106	Print a setting .
2107	Display a configuration option .
2108	Login to Tower CLI .
2109	Receive data from the tower .
2110	Send data to the tower .
2111	Empty a tower .
2112	Parse a requirements file .
2113	Modify a resource .
2114	Update a project .
2115	Get the status of a job .
2116	Convert value to file object .
2117	Convert value to actual choice
2118	Convert a value into an integer .
2119	Create a parent filter for the parent .
2120	Associate a success node .
2121	Disassociate a Success node .
2122	Associate a failure node .
2123	Disassociate a failure node .
2124	Associate a child with a parent .
2125	Disassociate a child node .
2126	Return data endpoint .
2127	Populate resource_name and resource_type fields .
2128	Set the columns on the table .
2129	Configure the display
2130	List resources .
2131	Get a single role .
2132	Recursively compare a list of node lists
2133	Builds the structure of the workflow node .
2134	Get the workflow structure for a workflow .
2135	Associate a notification template with a workflow .
2136	Disassociate a notification template .
2137	Create a resource group .
2138	List the inventory .
2139	Associate group with parent .
2140	Disassociate a group .
2141	Parse a string into a dictionary
2142	Process extra_vars .
2143	Serialize data to OrderedDict .
2144	Get the API prefix .
2145	Make a request .
2146	Parse kwargs from kwargs
2147	Configure the notification configuration .
2148	Create a notification template .
2149	Modify a resource .
2150	Delete a resource .
2151	List all resources .
2152	Get a resource by primary key .
2153	Read configuration from environment variables .
2154	Read a config file .
2155	Set the runtime parameter .
2156	Launch the ad - hoc command .
2157	Parse the help text in the help text .
2158	Decorator to print a method .
2159	Format a YAML payload .
2160	Convert a payload to a string .
2161	Get a command .
2162	Update an inventory source .
2163	List resources .
2164	Get a list of facts .
2165	Format the commands .
2166	List all commands .
2167	List all available resources .
2168	List misc commands .
2169	Get a command .
2170	Decorator to configure a CLI command .
2171	Add unified job template options .
2172	Return a new state .
2173	Prepares the authorization URL .
2174	Extracts the token from the request URI .
2175	Refresh a refresh token .
2176	Make a request to the API .
2177	Determine if the client is authorized .
2178	Add parameters to an authorization URL .
2179	r Fetches a request token .
2180	Fetches an access token .
2181	Parses an authorization response into a dictionary .
2182	Rebuild the authorization header .
2183	Iterate over all versions of the file .
2184	Clear the cache
2185	Try to load an object from the cache .
2186	Load the cache .
2187	r Perform a function call to the database .
2188	Retrieves the certificate .
2189	Return product s product .
2190	Hash a product file .
2191	Is the certificate expired?
2192	Renew a certificate .
2193	Is the redirect?
2194	Return the encoding of the stream .
2195	Write a message to the stream .
2196	Flush the stream .
2197	Read a part from the cap .
2198	Return the path to the platform data directory .
2199	Return the path to the config directory .
2200	Ensure app_data directory exists .
2201	Ensure app config directory exists .
2202	Ensure app cache directory exists .
2203	start a file
2204	Searches for an executable .
2205	Return the user home directory .
2206	Compress user home directory
2207	Ensure path is absolute
2208	r Creates a directory if it doesn t exist .
2209	Parse a requirements file .
2210	Parse a requirements file .
2211	Inject a method into this object .
2212	Create a file .
2213	Delete a file or directory
2214	Pretty - print the given data .
2215	Join a list of items .
2216	Return a function that returns a list of strings for a dict .
2217	Convert a list into a list of strings .
2218	Returns True if count_or_bool is True otherwise False .
2219	Decorator to register a function .
2220	Lookup a function by name
2221	Returns a function that returns a function that checks if the given hasher .
2222	Rearrange a base .
2223	r Create a hashable sequence .
2224	r Convert data to a hashable prefix .
2225	Update the hash of data .
2226	r Convert a hex string to a base .
2227	Hashes the given hashlen .
2228	Generate a hash of data .
2229	Hash a file .
2230	Decorator to register a function .
2231	Return the hash function for the given data type .
2232	Register numpy extensions .
2233	Register builtin class extensions .
2234	Iterate through a stream and return a queue of lines .
2235	Wrapper around te ee .
2236	Return a timestamp .
2237	Import a Python module from a path .
2238	Return a list of module tags .
2239	Convert a module name to a python module path .
2240	Convert a module name to its absolute path .
2241	Convert a modpath to a module name .
2242	Splits a modpath into parts .
2243	Get a value from the argv .
2244	Return True if the given key is in the argv .
2245	Concatenate a list of strings .
2246	Create a symbolic link .
2247	Make a signature key .
2248	Memoize a function .
2249	Memoizes a property .
2250	Highlights code using pygments .
2251	r Color text .
2252	Return True if obj is iterable otherwise False .
2253	Generate unique items .
2254	Return unique items .
2255	Return a boolean mask of unique flags .
2256	Create a boolean mask from a set of indices .
2257	Return True if all items in iterable are equal .
2258	Sort an indexable .
2259	Combine two items .
2260	r Group items into groups .
2261	Create a histogram from a list of items .
2262	Find duplicates of the given items .
2263	r Take a dict and return it as a generator .
2264	Union of dicts .
2265	Return an OrderedDict .
2266	Apply a function to a dictionary .
2267	r Invert a dictionary into an inverted dictionary .
2268	Convert to a dictionary .
2269	Create a symbolic link
2270	Similar to symlink2 .
2271	Create a symlink
2272	Return True if path is a junction point .
2273	Read a junction file .
2274	Delete a directory
2275	Determines if a file is hardlinked .
2276	Execute a Windows win32 directory
2277	Parse generator .
2278	Validate config .
2279	Retrieve adjacency matrix .
2280	Create a networkx graph from data .
2281	Save the graph to a CSV file .
2282	Launch a script .
2283	Check if a package is installed .
2284	Predict the covariance .
2285	Predict the model .
2286	Evaluate the graph .
2287	Run parallel graph evaluation .
2288	Forward computation .
2289	Run the optimizer .
2290	Create a directed graph from data .
2291	Takes a directed graph and returns a directed graph .
2292	Takes an undirected graph and returns a directed directed graph .
2293	Evaluate the entropy of an array .
2294	Estimate the integral approximator .
2295	Predict probabilities for a and b .
2296	Compute featurization function .
2297	Compute the model .
2298	Predict probabilities .
2299	Predict features on the network .
2300	Predict an undirected graph .
2301	Predict a feature .
2302	Takes an undirected graph and orient it into a directed graph .
2303	Create graph from data .
2304	Run Gies
2305	Plot curve curves .
2306	Plot genotypes .
2307	Reset weights .
2308	Forward forward .
2309	Predict function .
2310	Predict probability of a b .
2311	Calculate the mean squared error
2312	Predict the probability of a and b .
2313	Predict the probability of a and b .
2314	Calculate the mean - squared error score .
2315	Runs an undirected graph on the given data .
2316	Create a networkx graph from data .
2317	Run the pyth test .
2318	Perform a prediction on the data .
2319	Auto setter for SETTINGS .
2320	Check CUDA device number .
2321	Get the value of the parameter .
2322	Read causal pairs from a CSV file .
2323	Forward forward pass .
2324	Predict function .
2325	Predict dataset .
2326	Takes a dataframe and orient it into a directed graph .
2327	Takes an undirected graph into an undirected graph .
2328	Takes a directed graph and orient it into an undirected graph .
2329	Create a networkx graph from data .
2330	Compute the Gaussian kernel .
2331	Generate normal noise .
2332	Return uniform noise .
2333	Predict dataset .
2334	Predict probabilities for a and b .
2335	Compute the R - R matrix
2336	Compute the aracne .
2337	Remove indirect links from graph .
2338	Determines the minimum edge of a graph .
2339	Calculate the weighted mean and standard deviation .
2340	Creates an instance of GNN .
2341	Forward layer .
2342	Run the optimizer .
2343	Predict probabilities for a and b .
2344	Create a graph from data .
2345	Forward convolution .
2346	Predict the probabilities of a and b .
2347	Convert a phrase to a filename .
2348	Generate a new URL .
2349	Open the page .
2350	Waits until the page is loaded .
2351	Register the driver .
2352	The root element of the page .
2353	Waits until the region is loaded .
2354	Find an element by locator .
2355	Find elements matching the given strategy .
2356	Determines if an element is present .
2357	Determines if an element is displayed .
2358	Register a driver .
2359	r
2360	r
2361	r Tabbedheredoc .
2362	r << \ ns .
2363	Install hcl .
2364	Append a row to the table .
2365	Factory function for creating a RobotFile .
2366	Recursively walk the robot folders .
2367	Load the tables from a text file .
2368	Return the type of the table .
2369	Iterate over all keywords .
2370	Dump all tables .
2371	Iterate over all settings .
2372	Iterate over all variables in the database .
2373	Return a list of statements .
2374	Append a row to the table .
2375	Report an object .
2376	Run rflint .
2377	List all rules .
2378	Print a message to stdout .
2379	Returns a list of rules for the given class .
2380	Load rule file .
2381	Parse command line arguments .
2382	Create a validator from a spec_resolver .
2383	Constructs a mapping from a node .
2384	Read a yaml file .
2385	Generates validators from a spec resolver .
2386	Create model path .
2387	Substitute characters in a string .
2388	Spell corrections .
2389	Remove duplicates .
2390	Return a sorted list of items .
2391	Generate a list of good words .
2392	Compute the edit distance between two strings .
2393	Generate predictions for an array .
2394	Calculates the average of a list .
2395	Compute quadratic kappa using quadratic kappa .
2396	Compute confusion matrix .
2397	Calculate the histogram of the given ratings .
2398	Encode a + + + + + + + + + +
2399	Initialize dictionaries .
2400	Get the ngrams from the n - grams .
2401	Generates the length features for the text .
2402	Generate bag features .
2403	Generate a numpy array of features .
2404	Generate the features of the input text .
2405	Update the prompt .
2406	Returns the gradients for the given algorithm .
2407	Extract features from a predictor set .
2408	Extract features from the essays .
2409	Dump a model to a pickle file .
2410	Create an essay set and dump it into a model .
2411	Initialize dictionaries .
2412	Generate features for the given set .
2413	Log error message .
2414	Write creation info to out .
2415	Write a review .
2416	Write an annotation .
2417	Write the SPX file to out .
2418	Write a Packet .
2419	Write the extracted licenses to out .
2420	Write a SPX document to out .
2421	Extract a checksum from a string .
2422	Parse text from text .
2423	Sets the document version .
2424	Set the data license for a document .
2425	Set the name of a document .
2426	Sets the SPDX ID on the document .
2427	Sets the comment .
2428	Sets the namespace of the document .
2429	Reset the document .
2430	Sets the spdx document URI .
2431	Build a Tool object from an entity .
2432	Add a creator .
2433	Sets the created date .
2434	Set the license list version .
2435	Reset creation info .
2436	Add a reviewer .
2437	Add a review date .
2438	Add a review comment .
2439	Reset all the annotations .
2440	Add an annotation .
2441	Add an annotation date .
2442	Add an annotation comment .
2443	Add an annotation type .
2444	Sets the SPdx ID of the annotation .
2445	Reset the package .
2446	Create a package .
2447	Set package version .
2448	Set the package file name .
2449	Sets the package supplier .
2450	Sets the origin for the given entity .
2451	Set the location of the package down .
2452	Sets the package home page .
2453	Set package verification code .
2454	Set package source info .
2455	Set the licenses for a package .
2456	Sets a license from a package .
2457	Sets the license declaration .
2458	Sets the license comment .
2459	Sets the package summary .
2460	Sets the package description .
2461	Set file name .
2462	Sets the spdx ID .
2463	Sets the file comment .
2464	Set file type .
2465	Set the checksum of a file .
2466	Sets the license for this package .
2467	Sets the license in the file .
2468	Set license comment .
2469	Set copyright .
2470	Set a file notice .
2471	Set the file at the given symbol .
2472	Reset file stat .
2473	Set the license ID .
2474	Set the text of the extracted license .
2475	Sets the license name .
2476	Sets the comment of the extracted license .
2477	Add an Xref to a license .
2478	Reset the contents of the archive .
2479	Convert datetime to ISO 8601 format .
2480	Parse a datetime string into a datetime object .
2481	Builds the YACC object .
2482	Parse YACC data .
2483	Write a document to out .
2484	Create a checksum node .
2485	Convert the value to a special value .
2486	Returns a set of licenses from the given tree .
2487	Create a conjunction node .
2488	Creates a disjunctive license set .
2489	Creates an extracted license .
2490	Create a file node .
2491	Add file dependencies .
2492	Create a review node .
2493	Create an annotation node .
2494	Create a package verification node .
2495	Handle pkg_optional fields .
2496	Create a package node .
2497	Return the root node of a package .
2498	Called when a package has a file .
2499	Create the spdx document .
2500	Validate messages .
2501	Log error message .
2502	Convert a value to a special value .
2503	Return a License object .
2504	Get the identifier of the extracted license .
2505	Get the text of the extracted license
2506	Retrieves the license name for the given extension .
2507	Return a list of xrefs representing the xrefs of the xref in the xref .
2508	Get the comment for a license .
2509	Parse and return an ExtractedLicense object .
2510	Parse an Extr license .
2511	Parse a PyPI package .
2512	Handle a p_term .
2513	Return the file name for a given term .
2514	Parses a file depends on a predicate .
2515	Add a file contributor .
2516	Parses a file notice .
2517	Parses a file comment .
2518	Set copyright text .
2519	Parses file comments on a license file .
2520	Parses the license info for a file .
2521	Set file type predicate .
2522	Check file checksum .
2523	Concatenate licenses for a given file term .
2524	Returns the review date .
2525	Returns the reviewer for the given r_term .
2526	Get annotation type .
2527	Get the comment of an annotation .
2528	Get the annotation date .
2529	Parse an RDF file .
2530	Parses CREATE INDRA Statements .
2531	Parse doc_term field .
2532	Parses the ext_doc_ref_term_ref_term_term_ref_term_term_ref_term
2533	Validate the given messages .
2534	Validate field names .
2535	Set the comment on the document .
2536	Set the checksum of an external document .
2537	Set package source info .
2538	Sets the package verification code .
2539	Set an exception file .
2540	Sets the package summary .
2541	Sets the package description .
2542	Set the checksum of a file .
2543	Set the license comment .
2544	Set file comment .
2545	Add a review comment .
2546	Add an annotation comment .
2547	Add an annotation type .
2548	Validate the given messages .
2549	Include a file
2550	Execute a command .
2551	Unescape the given data .
2552	Set an attribute value .
2553	Set a child attribute .
2554	Sets the DOM document .
2555	Add a tag or a string .
2556	Return a list of all elements matching the given tag .
2557	Clean the attribute name .
2558	Clean attribute value .
2559	Create a registry message .
2560	Send a heartbeat .
2561	Receive a result from the workers .
2562	Receive a task request from the workers .
2563	Pull tasks from the queue .
2564	Starts the worker threads .
2565	Decorator for coroutine functions .
2566	Send a UDP message to the UDP socket .
2567	Determine whether or not the system tracking is enabled .
2568	Construct start message .
2569	Construct the end message for the task .
2570	Send a UDP message .
2571	Send a single message .
2572	Start a database manager .
2573	Create task log info .
2574	Handle app updates .
2575	Launch a task .
2576	Add input dependencies .
2577	Gathers all the dependencies of the given arguments and returns them as a tuple .
2578	Submit a function to the DFK .
2579	Cleanup the workflow .
2580	Perform a checkpoint on the run .
2581	Load all tasks from checkpointDirs .
2582	Load checkpoints from checkpointDirs .
2583	Load a DataFlow kernel .
2584	Get a list of tasks from the pending task queue .
2585	Migrate tasks to internal queue .
2586	Start the command server .
2587	Starts the worker threads .
2588	Return the executor .
2589	Shutdown the executor .
2590	Stage a file in the given executor .
2591	Stage the given file .
2592	Return a list of all checkpoints in the rundir
2593	Return the last checkpoint .
2594	Decorator for interactive functions .
2595	Mark a pickle function as pickle .
2596	Import a mapping from a mapping .
2597	Determines if an object can be used .
2598	Return True if obj can be iterable .
2599	Annotate an object .
2600	Unset logging .
2601	Start the controller .
2602	Return the path to the IPython engine engine .
2603	Location of the IPython client .
2604	Close the Ipcontroller process .
2605	Make a hash of a task .
2606	Check to see if the task has been cached .
2607	Update the cache entry
2608	Return the number of bytes in a buffer .
2609	Extract buffers from an object .
2610	Restore the buffers from the object .
2611	Serialize an object into a list of buffers .
2612	Deserialize a Python object into a Python object .
2613	Pack a function into a message .
2614	Write a submission script .
2615	Cancel the given jobs .
2616	Initialize boto3 client
2617	Read the state from the local state file .
2618	Write the state to the AWS provider state file .
2619	Create a boto3 session
2620	Creates the VPC .
2621	Creates a security group .
2622	Starts a single instance .
2623	Shut down one or more instances .
2624	Get the state of the instance .
2625	Submit a command to EC2
2626	Cancel the specified jobs .
2627	Show the EC2 summary .
2628	Destroys this instance .
2629	Scale all blocks in the pool .
2630	Delete all machines in the cluster .
2631	Get the status of the job .
2632	Scaling a number of blocks .
2633	Scale engine in blocks .
2634	Return the status of the engines .
2635	Called when the parent is done .
2636	Update parent .
2637	Called when an exception is raised .
2638	Submit a command .
2639	Cancel one or more jobs .
2640	The main function .
2641	Shutdown the worker .
2642	Submit a function to the queue .
2643	Absolute path of the file .
2644	Copy source file to destination .
2645	Deprecated .
2646	Wrap a function into a Python application .
2647	Decorator for bash app .
2648	Make the run directory .
2649	Monitor a running process .
2650	Send a message .
2651	Decorator to monitor a function .
2652	Execute a command without wait time .
2653	Push a file to the remote server .
2654	Pull a file from the remote server .
2655	Return True if path is a directory .
2656	Makes a directory path .
2657	Notify an event .
2658	Create a Kubernetes deployment .
2659	Initialize the worker .
2660	Start the local queue process .
2661	Hold a worker .
2662	Hold a block .
2663	Scaling the blocks in blocks .
2664	Return the status of the block .
2665	Read data into the device .
2666	Write buffer to i2c device .
2667	Write to out_buffer .
2668	Not accurate false due to spikes are observed
2669	Remove old versions from config file
2670	Deploy a function from a source .
2671	Deploy an S3 source to S3 .
2672	Upload a file to S3 .
2673	Invoke an event .
2674	Initialize a project .
2675	Build a lambda package .
2676	Get a callable handler function .
2677	Install a package .
2678	Get the name of a role .
2679	Retrieves the user s account ID .
2680	Create a boto3 client .
2681	Create a lambda function
2682	Uploads a lambda function to S3
2683	Get lambda function configuration
2684	Download a file from a URL .
2685	Download the fate .
2686	Download a curated sample .
2687	Get library configuration .
2688	Add a copy of src to dst .
2689	Spawn a C compiler .
2690	Create a new compiler .
2691	Iterate over all files in path .
2692	Split a list of lines into a list of strings .
2693	Filter out quotes .
2694	Fix hyphenation .
2695	Parse a JSON document into a generator .
2696	Return a generator that yields a list of strings that cover a given size .
2697	Build a networkx graph from a json object .
2698	Write a graph to a dot file .
2699	Write a graph in DOT format .
2700	Build a graph from a text file .
2701	Find the next chunk in a phrase .
2702	Iterate over the chunks of a phrase .
2703	Return a generator that yields a ranked lexeme .
2704	Takes a sentence and returns a ranked lexeme object .
2705	Takes a sentence and returns a list of phrases .
2706	Calculate the MD5 hash of data .
2707	Iterate over the top sentences in the network .
2708	Limit keyphrases .
2709	Limit sentences by word_limit
2710	Convert text into sentence .
2711	Iterate over a JSON file .
2712	Pretty print obj .
2713	Get an object from the API .
2714	Load the tag from the server .
2715	Create a resource .
2716	Extract resources from a droplet
2717	Add a droplet
2718	Remove a droplet
2719	Get an object from the API .
2720	Wait for the task to complete .
2721	Get a droplet
2722	Perform a single action .
2723	Take a snapshot
2724	Change a kernel .
2725	Retrieves the SSH keys ID from a list of SSH keys .
2726	Create a droplet .
2727	Get all the actions for this droplet .
2728	Get an action by id .
2729	Return a list of kernels available on the droplets .
2730	Create a new Domain object from the API .
2731	Create a new domain .
2732	Get all records for this domain .
2733	Get an object from an API token
2734	Returns a floating IP object
2735	Load the floating IP from the API .
2736	Create a new floating IP
2737	Reserve a floating IP .
2738	Assign a droplet to a droplet .
2739	Get firewall object
2740	Add tags to the Firewall .
2741	Remove tags from the Firewall .
2742	Retrieve an SSH Key object from the API .
2743	Load SSH key .
2744	Load SSH key by public key
2745	Create a new SSH key .
2746	Edit this key .
2747	Returns a list of all regions .
2748	Get all droplets .
2749	Get a droplet
2750	Returns a list of all the sizes of the user .
2751	Retrieve the list of images associated with this account .
2752	Returns a list of all domains .
2753	Get a domain by name
2754	Get all SSH keys .
2755	Retrieves an SSH key object .
2756	Return all the available tags .
2757	Get all floating IPs .
2758	Get a floating IP by IP
2759	Get all load balancers .
2760	Get a load balancer by id
2761	Get a certificate by id .
2762	Returns a list of all certificates .
2763	Get a snapshot
2764	Get all the snapshots .
2765	Returns a list of all droplet snapshots .
2766	Retrieve a list of snapshot information .
2767	Returns a list of all volumes .
2768	Get a volume by id
2769	Get all firewalls
2770	Get a firewall by id
2771	Get an object by id .
2772	Load a load balancer .
2773	Create a new load balancer .
2774	Save a load balancer .
2775	Adds droplets to the load balancer .
2776	Remove droplets from the load balancer .
2777	Adds a forwarding rules to the load balancer .
2778	Remove forwarding rules from the load balancer .
2779	Get data from url
2780	Get an object from the API .
2781	Create a new record .
2782	Destroys the record .
2783	Save the record .
2784	Get the request timeout .
2785	Get an object from the API .
2786	Create a new volume from a snapshot .
2787	Attach to a droplet .
2788	Resizes this volume .
2789	Create a snapshot .
2790	Retrieve a list of snapshot information .
2791	Retrieve a Certificate object from the API .
2792	Load the certificate .
2793	Create a new certificate .
2794	Retrieve an image from the API .
2795	Create a new image .
2796	Loads the image .
2797	Transfer the image to a new region .
2798	Rename the image .
2799	Convert a convolution layer .
2800	Convert sum to keras .
2801	Convert a reduce_sum to a layer .
2802	Concatenate layer .
2803	Convert a slice into a layer .
2804	Convert a clip to a Keras layer .
2805	Convert an elementwise add layer .
2806	Convert an elementwise_subtract into a tensor .
2807	Convert a GRM model into a Keras model .
2808	Convert a matmul layer .
2809	Convert a constant to a layer .
2810	Convert a tensor into a layer .
2811	Convert a reshape into a reshape .
2812	Convert tensor to tensorflow .
2813	Convert an unsqueeze layer into a tensor .
2814	Convert input tensor to keras .
2815	Convert pooling to pooling .
2816	Convert pooling to tf . pool .
2817	Convert an adaptive max pooling layer .
2818	Convert padding layer .
2819	Convert a batchnorm .
2820	Convert an instancenorm to a new one .
2821	Convert a dropout layer .
2822	Convert a relu layer into a keras layer .
2823	Convert a LRELU to LRELU .
2824	Convert sigmoid to sigmoid .
2825	Convert a softmax .
2826	Convert a tanh layer .
2827	Convert a hardtanh layer into a layer .
2828	Convert a selu layer into a keras layer .
2829	Convert an upsample_bilinear layer into keras .
2830	Convert an upsampling layer .
2831	Temporarily change the training mode .
2832	Return the pwm adapter .
2833	Stop a pin .
2834	Detect platform platform .
2835	Write data to the pin .
2836	Read the specified length .
2837	Transfer data .
2838	Set GPIO pin .
2839	Enable or disable a pin .
2840	Write the gpio to the GPIO .
2841	Write the IODIR .
2842	Write the GPPU .
2843	Disables FTDI driver .
2844	Enables FTDI driver .
2845	Enumerate all the device s serialials .
2846	Close connection to ftdi .
2847	Write string to ftdi .
2848	Run ftdi command and raise a RuntimeError
2849	Read data from ftdi .
2850	Enables MPSSE mode .
2851	Synchronize the MPSSE .
2852	Set the clock speed .
2853	Read MPSSE GPIO .
2854	Returns a string representing the MPSE protocol .
2855	Setup the MPSse device .
2856	Write data to the FTDI chip .
2857	Read length bytes .
2858	Bulk read data
2859	Transfer data to the FTDI chip .
2860	Starts the GPIO .
2861	End a transaction .
2862	Write bytes to i2c .
2863	Ping the device .
2864	Reads an 8 - bit value .
2865	Get an i2c device .
2866	Writes an 8 byte to the bus .
2867	Read an 8 - bit value from the bus .
2868	Return the current platform .
2869	Sets up a pin .
2870	Sets up the gpio pin .
2871	Remove an event detector .
2872	Returns a generator of Paths
2873	Trash a file .
2874	Retrieves a process parser by its identifier .
2875	Add BPMN XML files .
2876	Add a BPMN XML file .
2877	Return the first result .
2878	Add value to parent_elem .
2879	Serialize a list element into a list .
2880	Retrieves the event definition .
2881	Gets the message event definition from the node .
2882	Get a TimerEventDefinition object from the XML element .
2883	Generate an html representation of the container .
2884	Connect a callback .
2885	The number of subscribers .
2886	Check if a callback is connected .
2887	Try to disconnect a given listener .
2888	Disconnect a callback .
2889	Parses the given node into a Task object .
2890	Create a new task .
2891	Connect a sequence flow .
2892	Add an outgoing sequence flow .
2893	Returns the names of the outgoing sequence flows .
2894	Connect a condition .
2895	Called when the task is complete .
2896	Is the task completed?
2897	Cancel all tasks .
2898	Get a task by id .
2899	Returns a list of tasks with the specified spec .
2900	Return a list of all tasks in the tree .
2901	Completes a task by ID
2902	Complete the next task .
2903	Refresh a function .
2904	Create a new BPMnWorkflow
2905	Add a task to this task .
2906	Assign a new thread ID to this object .
2907	Return True if the given parent is a descendant of the given parent .
2908	Finds the child of the given task spec .
2909	Find all tasks that match the spec .
2910	Finds the parent of the given task spec .
2911	Finds the parent of the given name .
2912	Marks the task as ready .
2913	Returns the name of the state machine .
2914	Inherit data from parent
2915	Cancel this task .
2916	Return a dump of the task .
2917	Evaluate the arguments .
2918	Evaluate keyword arguments .
2919	Serialize an object .
2920	Send the call to the task .
2921	Restarts a task .
2922	Clears the task data .
2923	Returns a list of all the ancestors of the task .
2924	Predict the task .
2925	Called when the task is ready .
2926	Create bpmn package .
2927	Write a file to the manifest .
2928	Write data to the ZIP archive .
2929	Write manifest data to disk .
2930	Calls pre_parse_and_validate
2931	Checks if the given BPMN is valid .
2932	Pack the signavio xml into a zip file .
2933	Write meta data to config file .
2934	Merge an option with the given name .
2935	Parses a node into a task spec .
2936	Deserialize operator from start node .
2937	Deserialize start node .
2938	Deserialize assignment list .
2939	Deserialize a logical operator into a logical object .
2940	Deserialize a condition statement .
2941	Deserialize a workflow spec .
2942	Add a task spec .
2943	Validate the workflow .
2944	Accept a message .
2945	Refreshes waiting tasks .
2946	Return a list of tasks that are ready .
2947	Deserialize a trigger .
2948	Evaluate a task .
2949	Execute a script .
2950	Start the task .
2951	Called when the task is listening .
2952	Connect a task spec .
2953	Get a container s id .
2954	Initialize the container .
2955	Update the container .
2956	Load the state of the blockade .
2957	Get the blockade ID from the current working directory .
2958	Ensure the state directory exists .
2959	Delete the state file .
2960	Return the base state .
2961	Write the container to disk .
2962	Expand the partition into a list of partitions .
2963	Get all source chains for a given blockade .
2964	Insert a rule .
2965	Start the timer .
2966	Starts the simulation .
2967	Stop the chaos timer .
2968	This method is called by the simulation .
2969	Stop chaos frompain .
2970	Cleans up the timer .
2971	Sort a list of containers by their dependencies .
2972	Create a BlockadeContainer from a dictionary .
2973	Create a BlockadeConfig from a dictionary .
2974	Start the blockade
2975	Destroy a blockade
2976	Display the status of the blockade
2977	Kill a container .
2978	Partition partition .
2979	Join the blockade
2980	Print the logs for the container
2981	Start the daemon .
2982	add a container
2983	Executor for globus events
2984	Set CORS headers .
2985	Try to match a request origin .
2986	Get CORS options .
2987	Return a dict of CORS_OPTIONS_OPTIONS_OPTIONS .
2988	Ensure inst is an iterable .
2989	Serialize Flask - CORS options .
2990	Enables cross - origin requests .
2991	Return a DataFrame containing all the symbols in a DataFrame .
2992	Returns a DataFrame of mutual FundSymbols .
2993	Returns a DataFrame representing the otc symbols .
2994	Retrieve the JSON data from the API .
2995	Retrieves the JSON data from the API .
2996	Returns a DataFrame of market news .
2997	Returns a DataFrame with market data .
2998	Returns a Pandas DataFrame of market days .
2999	Return sector performance data .
3000	Return a DataFrame representing the data for a symbol .
3001	Returns a DataFrame with the given token and version .
3002	Start nbext extension
3003	Start the TensorBoard application .
3004	Get client ID and secret .
3005	Get storage model .
3006	Returns a Django storage object .
3007	Redirect to url_name
3008	Return the credentials from the request .
3009	Returns True if the current request has credentials .
3010	Get scopes .
3011	Get a credential from the database .
3012	Adds the given credentials to the database .
3013	Delete the lock .
3014	Serialize the ServiceAccountCredentials to a string .
3015	Create a client instance from a parsed keyfile .
3016	Create a Key object from a JSON file .
3017	Create a Key object from a JSON - encoded key file .
3018	Generates a signed JWT .
3019	Create a new Credentials object from a JSON string .
3020	Create a new instance with the given claims .
3021	Get an access token .
3022	Detect GCE environment .
3023	Determine if the environment is in GCE .
3024	Determine if the environment is in GCE .
3025	Save json_contents to a private file .
3026	Save credentials to a well known file .
3027	Retrieves the path to the Well Known File
3028	Returns an application default Credentials object .
3029	Verify an ID token .
3030	Extracts an ID token from an ID token .
3031	Parse an exchange token response .
3032	Get credentials from OAuth2 server .
3033	Create a flow from a client secrets file .
3034	Deprecated .
3035	Create a flow from a client secrets file .
3036	Serialize the object to a JSON string .
3037	Create a new instance from a json string .
3038	Put credentials into the lock .
3039	Determines if the user has any scopes .
3040	Create a new Token from a JSON string .
3041	Is the access token expired?
3042	Get an access token .
3043	Returns the number of seconds after the token expires .
3044	Generate a refresh token .
3045	Refresh access token .
3046	Refreshes the access token .
3047	Refreshes scopes .
3048	Extract credentials from GOOGLE application .
3049	Get the credentials from the application .
3050	Load application default Credentials from a file .
3051	Create an OAuth2Device from a response .
3052	Retrieves the authorization URL .
3053	Get device and user code .
3054	Create a PublicKey object from a string .
3055	Create a private key from a string .
3056	Create a credential file if necessary .
3057	Load credentials from a file .
3058	Write credentials file .
3059	Get a _MultiprocessStorageBackendStorageBackend .
3060	Retrieves a credential .
3061	Decorator to specify a function as positional argument .
3062	Convert a string to a list of scopes .
3063	Parse a URL - encoded string content .
3064	Update the query parameters .
3065	Add a query parameter to a URL .
3066	Append user - agent to headers .
3067	Clean headers .
3068	Wrap an HTTP request with an access token .
3069	Wrap a JWT with a JWT access token .
3070	Make an HTTP request .
3071	Get the flow for a given token .
3072	Initialize application .
3073	Load OAuth2 configuration file .
3074	Redirect to the authorization page .
3075	View function .
3076	Gets the credentials for this application .
3077	Returns True if the credentials are available .
3078	Get email address .
3079	Perform a GET request .
3080	Get an access token from the service account .
3081	Get the XSRF secret key .
3082	Build the state value for the request .
3083	Parse the state of a state machine .
3084	Creates an OAuth2Decorator from client secrets .
3085	The service account name .
3086	Checks if the model is a NDB or DB model .
3087	Retrieves the entity .
3088	Delete the entity .
3089	Get a credential from the cache .
3090	Put credentials into the cache .
3091	Delete the entity .
3092	Decorator to check if a user is required .
3093	Create an OAuth2 Web Server .
3094	Decorator for oauth_aware
3095	Handles HTTP requests .
3096	A decorator that handles OAuth2 requests .
3097	Generate a token .
3098	Validate a token .
3099	Validate client secrets .
3100	Load secrets from a file .
3101	Send a CredentialInfoRequest to the server .
3102	Run a flow .
3103	Handles GET requests .
3104	Decorator to enable oauth2 .
3105	Generate code verifier .
3106	Generate code challenge from verifier .
3107	Retrieves the service account information .
3108	Get a credential from the store .
3109	Put credentials into the database .
3110	Delete the lock .
3111	Get an OAuth2Credentials object .
3112	Put credentials into the cache .
3113	Validate that value is a flow .
3114	Convert a value into a Credentials object .
3115	Get flow for a given token .
3116	Handles OAuth 2 requests .
3117	Redirect to OAuth 2 . 0
3118	Create the file if necessary .
3119	Prepare value .
3120	Convert obj to string .
3121	Create a JWT .
3122	Verify a signature .
3123	Ensure audience is valid .
3124	Verify that the time range is valid .
3125	Verify a JWT .
3126	Retrieve a single template .
3127	Update a template .
3128	Delete a template .
3129	Calculate the MD5 hash of a subscriber .
3130	Check that the given URL is valid .
3131	Merge results into a single dictionary .
3132	Create a new list .
3133	Update a list .
3134	Update a list .
3135	Create a new line .
3136	Perform a GET request .
3137	Create a new App .
3138	Retrieve a single app .
3139	Create a promo rule .
3140	Get a folder .
3141	Retrieve a single email .
3142	Create a new file .
3143	Get a file .
3144	Update a file .
3145	Delete a file .
3146	Builds a path from args
3147	Perform a GET request .
3148	Remove all subscribers from a workflow .
3149	Create a new webhook .
3150	Get a specific webhook .
3151	Updates a list .
3152	Delete a webhook .
3153	Retrieve a list of segments .
3154	Retrieve a segment .
3155	Update a segment .
3156	Delete a segment .
3157	Create a segment .
3158	Make a POST request .
3159	Get the metadata for this object .
3160	Update a campaign .
3161	Get a specific conversation .
3162	Retrieve a specific campaign .
3163	Create a new automation .
3164	Fetch all the messages for a given workflow .
3165	Retrieve a specific subscriber .
3166	Cancel a campaign .
3167	Pause a campaign .
3168	Replicate a campaign .
3169	Resumes a campaign .
3170	Send a campaign .
3171	Create a new customer .
3172	Retrieve a specific customer .
3173	Create or update a customer .
3174	Create or update a variant .
3175	Create a feedback .
3176	Update feedback .
3177	Create a merge field .
3178	Get the merge fields for a list .
3179	Retrieve a single batch webhook .
3180	Updates a batch webhook .
3181	Delete a batch webhook .
3182	Create a new store .
3183	Update a store .
3184	Create a new product .
3185	Retrieve a single image .
3186	Create a new message .
3187	Create an order .
3188	Create a new member .
3189	Update a list member .
3190	Update a segment .
3191	Update a template folder .
3192	Create a member .
3193	Update a member .
3194	Create or update a list member .
3195	Delete a member from a list .
3196	Delete a member .
3197	Pauses a workflow .
3198	Starts a workflow .
3199	Delete an email .
3200	Create a new campaign .
3201	Update a campaign .
3202	Delete a campaign .
3203	Delete a line .
3204	Create a batch .
3205	Retrieve a single batch of documents .
3206	Retrieve a single batch .
3207	Delete a batch .
3208	Reformat the SSLNegotiationPolicy
3209	Get an existing load balancer .
3210	Get an item from the cache .
3211	Insert an object into the cache .
3212	Update cache stats .
3213	Get the details for a particular key .
3214	Returns the total total number of items in the cache .
3215	Get flow logs for a VPC .
3216	Get the status of a classic link
3217	Get the subnets of a vpc .
3218	Get a list of route tables .
3219	Get network ACLs for a vpc .
3220	Get a client
3221	Return a GCP client .
3222	Return a GCP client .
3223	Authenticate using Google .
3224	Build a client .
3225	Decorator to iterate over projects .
3226	Get credentials from kwargs .
3227	Rewrite kwargs for a given connection type .
3228	Retrieve a list of aggregated items .
3229	Retrieve a list of GCE resources .
3230	Retrieve a list of items from a service .
3231	Get access details .
3232	Return the user agent s default value .
3233	List all rules .
3234	List all targets by rule .
3235	List all buckets .
3236	List objects in a bucket .
3237	Modify an item .
3238	Retrieve the policy documents for a role .
3239	Get a group .
3240	Retrieves a policy document .
3241	Get server certificate .
3242	Get a boto3 connection for a service .
3243	Get security group rules
3244	Get a security group .
3245	Get all policies for a group .
3246	Returns a list of managed policies .
3247	Get the list of users in a group
3248	Get base group .
3249	Get the base policy .
3250	Get the short version string
3251	Save object to Geoserver catalog .
3252	Returns a list of all the workspaces .
3253	Get a store by name .
3254	Delete a granule from a mosaic .
3255	Retrieve a list of granules in a workspace .
3256	Get mosaic coverages .
3257	Publish a feature type .
3258	Retrieve a list of resources .
3259	Get a resource by name .
3260	Get layer group by name .
3261	Get a style by name .
3262	Get a list of workspaces .
3263	Get a workspace by name .
3264	Parses a md link to a md link .
3265	Build a URL .
3266	Prepares an upload bundle .
3267	Return a DimensionInfo object representing a DimensionInfo element .
3268	Extract dynamic default values from md - default values .
3269	Parse a JDBC virtual table .
3270	Parse md entry .
3271	Get the resolution in milliseconds .
3272	Initialize the database .
3273	Convert an exception to a DVError
3274	Return the user info .
3275	Handle delete requests .
3276	Handle copy operation .
3277	Handle move .
3278	Get an instance of a resource .
3279	Add a provider .
3280	Resolve a provider by path
3281	Compute the MD5 hash of the data .
3282	Read data from the queue .
3283	Read data from the stream .
3284	Log an error .
3285	End write operation .
3286	Handles a copy operation
3287	Get the log from the server .
3288	Get the info for a repo
3289	Get a resource instance by path
3290	Returns the preferred path for this request .
3291	Get the href of the resource .
3292	Set property value .
3293	Remove all properties of this object
3294	Checks if the link is locked
3295	Set the share path .
3296	Convert a reference URL to a relative path .
3297	Return True if path is a collection .
3298	Parse an XML string .
3299	Convert an XML element to bytes .
3300	Make a sub - element .
3301	Return the content of an XML element .
3302	Check if path is valid .
3303	Read a configuration file .
3304	Run a Paste server .
3305	Run a WSGI application .
3306	Run cherrypy .
3307	Run Cheroot .
3308	Run flup .
3309	Run WSGI server .
3310	Run wsgiutils
3311	Perform a PROPPATCH request .
3312	Handles a collection operation .
3313	Yield chunked data from WSGI .
3314	Read data from the WSGI environment .
3315	Find a property by URL .
3316	Calculates the realm realm based on the path provider .
3317	Compute the HMAC - SHA1 hash of an auth user .
3318	Get a lock .
3319	Create a lock .
3320	Refresh a lock .
3321	Delete a token .
3322	Clears the cache .
3323	Sets the last modified time stamp .
3324	Return the lock string .
3325	Create a lock .
3326	Acquire a lock .
3327	Refresh a token .
3328	Get a lock .
3329	Acquire a read lock .
3330	Acquire a write lock .
3331	Release the lock .
3332	Initialize logging .
3333	Instantiate a middleware .
3334	Return a string representation of a string .
3335	Convert a number into a human - readable string .
3336	Read data from the WSGI server .
3337	Join a URI into a path .
3338	Return True if parent URI is a child URI .
3339	Check if parent URI is equal or child URI .
3340	Make a complete URL .
3341	Parse the request body .
3342	Send a HTTP status response .
3343	Calculate base64 .
3344	Parse timeout value .
3345	Parses the IF header and returns a dict with the value of the condition .
3346	Guess the mimetype of a URL .
3347	add new members
3348	Remove members from the list
3349	Compute geometric FBA .
3350	Generate the index for each object .
3351	Get an iterable by iterable .
3352	Searches an object using a search function .
3353	Replace an object with a new object .
3354	Append an object to the list .
3355	Return the union of an iterable .
3356	Extend an iterable .
3357	Add an iterable to the list .
3358	Return the index of an object .
3359	Insert an object at the given index .
3360	Return the composition of the formula .
3361	The shadow price of this triple .
3362	Return a YAML representation of a model .
3363	Save a YAML model to a file .
3364	Load a model from a yaml file .
3365	Add a pfBA objective .
3366	Process flux dataframe .
3367	Calculates the linear reaction coefficients for a model .
3368	Return True if the expression is valid .
3369	Set the objective .
3370	Convert an interface name to a string .
3371	Get the solver name .
3372	Choose a solver from the model .
3373	Add variables to the problem .
3374	Remove cons variables from a problem .
3375	Add an absolute expression to the model .
3376	Return a constraint as a constraint .
3377	Check solver status .
3378	Assert that the solver is optimal .
3379	Add likelihood variables to the model .
3380	Add lexicographic constraints to model .
3381	Create a shared numpy array .
3382	Run a single step .
3383	Builds a problem .
3384	Generate warmup variables .
3385	reproject a point onto the problem
3386	Return a random point .
3387	Return True if matrix is redundant .
3388	Compute the bounds of the variable .
3389	Generate a batch of samples .
3390	Validate the model .
3391	Remove metabolites and inactive metabolites .
3392	Removes unused reactions from a cobra model .
3393	Undeletes all functional genes .
3394	Given a list of gene_list return a list of gene reactions .
3395	Remove genes from the model .
3396	Fill model with gapFills .
3397	Extend the model .
3398	Update the costs of each indicator .
3399	Add switches and objective variables .
3400	Perform gapfills
3401	Finds the compartment in the model .
3402	Determine if a reaction is a boundary
3403	Return the reactions of a boundary type .
3404	Normalize the cutoff .
3405	Sample chain .
3406	Convert an expression into a string .
3407	Evaluate expression .
3408	Parse a GPR expression .
3409	Remove all reactions .
3410	Remove this reaction from the model .
3411	r Add a MOMA problem to the model .
3412	Convert a value to a string .
3413	Update optional_dict with optional default values .
3414	Convert a model into a dictionary .
3415	Load a model from a dictionary .
3416	Return the name of a compartment
3417	Convert a numpy array into a numpy array .
3418	Load a COBRA model .
3419	Save a matlab model .
3420	Create a matrix from a model .
3421	Convert a model to a Pymatbridge model .
3422	Get the current context .
3423	Resettable decorator .
3424	Compute the solution of a model .
3425	Return all metabolites in the model .
3426	Add a reaction to the reaction .
3427	Add a list of metabolites to the model .
3428	Remove metabolites from reaction .
3429	Add a boundary .
3430	Add reactions to the model .
3431	Remove reactions from the model .
3432	Add a group to the model .
3433	Remove groups from the group .
3434	Populate the solver .
3435	Optimize the solver .
3436	Optimize the optimization .
3437	Rebuild the model .
3438	Merge a problem with another one .
3439	Escape a string identifier .
3440	Escapes gene IDs and gene IDs .
3441	Rename genes .
3442	Serialize a model into JSON .
3443	Save a model to a JSON file .
3444	Load a model from a JSON file .
3445	Add linear object to model .
3446	Add a MIP object to the model .
3447	Convert a list of exchange exchanges into flux .
3448	Create a minimum objective .
3449	Initialize worker .
3450	Perform flux analysis on the model .
3451	Finds all reactions that are blocked by the given limits .
3452	Find all genes that have a certain threshold .
3453	Find all reactions in a model .
3454	Add SBO annotation .
3455	The weight of each element in the periodic table .
3456	Build a markdown file .
3457	Determine the bump type .
3458	Main entry point .
3459	Perform a bulk - delete operation on the model .
3460	Perform a single reaction deletion .
3461	Perform a single gene deletion .
3462	Perform double reaction deletion .
3463	Perform double deletion on the model .
3464	Generate a unique id .
3465	The flux of the reaction .
3466	The gene name reaction rule .
3467	Return whether the gene reactions are functional .
3468	Update self . cognites .
3469	Return a shallow copy of this reaction .
3470	Returns the coefficient for a given metabolite .
3471	Add metabolites to the model .
3472	Subtract a set of metabolites .
3473	Builds a reaction string .
3474	Calculate mass balance .
3475	All compartment names .
3476	Associate a cobra gene .
3477	Dissociate a gene .
3478	Build a reaction from a string .
3479	Clip a sid by prefix
3480	Extract a gene from a gene .
3481	Read a SBML model from a file .
3482	Read a SBML document from a file .
3483	Write an SBML model to a file .
3484	Create a model parameter .
3485	Create a parameter .
3486	Check if value is required
3487	Check if the value is valid .
3488	Parses notes string into a dictionary .
3489	Set notes on sbase .
3490	Parse the annotations from the server .
3491	Update sbase annotations .
3492	Return an error string .
3493	Compute the production envelope .
3494	Calculate the total yield flux .
3495	Return the elements of reaction .
3496	Calculate the weight of reaction .
3497	Compute total flux flux for a given set of components .
3498	Finds all hydrogen sources for a given model .
3499	Assigns the given reaction to the model .
3500	Assign a component to the model .
3501	Determine the precursors for a model .
3502	Deprecated use assess_products .
3503	Add loopless boundary conditions .
3504	Add cycles free to the model .
3505	Create a solution problem .
3506	Iterate over free fluxes .
3507	Create a sparse matrix from a model .
3508	Compute nullspace of nullspace .
3509	Compute constraint matrices .
3510	r Add a room .
3511	Samples the given model .
3512	Optimize a template .
3513	Return clicky .
3514	Template tag .
3515	Template tag .
3516	Template tag .
3517	Template tag .
3518	Wrap KitInsights .
3519	Template tag .
3520	Parses a template .
3521	Render a template .
3522	Make sure data is a bytes object .
3523	Generate a HMAC - SHA256 hash of data .
3524	Template tag .
3525	Return a UserVoice node .
3526	Creates a markdown node .
3527	Piwik template .
3528	Get a setting from settings .
3529	Get the user from the context .
3530	Get the identity of the given context .
3531	Returns True if the request is an internal IP .
3532	Template tag .
3533	Gosquared node .
3534	Lark parser .
3535	Return clickmap .
3536	Template tag .
3537	Template tag .
3538	Template tag .
3539	Template tag .
3540	Return a function that prints the status bar .
3541	Apply a mutation to a file .
3542	Execute a command streaming output .
3543	Yield source files from a directory .
3544	Compute exit code .
3545	Update the advertised list .
3546	Called when a service is discovered .
3547	Called when a characteristic has changed .
3548	Called when descriptor has changed .
3549	Read the RSSI value .
3550	List all Characteristic objects .
3551	List all DescribeDescriptors .
3552	Called when the adapter is changed .
3553	Starts the scan .
3554	Stop the scan .
3555	Power on the device .
3556	Power off the device .
3557	Searches for a device .
3558	Discovers the device .
3559	Find a service by its identifier .
3560	List all BluezGattice services .
3561	A list of all the UUIDs .
3562	Find a characteristic by its identifier .
3563	Find descriptor by uuid .
3564	Read the value of the characteristic .
3565	Write a value to the NIC .
3566	Read the characteristic value .
3567	Starts scanning .
3568	Stop scanning .
3569	Called when the device is advertised .
3570	Called when a peripheral is established .
3571	Called when an error occurs .
3572	Called when a service has been discovered .
3573	Called when an error occurs .
3574	Called when a descriptor error is received .
3575	Called when an RSSI error occurs .
3576	Initialize the barrier .
3577	Disconnect the specified devices .
3578	Initialize the interface .
3579	Clear the device cached data .
3580	Disconnect all devices .
3581	Get the objects associated with the interface .
3582	Get a list of blobs by path .
3583	Print the interfaces tree .
3584	Find a device by name .
3585	Get all the metadata for a given corebobjects .
3586	Add a callback .
3587	Remove a callback .
3588	Convert a CBUUID to a UUID .
3589	Set color .
3590	Return the BLE provider
3591	Convert a byte array into a big integer .
3592	Encrypts a password using GOOGLE_PUBKEY .
3593	Returns the headers for the device .
3594	Perform a search on the server .
3595	Retrieve details about a package .
3596	Retrieves the bulk details for a package .
3597	Get a list of clusters .
3598	Retrieve reviews for a package .
3599	Download a package .
3600	Decorator for http connection .
3601	Create a new token .
3602	Returns a FirebaseUser object .
3603	Build an endpoint URL .
3604	Authenticate the request .
3605	Make a GET request .
3606	Perform a GET request .
3607	Execute a PUT request .
3608	Put data into an endpoint .
3609	Perform POST request .
3610	Perform a DELETE request .
3611	Perform a DELETE request .
3612	Filter a queryset .
3613	Return a filtered queryset .
3614	Return a queryset with the available choices .
3615	Returns the raw record as a dict .
3616	Determines if an instance should be indexed .
3617	Get the settings for the index .
3618	Set the settings on the index .
3619	Register a model .
3620	Unregisters a model .
3621	Returns the adapter for the given model .
3622	Called when the model has been saved .
3623	Called when an instance is deleted .
3624	Decode a geohash .
3625	Encode latitude and longitude .
3626	Pad to target_len .
3627	Remove all rows from a table .
3628	Pad all cells in a table .
3629	Return a divisible div .
3630	Add divers to row .
3631	Convert a table into a Markdown table .
3632	Convert a resource id into its base identifier .
3633	Get card info .
3634	Search for transfer markets .
3635	Update an existing bid .
3636	List the clubs .
3637	Returns the staff members
3638	Returns a list of all consumers .
3639	Retrieve a list of players .
3640	Returns the status of a trade .
3641	Returns a list of all the trades
3642	sell an item
3643	Sell an item .
3644	Delete a watchlist
3645	Delete a trade
3646	Send a trade to the watchlist
3647	Send a challenge to the server .
3648	Applies a consumer to a resource .
3649	Returns the active messages .
3650	Convert a number to a hex string .
3651	Get a logger .
3652	Main loop .
3653	The pixel location of the image .
3654	Start the image acquisition .
3655	Stop image acquisition .
3656	Add a file to the CTI file list .
3657	Remove a file from the list .
3658	Destroys the ImageAcquirer object .
3659	Add coefficients to the grid .
3660	Return the index of the index of the coefficients in the matrix .
3661	r Calculates the surface of the equation
3662	r Calculates the integrals of two surfaces .
3663	r Calculates the integration of a given method .
3664	r Calculate the mass of a given method .
3665	r Calculates the heat capacity of the heat capacity .
3666	r Calculates the heat capacity of the heat pool .
3667	r Calculates the heat capacity for a given method .
3668	r Calculates the K - value for the given parameters .
3669	r Calculates RachfordRice error .
3670	r Compute Wilson coefficients .
3671	r Determine the phase .
3672	Compute the bubble at the given pressure .
3673	r Draws a 2D molecule .
3674	r Draw the molecule .
3675	r Calculates the charge .
3676	r Calculates the rdkit mol .
3677	r Calculates the Rdkit Hs .
3678	r Returns the legal status .
3679	r Returns the economic status .
3680	r Calculates the temperature from the current value .
3681	r Calculates the GWP for the given CASR data .
3682	r Calculates the logp of the log p .
3683	r Calculates the pressure at a given method .
3684	Solve the problem .
3685	Sets the phase of the system .
3686	Solve the problem with respect to T .
3687	r Calculates the alpha and derivative of the alpha function .
3688	r Solve the surface of the system .
3689	r Solve the solution of the problem .
3690	r Solve the surface of the system .
3691	r Solve the singularity of the system .
3692	r Calculate the alpha and derivative of a tensor .
3693	r Return a list of all methods that can be used to access a Tb .
3694	r Calculates the Tm of the Tm .
3695	r Calculate the Clapeyron equation
3696	Calculate Watson Wilson coefficient .
3697	Calculate HFus pressure for a given reference frame .
3698	Returns the HUB value of the HUB .
3699	Calculates the Tliquidus concentration for a given number of times .
3700	r Calculate solubility parameter .
3701	r Calculates the eutectic eutectic eutectic eutectonic equation
3702	r Calculates the eutectic lattice of a molecule .
3703	r Calculate Rackett .
3704	r Calculates the Gunnivity of the Gunnivity .
3705	r Calculates the wind rate of seawater
3706	r Calculates the COSTALD - D equation
3707	r Calculates the AMG .
3708	r Calculate the CoSTALD - Dixture .
3709	r Calculates the voltage for a given method
3710	r Calculates the p - values for a given method .
3711	r Calculate the Mixture for a given method .
3712	r Calculates the pressure for a given method .
3713	r Calculates the energy for a given method
3714	r Calculate the VMS for a given method .
3715	r Calculate the volume
3716	r Determine the legal status of a legal law .
3717	Returns the economic status for the given CASR code .
3718	Calculates the estimates of the energy of each particle
3719	r Calculates the conductivity of a given CA .
3720	r Calculate ionic strength .
3721	Calculate the ion balance for each ion .
3722	r Calculate the epsilon of the simulation .
3723	r Calculates the polynomial .
3724	Load group assignments .
3725	r Calculates the dipole moment of a dipole .
3726	r Calculates the Pc for a given PC .
3727	r Calculates the Vc for a particular type .
3728	r Creates a list of ZC methods .
3729	r Calculates the critical surface .
3730	r Calculates a third property .
3731	Checks the validity of a CA .
3732	Determine a mixture from a string .
3733	The charge of this formula .
3734	Load the included indentifiers from a file .
3735	r Calculates the cooling property for the specified conditions .
3736	r Calculates stockmayer .
3737	r Returns the molecular diameter of a molecule .
3738	r Compute the T - star of a given transition matrix .
3739	r Calculates the HF for a given gas .
3740	r Calculates the omega for a given function .
3741	r Calculates the omega mixing of the omega and zs .
3742	r Calculates Stielpolar pressure .
3743	Compute ViswathN .
3744	r Round i to an integer .
3745	r Calculate the Hessian for a given method .
3746	r Calculates the pressure for a given method .
3747	r Calculates the Hessian of the fluid .
3748	r Calculates the mu of the given method
3749	r Calculates the pressure for a given method .
3750	r Calculates the composition using the given method
3751	Get the TWA for a given exposure .
3752	Get the STEL for a given exposure .
3753	Get the ceiling method for a given exposure .
3754	Retrieves the current exposure .
3755	r Calculate a carcinogen .
3756	r Calculates the Tautoignition for a given CASR .
3757	r Calculates the LFL of the LFL .
3758	r Calculates the UFL .
3759	r Calculates the fraction of atoms .
3760	r Calculates the fraction of mass fractions .
3761	r Draws a 2D molecule .
3762	r Calculates the Tt for a given CASR method .
3763	r Calculates the T - pressure pressure for a given peptide .
3764	r Calculates the parachor for the given parameters .
3765	r Calculates Joule phonon temperature
3766	r Calculate the z - axis fromvirial pressure form .
3767	r Convert zs to ws .
3768	r Convert zs and VMs to Vfs
3769	r Check if all elements have the same length
3770	r Compute the mixing of two states .
3771	r Compute the logarithmic logarithmic .
3772	r Determine the value of a property .
3773	r Set the user_methods
3774	r Return a list of valid methods .
3775	r Solves the value of a given property .
3776	r Calculates the derivative of the dependent property .
3777	r Calculate the integral of a linear system .
3778	r Calculates the integral of a dependent property .
3779	r Calculates the integral of the linear system
3780	r Load all test methods
3781	r Calculates the coefficients of a given method .
3782	r Set the user - specified chemical methods .
3783	r Return a list of valid methods .
3784	r Calculates TP dependent property .
3785	r Interpolator .
3786	r Calculates the derivative of the derivative of the dependent property .
3787	r Calculates the derivative of the dependent property P .
3788	r Set the user methods .
3789	r Calculates the derivative of the properties of the model .
3790	r Calculates the derivative of the property P .
3791	r Calculate the refractive index for a given reference .
3792	r Solve the tensor .
3793	r Set the alpha and derivatives of an alpha and derivatives .
3794	r Set the alpha and derivative of an alpha matrix .
3795	r Calculates the alpha and derivatives of the alpha and derivatives of a function .
3796	r Calculates the alpha and derivative of the alpha and derivative of a function .
3797	r Set the alpha and omega for a given atom i .
3798	r Calculates the alpha and derivative of an alpha matrix .
3799	r Calculates the Bahadori liquid of the Bahadori liquid .
3800	r Calculates the Bahadori gas and gas pressure .
3801	r Calculates the potential for a given method
3802	r Calculates the pressure for a given method .
3803	r Calculate thermal conductivity .
3804	r Calculates the energy for a given method
3805	r Calculates the pressure for a given method .
3806	r Calculates the mixing coefficient for a given method .
3807	r Parse a formula .
3808	r Calculates charge from a formula .
3809	r Convert a formula into a string .
3810	Connect to the server .
3811	Get the request header .
3812	Sets the active client .
3813	Upload an image .
3814	Get the session status from the upload service .
3815	Called when a message is received .
3816	Add channels to the channel .
3817	Sends a request to the client .
3818	Base request .
3819	Adds a user to the chat .
3820	Creates a new conversation .
3821	Deletes a conversation .
3822	Send an easter egg request .
3823	Gets a conversation .
3824	Gets an entity by ID .
3825	Gets the group conversation url .
3826	Retrieves the current user info .
3827	Gets the SuggestedEntitiesResponse .
3828	Query the presence .
3829	Remove a user from the chat .
3830	Renames a conversation .
3831	Search for entities .
3832	Send a chat message .
3833	Modify the OTR status .
3834	Send an invitation to the device .
3835	Sets the active client .
3836	Sets the conversation notification level .
3837	Sets the focus request .
3838	Sets group link sharing .
3839	Sets the presence .
3840	Sets the typing request .
3841	Sync all new events .
3842	Synchronize the recent conversations .
3843	Convert microsecond timestamp to datetime .
3844	Convert a participant id to a user ID .
3845	Convert a user id to a participant id .
3846	Parse a typing status message .
3847	Parse a watermark notification .
3848	Get the authorization headers .
3849	Perform an HTTP request .
3850	Fetches an HTTP request and returns the result .
3851	Lookup entities by ID .
3852	Returns an EntityLookupSpec for the given identifier .
3853	Get the name of a convolutional conversation .
3854	Add a color scheme to a scheme .
3855	Synchronize all conversations .
3856	Return a list of unread events .
3857	Is this conversation?
3858	Called when a notification is received .
3859	Update the conversation .
3860	Convert an event into a conversation object .
3861	Add an event to the conversation .
3862	Returns the delivery medium for this conversation .
3863	Create an event request header .
3864	Send a message to the chat .
3865	Leave the conversation .
3866	Renames a conversation .
3867	Sets the notification level .
3868	Sets the typing status .
3869	Updates the latest read timestamp .
3870	Gets the events for the given event .
3871	Return the next event .
3872	Get all convolutions .
3873	Leave a conversation .
3874	Add a new conversation .
3875	Process a state update .
3876	Fetch a conversation .
3877	Called when an event is received .
3878	Handle a conversation delta .
3879	Handle typing notification .
3880	Handle a watermark notification .
3881	Sync all events since the last sync .
3882	Upgrade the full name .
3883	Create a User object from an entity .
3884	Create a User object from a conv part .
3885	Retrieves a User object .
3886	Add a User from a conv part .
3887	Add an observer .
3888	Remove an observer .
3889	Fire all observers .
3890	Generate markdown string .
3891	Return a tuple of HTML strings .
3892	Run an example .
3893	Create an argument parser .
3894	Run a client .
3895	Print a table of rows .
3896	Generate documentation for an enum descriptor .
3897	Generate documentation for a message .
3898	Compile proto file .
3899	Main entry point .
3900	Make a directory .
3901	Catch exception handler .
3902	Handles the user input .
3903	Show the menu .
3904	Returns a ConversationWidget object .
3905	Add a conversation tab .
3906	Connect to the server .
3907	Called when a conversation is received .
3908	Put a coroutine .
3909	Consume a coroutine .
3910	Rename a conversation .
3911	Sort the list of convolutions .
3912	Display a message .
3913	Called when an event is received .
3914	Called when typing message is received .
3915	Updates the typing status .
3916	Convert timestamp and datetime format to string
3917	Create a MessageWidget from a conversation event .
3918	Handles the change event .
3919	Load the conversation .
3920	Sets the focus position .
3921	Return a menu widget .
3922	Receive a keypress .
3923	Set the title of the conversation .
3924	Called when a message is received .
3925	Update tabs .
3926	Called when a keypress is pressed .
3927	Sets a tab .
3928	Replace all words in a string .
3929	Retrieves an authorization token using a refresh token .
3930	Retrieves the authorization code .
3931	Make an access token using a refresh token .
3932	Make an OAuth2 access token .
3933	Make a token request .
3934	Get cookies from the session .
3935	Load the refresh token from the file .
3936	Save a refresh token .
3937	Submit a form .
3938	Parses a SID response into a tuple .
3939	Yield chunks of data from the stream .
3940	Listen for incoming requests .
3941	Fetches a new channel ID and returns it .
3942	Make a long poll request .
3943	Receive data from the device .
3944	Serialize this message to a Segout segment .
3945	Decodes a message field .
3946	Decodes a repeated field .
3947	Decodes a protobuf message .
3948	Format a timezone .
3949	Execute all the entities in the database .
3950	Reads an ADC pin .
3951	Compute the read_comparator .
3952	Read an ADS 1x15 configuration .
3953	Retrieves the last result .
3954	Remove all the exited containers
3955	Remove all images from docker .
3956	Update nginx with new configuration
3957	Updates the running containers based on the spec .
3958	Resolve a short repo name .
3959	Ensure remote repository exists .
3960	Update local repository .
3961	Update all managed repos .
3962	Prepare and start a local environment .
3963	Start the local environment .
3964	Stop all running containers .
3965	Restart an app or service .
3966	Rename src to dst .
3967	Compose a dictionary of nginx ports .
3968	Compose a dictionary with all of the services .
3969	Return a list of conditional links for a given app .
3970	Return the path to the build path .
3971	Compiles the app dictionary .
3972	Compose a service specification .
3973	Returns a list of port names and ports .
3974	Return a list of all the volumes attached to the assembled components .
3975	Read environment variables from a file .
3976	Expand libs in app specs .
3977	Expand libs in specs .
3978	Return a set of libs that are referenced in the specs .
3979	Return a set of all services that are referenced in the specs .
3980	Add assets to specs
3981	Return expanded specs .
3982	Retrieves the repo of a given app or library .
3983	Returns a set of repositories that are in the same container .
3984	Returns a list of RepositoryRepository objects for the same container .
3985	Create a config file from a list of hosts .
3986	Update the hosts file with the given port spec
3987	Moves a temporary binary to the path .
3988	A context manager for running tasks .
3989	Generate a location specification for a location specification .
3990	Generate a docstring for the nginx server .
3991	Return the stream spec for a port specification .
3992	Get the nginx configuration spec from a dictionary .
3993	Load ssh authentication .
3994	Load ssh authentication for yosemite
3995	Check and load ssh auth .
3996	Temporarily delete a path .
3997	Copy a file from one container to another .
3998	Copy a local file from a local path
3999	Copies a local path to a container
4000	Mount a repository
4001	Generate port spec document from expanded_spec
4002	Initialize YAML constructor .
4003	Determine the registry from an image name .
4004	Return a list of all docker registry paths .
4005	Context manager for streaming to a client .
4006	Fork a pty .
4007	Compile docker commands for an app .
4008	Increments the file handle limit .
4009	Start the HTTP server .
4010	Return a docker client .
4011	Return a list of docker containers for a given service .
4012	Configure NFS server .
4013	Ensures that the managed repositories directory exists .
4014	Register a new consumer .
4015	Consume a consumer .
4016	Retrieves the volumes of an app .
4017	Return a list of volumes mounted on a library .
4018	Retrieves a list of libs volumes for the app_name .
4019	Checks if the vm exists .
4020	Initialize a new dusty VM with the given configuration .
4021	Start the docker - machine .
4022	Determines if the virtual machine is running .
4023	Determine the remote host port .
4024	Returns the host - only MAC address for the host - only adapter .
4025	Return the IP address for the given ip address
4026	Get the host - only ip address
4027	Create a local copy of a cookie file .
4028	Create a cookie jar .
4029	Load a cookie jar .
4030	Load the cookie jar .
4031	Decrypt an encrypted value .
4032	Return a random string .
4033	Parse a string .
4034	Checks if the content is already patched
4035	A decorator that wraps a function as a function .
4036	Wrap a saved search function .
4037	Default error handler .
4038	Return default headers .
4039	Cache the given response .
4040	Clean up to_clean .
4041	Retrieve data from the server .
4042	Extract links from the request .
4043	Build query string .
4044	Retrieve the publications for this group .
4045	Returns the number of items in a collection
4046	Total number of items in a tag
4047	Retrieve the total number of results from the API .
4048	Retrieves the API key information .
4049	Retrieve fulltext items for a given itemkey .
4050	Returns the last - modified version of the request .
4051	Retrieve file information for a given item .
4052	Dump an item to a file .
4053	Return a list of all collections
4054	Search for a collection .
4055	Return all the items matching the given query .
4056	Return a list of items .
4057	Process a CSL JSON response .
4058	Process Bibliography items .
4059	Process citations .
4060	Retrieve a template for a specific item type .
4061	Create an attachment .
4062	Return the list of permitted operators for the given condition .
4063	Delete a saved search .
4064	Add tags to an item .
4065	Retrieve the template type of a template .
4066	List of item fields .
4067	Update an item
4068	Update the items .
4069	Validate the condition .
4070	Uploads all the items to the Prelim server .
4071	Split a multiline string .
4072	Split a comma separated list of elements .
4073	Evaluate environment variables .
4074	Get a value from a config file .
4075	Set a configuration value .
4076	Convert a config object to a dictionary .
4077	Run 3to2 .
4078	Write a py2k header .
4079	Return the version of the language .
4080	Return the set of languages .
4081	Return the directory containing the language .
4082	Set the directory to the server .
4083	Return a list of Match objects .
4084	Determine the newer version of the language tool .
4085	Return the common prefix of a z - element .
4086	Process events .
4087	Decorator to close a function .
4088	Decorator to ensure a function is called .
4089	A class decorator .
4090	Process an event .
4091	Add sources to the compiler .
4092	Add searchers to the MIBs .
4093	Add loans to this scope .
4094	r Calculate AIC component of AIC
4095	r Calculates the AICC of the AICC .
4096	r Calculate the KIC component of a KIC component .
4097	r Calculates the KICC of the KICC .
4098	r Calculate FPE .
4099	r Calculates the MDL of the MDL .
4100	r Calculate the eigenvalue of an eigenvectors .
4101	r Calculate the eigenvalue of the eigenvectors .
4102	Generate rst file .
4103	Sets up the Sphinx extension .
4104	r Compute correlation coefficients .
4105	Compute the correlation between two arrays .
4106	Calculates the eigenvalue of the eigenvectors T .
4107	r Compute morlet distribution .
4108	r Chirp .
4109	r Compute the exican pressure .
4110	Convert data to polygon
4111	Convert a polynomial to a polynomial .
4112	Convert an ellipsoid to spherical coordinates
4113	Convert complex reflection coefficients .
4114	Convert complex reflection coefficients .
4115	Calculate log area of complex reflection coefficients .
4116	Convert a line spectral frequency spectrum to a polynomial .
4117	Convert a polynomial to an ellipsoid .
4118	Compute the overlap between two arrays .
4119	Compute the two - dimensional polynomial distribution .
4120	One - dimensional 2 - dimensional polynomial .
4121	twosided22 centerdc
4122	Calculate the center of two - dimensional data .
4123	Compute zerolag zerolag .
4124	r Calculate cosine data .
4125	data_two_freqs
4126	Return the filename of a spectrum
4127	Plot the data .
4128	Read a WAV file .
4129	Auto - crosscov
4130	Subtracts an estimate of the mean from signal x at axis
4131	Extract the docstring and rest from a file .
4132	Split source code and text blocks into blocks and text blocks .
4133	Convert a codestr to an rst file .
4134	Calculate the md5sum of a file .
4135	Check the md5sum of a file .
4136	Determine if two plots have changed .
4137	Save matplotlib figures .
4138	Scale an image .
4139	Save a thumbnail to the gallery .
4140	Execute code blocks in a file .
4141	Calculate the ARG .
4142	Compute the Cholesky decomposition of A and B .
4143	Solve A and B .
4144	Cholesky decomposition .
4145	Calculate the Speriodogram .
4146	r Welch periodogram .
4147	r Decomposition of a periodogram .
4148	Generate the centerdc generator .
4149	Generate one - dimensional generator .
4150	Plot the spectrum .
4151	r Calculates the power power .
4152	Return a dictionary with information about the notebook .
4153	Convert rst to md format
4154	Add a markdown cell .
4155	Save work_notebook to file .
4156	r Calculate PSD from ARM .
4157	Estimate the ARMA estimator
4158	Calculate the model parameters .
4159	Correlation PSD .
4160	Get the data from a URL .
4161	Select a block from start_tag
4162	Recursively parse a dictionary
4163	Parse a sphinx search index .
4164	Embedding code links in examples .
4165	Get the link name for a given object .
4166	Convert tensor to zp .
4167	Equivalent to eqtflength
4168	Calculate the zpk of a signal .
4169	r Compute the tensorflow tensor .
4170	Calculate the spectral density of a signal .
4171	r Calculate the enbww .
4172	Kernel function .
4173	Plots a window of time frequencies .
4174	r Creates a window of a window .
4175	r Blackman window .
4176	r Create a window for a window .
4177	r Creates a window of windows .
4178	r Calculate window lanczos window size .
4179	r Calculate window window size .
4180	Calculate the coefficients for a spherical harmonic coefficients .
4181	r Calculate the window window size .
4182	r Calculate the blackman window .
4183	r Calculate the window blackman window .
4184	r Create a window bohman window .
4185	r Creates a window flushes .
4186	window_taylor
4187	r Calculate window size .
4188	r Calculate window size .
4189	r Creates a window of a window .
4190	r Creates a window of window_hannning .
4191	r Calculate window cauchy window .
4192	Compute the response
4193	Plot the frequencies of the response .
4194	Plot the window .
4195	Plot time frequency .
4196	Compute the Jacobian of the tensor .
4197	Generate Hermotropy matrix .
4198	Get the short name of a module .
4199	Identify a Python code object .
4200	Generate a thumbnail from a snippet snippet .
4201	Modular covariance matrix .
4202	r Compute the LeVINSON decomposition .
4203	r LeVINSON model
4204	Rlevinson decomposition .
4205	Compute the ellipse of an ellipse .
4206	Compute the ellipse of the reflection coefficients .
4207	r Compute the covariance of the covariance matrix .
4208	Compute the LeVPC decomposition of x .
4209	Calculate pascal .
4210	Compute the CSVD of A .
4211	Convert a path to a static path .
4212	Main entry point .
4213	Return True if stdin is a pipe .
4214	Return a list of all available keys .
4215	The name of the class .
4216	Returns a SimpleCredential object .
4217	Delete a password entry .
4218	Get environment variable .
4219	Get the preferred collection .
4220	Return all available backends .
4221	Set the keyring .
4222	Disable the keyring .
4223	Initialize the backend .
4224	Load a keyring class .
4225	Load the configuration file .
4226	Return the path to the data root .
4227	Checks that the keyring config file exists .
4228	Retrieves the configuration root for Linux .
4229	Create a formatter function .
4230	Argument parser .
4231	Run a command .
4232	Main entry point .
4233	Autodetect the server .
4234	Extract a value from an XML element .
4235	Convert value to_type
4236	Login to the server .
4237	Get a list of attached devices .
4238	Get the traffic meter .
4239	Mark the device as finished .
4240	Make a request to the API .
4241	Convert an IP address to a long integer .
4242	Seek to a country .
4243	Get the region for the given ip number .
4244	Get a record from the database .
4245	Retrieve a host by name .
4246	Return the ID of a host .
4247	Get the country ID by address .
4248	Returns the netspeed cell for the given address .
4249	Return the net speed of a host .
4250	Get country name by address
4251	Get country name by hostname
4252	Retrieve an organization by address .
4253	Get the organization by hostname .
4254	Get a time zone by country and region code .
4255	Compress a file .
4256	Return the compressed filename .
4257	Copy src to dst
4258	Convert a path to a URL .
4259	Read a Markdown file .
4260	Load the exif from the gallery .
4261	Restore the cache .
4262	Save the cache to disk .
4263	Filter a . nomedia file .
4264	Build the project .
4265	Serve the given directory .
4266	Set the metadata for a target .
4267	Generate an image .
4268	Generate a thumbnail from a source image .
4269	Read EXIF data .
4270	Get Iptc data from an IPTC image .
4271	Get the exposure data from a dictionary
4272	Create output directories .
4273	Returns the URL of the object .
4274	Retrieves the thumbnail image .
4275	Create a zip archive .
4276	Get the album s albums .
4277	Create the image gallery
4278	Iterate over a directory .
4279	Reduces an opacity .
4280	Draw a watermark .
4281	Run a subprocess .
4282	Calculate video size
4283	Generate a video .
4284	Generate a thumbnail .
4285	Generate the context for an album .
4286	Write an album to disk .
4287	Return the path to a thumbnail .
4288	Read settings from file .
4289	Generate media pages .
4290	Writes the given album .
4291	Cleanup the project directory .
4292	Validate project name
4293	Manage config options .
4294	Return the supported Django versions supported by django . CMS .
4295	Convert a version string to a version string .
4296	Parse config file .
4297	Dump a configuration file .
4298	Convert config to stdin .
4299	Create a project .
4300	Installs ALDRYBYPLY .
4301	Setup the database .
4302	Create user .
4303	Execute the ox command .
4304	Return a list of valid formats .
4305	Execute a SOXI command .
4306	Play a program .
4307	Validate file format .
4308	Validate input filepaths .
4309	Ensure that all files have the same number of channels .
4310	Build the input format list .
4311	Build input arguments .
4312	Validate input volume .
4313	Test whether a file is silent .
4314	Validate input file .
4315	Validate input filepaths .
4316	Validate output file .
4317	Return information about a file .
4318	Runs a stat command
4319	Parse the output from the output .
4320	Set global globals .
4321	Add a biquad .
4322	Set the number of channels .
4323	Set contrast .
4324	Convert the sampler to the output format .
4325	Shift the effect .
4326	Add a delay to the effect .
4327	Downsample the effects by a given factor .
4328	Emit the signal .
4329	Create a flanger .
4330	Increase the gain .
4331	Set loudness .
4332	Remove the effect of a given profile .
4333	Add noisered to a profile .
4334	Normalize the effect .
4335	Add an oops effect .
4336	Override the Override .
4337	Pad the effect .
4338	Create a phaser .
4339	Set the pitch effect .
4340	Create a new glossary .
4341	Repeat effects .
4342	Reverse effect .
4343	Simulate silence .
4344	Execute the stat command
4345	Parse the output of the given file .
4346	Swap the effect .
4347	Set the tempo .
4348	Trim the effect .
4349	Generate a VAD .
4350	Set the volume gain .
4351	Join a room .
4352	Leave a room .
4353	Manage socketio .
4354	Save ack callback .
4355	Pop ack callback .
4356	Get multiple client messages .
4357	Remove a namespace from the stack .
4358	Send a packet to the client .
4359	Spawn a greenlet greenlet .
4360	Listen for packets .
4361	Watcher thread .
4362	Periodically heartbeat .
4363	Spawn the heartbeat .
4364	Encode a message
4365	Decode raw string to json .
4366	Process an event .
4367	Calls the given method with the given ACL
4368	Log an error .
4369	Send a message .
4370	Emit an event .
4371	Spawn a function as a new job .
4372	Get a socket .
4373	Create a new chat room .
4374	Get multiple messages from a socket .
4375	Encode a message .
4376	Write data to the server .
4377	Broadcast an event .
4378	Add a parent .
4379	Allow access to a resource .
4380	Denies a permission from a role .
4381	Mark a resource as exempt .
4382	Checks if the given role is allowed .
4383	Return True if the given role is allowed .
4384	Decorator to allow access to a view .
4385	Remove all adslib files .
4386	Decorator for router functions .
4387	Add a new route .
4388	Closes a port .
4389	Retrieves the local address of a device .
4390	Synchronize the device state request .
4391	Synchronously sync device info request .
4392	Sends a write control request .
4393	Sends a sync request .
4394	Sends a sync request to the device .
4395	Synchronously sync a device .
4396	Synchronously write a value by name .
4397	Synchronously update a device .
4398	Synchronize a device notification .
4399	Sets the timeout for the specified port .
4400	Generate a range of dates .
4401	Fetch department data from the API .
4402	Remove a node from the cluster .
4403	Emulate mget .
4404	Create a lock .
4405	Parse a single line into a dictionary .
4406	Connect to Lavalink .
4407	Listen to Lavalink .
4408	Return the channel associated with this channel .
4409	Connect to a voice channel .
4410	Disconnect from the guild .
4411	Store a value in the database .
4412	Fetch a user s value .
4413	Add a track to the queue .
4414	Add a track to the queue .
4415	Add a track to the queue .
4416	Play a track .
4417	Play a track .
4418	Play an item at the given index .
4419	Play the previous track .
4420	Stop the guild .
4421	Set the pause .
4422	Seek to a position .
4423	Handles the event .
4424	Get a player by id .
4425	Remove a guild .
4426	Play a song .
4427	Seek to a track .
4428	Shows a song .
4429	Queue a single page .
4430	Remove an item from the queue .
4431	Ensure voice is connected .
4432	Unregister a hook .
4433	Dispatch an event .
4434	Update player position .
4435	Get tracks for a given query .
4436	Destroys the websocket .
4437	Builds a track from a track .
4438	Play previous song .
4439	Play a song .
4440	Play a player at the given index .
4441	Search for tracks .
4442	Add suggestions .
4443	Delete an item from the store .
4444	Get suggestions for a given prefix .
4445	Create a new index .
4446	Add a document to the index .
4447	Add a document to the database .
4448	Delete a document from the index .
4449	Load a document by id .
4450	Return information about the current index .
4451	Perform a search .
4452	Execute a query .
4453	Change field name .
4454	Add a group by the given fields .
4455	Applies a set of kwexpr expressions .
4456	Add a new limit to the query .
4457	Returns the arguments to be sent to the server .
4458	Sets the sortby field .
4459	Create a RangeValue .
4460	Convert latitude and longitude to GeoValue .
4461	Transform a jam .
4462	Transpose a label .
4463	Create a new jam file .
4464	Load a jam file .
4465	Save audio to a jam file .
4466	Recursively reconstruct a dictionary .
4467	Serialize a transform .
4468	Deserialize a JSON object .
4469	Pretty print parameters .
4470	Return a list of parameter names .
4471	Return a copy of this jam .
4472	Transform a jam .
4473	Recursively transform a jam .
4474	Generator for serialization .
4475	Generate start and stop indices for a sample .
4476	Slice a sound file .
4477	Normalize remote path .
4478	Split a storage path into a tuple .
4479	Return True if file is empty False otherwise .
4480	Calculate the checksum of a file .
4481	Returns a Storage object for this project .
4482	Retrieve a list of Storage objects .
4483	Create a file .
4484	Copy a file - like object to fdst .
4485	Write the content to a file .
4486	Delete this resource .
4487	Update the file .
4488	Iterate the children of a given kind .
4489	Decorator to check if the user is authorized .
4490	Initialize the OSF
4491	Clone a project .
4492	Fetch a remote file .
4493	List all the files in the project .
4494	Upload a file .
4495	Remove a file .
4496	Logs the given username and password .
4497	Retrieve a project by ID .
4498	Get a GUID .
4499	Convert a response into JSON .
4500	Follow the next url .
4501	Create a project .
4502	Clears all projects .
4503	Create a new LED .
4504	Put an edit function .
4505	Get all the edits from the queue .
4506	Find all serial devices .
4507	Get a device from the COM port .
4508	Log an error .
4509	Set device ID .
4510	Get the value of a project .
4511	Crop an image .
4512	Resize an image .
4513	Draws a circle .
4514	Draw a circle .
4515	Draw a line .
4516	Draw a bresenham line
4517	Fill the screen .
4518	Draw a triangle .
4519	Set the project .
4520	Set the color of the color .
4521	Calculate the angle of a cylinder .
4522	Run a function locally .
4523	Scale a color .
4524	Save the project to a file .
4525	Get the element at the specified position .
4526	Run the task .
4527	A decorator to report an exception .
4528	Receive a message .
4529	Set the device brightness value .
4530	Add a logging level .
4531	Construct an instance of the driver .
4532	Return a clone of this color .
4533	Set a color list .
4534	Fill a color with a color .
4535	Fill an RGB color .
4536	Fill the color image with hsv .
4537	Helper function for wheel color
4538	Decorator to make a single request .
4539	Decorator to iterate over multiple addresses .
4540	Advance a permutation .
4541	Called when an index is changed .
4542	Apply a function to each value .
4543	Create a new event .
4544	Add redundant arguments .
4545	Draws a circle
4546	Draws a circle
4547	Draw a bresenham line
4548	Draws a rectangle
4549	Draws a round rectangle
4550	Draws a rectangle around a rectangle .
4551	Draws a triangle
4552	Draw a triangle onto the setter
4553	Set colors .
4554	Find a point on a circle .
4555	Generate a 3D vector .
4556	Iterate over all named colors .
4557	Return True if x is a valid color name .
4558	Convert a string into segments .
4559	Return a new Segment with the given length .
4560	Stop the builder .
4561	Open a browser .
4562	Recursively traverse a deserialized datatype .
4563	Convert a value into a datatype .
4564	Fill an item with an item .
4565	Pop a palette from kwds .
4566	Compute the Euclidean distance between two clusters .
4567	Write frames to file .
4568	Serialize data to a string .
4569	Dump data to a file .
4570	Load a YAML file
4571	Adapt an animation layout .
4572	Convert HSV to RGB
4573	Convert Hsv to RGB
4574	Convert HSL color to RGB .
4575	Convert hue to RGB
4576	Compare two colors .
4577	Get a server by key .
4578	Set a value by name .
4579	Update desc from desc dict
4580	Toggle color .
4581	Convert color to color .
4582	Construct a failed instance .
4583	Change the mode of an image .
4584	Convert an image to a color list .
4585	Convert an image to a list of colorlists .
4586	Parse duration string .
4587	Stop the thread .
4588	Display an image .
4589	Return x y and y of x y
4590	Convert x y to y and y
4591	Convert a list of colors to a list of triples .
4592	Return a palette .
4593	Receive a message .
4594	Make a matplotlib coordinate map .
4595	Create an object .
4596	Temporarily modify the pid file .
4597	Return the index of the range i .
4598	Iterate through the given data .
4599	Clean up an animation .
4600	Detach the overlay .
4601	Main entry point .
4602	Merge multiple projects .
4603	Returns a shallow copy of this asset .
4604	Get the history of the account .
4605	Upgrade the account .
4606	Return the whitelist of an account .
4607	Return the whitelist of an account .
4608	Get an account s whitelist .
4609	Reconstruct a public key from a public key
4610	Reconstruct a public key from a public key
4611	Returns the time of a block .
4612	Get the timestamp of a block .
4613	Iterate over blocks until stop is reached .
4614	Block until a transaction is confirmed .
4615	Get all accounts from the blockchain .
4616	Refresh asset data .
4617	Format a time .
4618	Parse a block time .
4619	Checks if the wallet is unlocked
4620	Unlock the master .
4621	Decrypt the master password
4622	Create a new master password
4623	Generate checksum for given string .
4624	Returns the encrypted master password .
4625	Change the password .
4626	Decrypt a WIF .
4627	Encrypt a WIF .
4628	Returns a private key for this session .
4629	Create a public key from a public key .
4630	Derive y from x .
4631	Return the point of the curve .
4632	Get a child by offset256
4633	Create a Prefix from a private key .
4634	Derive a private key from a sequence .
4635	Derive a child .
4636	Derive a private key from a seed .
4637	Claims a public key
4638	Get the shared blockchain instance .
4639	Set shared configuration .
4640	Find the next URL .
4641	Resets the url counter .
4642	Determine if a key exists .
4643	Return a list of key and value pairs .
4644	Return the value for a given key .
4645	Delete a key .
4646	Check if the table exists .
4647	Create the table .
4648	Returns a Proposal object .
4649	Return the JSON representation of this transaction .
4650	Append a signer to the wallet .
4651	Append a private key to the wallet .
4652	Sets the fee asset .
4653	Add required fees to a list of ops .
4654	Constructs the transaction .
4655	Verify that the payload is valid .
4656	Broadcast the transaction .
4657	Clears the circuit .
4658	Return a copy of this asset .
4659	Return a copy of this asset .
4660	Finalize operation .
4661	Broadcast the transaction .
4662	Get a proposal .
4663	Create a new transaction builder .
4664	Return the details about the vote .
4665	A unique identifier .
4666	Sign a message .
4667	Refresh the object .
4668	Encrypt a private key .
4669	Decrypt and decrypt the encrypted private key .
4670	Set private keys .
4671	Unlock a file .
4672	Create a new wallet .
4673	Add a private key to the store .
4674	Get the private key for a public key .
4675	Remove an account
4676	Get the private key for an account .
4677	Get the crypto key for an account .
4678	Get the private key for an account .
4679	Get account from private key .
4680	Get all accounts from a public key .
4681	Get the account from a public key .
4682	Return the key type for the given pubkey .
4683	Returns a list of all accounts associated with this key .
4684	Return a list of public keys .
4685	Unlock wallet .
4686	Encrypt a message
4687	Decrypt a message .
4688	Get the shared secret between pub and pub .
4689	SharedSecret
4690	Encodes a crypto message .
4691	Decodes a message using the shared secret .
4692	Export the ipmi environment .
4693	Execute an ipmitool command
4694	Return the first occurrence of a pattern .
4695	Execute a command .
4696	Set environment variables .
4697	Return the contents of a file .
4698	Execute NVMe format
4699	Get the chunk meta of a chunk .
4700	Return the size of descriptor table .
4701	Validate environment variables .
4702	Create a LNVM .
4703	Compare two buffers .
4704	Copy the contents of a stream into memory .
4705	Write the buffer to a file .
4706	Read the contents of the file .
4707	Power on the device .
4708	Power off the device .
4709	Power button .
4710	Get information about a chunk .
4711	Set environment variables .
4712	Run a script
4713	setup hooks
4714	Write a trun to a yaml file .
4715	show emph
4716	Setup the TESTCASE
4717	Exit hook .
4718	Enter hook .
4719	Create a test suite .
4720	Enter a tcase .
4721	exit
4722	Enter a run .
4723	Sets up the TRUN configuration
4724	Main entry point .
4725	Get chunk meta data .
4726	Get the chunk meta data .
4727	Determine the number of bytes to generate an integer .
4728	Convert an address to a dev device .
4729	Run the DMS command .
4730	Starts the thread .
4731	Terminate the worker .
4732	Generate a png picture .
4733	Generate a picture with steady time .
4734	Round the filter data to 1 .
4735	Set environment variables .
4736	Print info to stdout .
4737	Print a message to stdout .
4738	Print a warning message .
4739	Print error message .
4740	Print error message .
4741	Return a dictionary with paths from the environment .
4742	Export environment variables .
4743	Determine if the VM exists .
4744	Get the rprt of a device .
4745	Get a chunk from the device .
4746	Kill the running process .
4747	Parse the parameters .
4748	Import parameters from a dictionary .
4749	Get a parameter value .
4750	Starts the thread .
4751	Run fio .
4752	Extracts the name of the hook names from an entry .
4753	Parse the description from a tcase file .
4754	Convert run logs to HTML .
4755	Convert src to HTML .
4756	Process a trun .
4757	Recursively look for changes in a structure
4758	Main entry point .
4759	Set environment variables .
4760	Wait until timeout is reached .
4761	Create an AssertionBuilder .
4762	Return the contents of a file or path .
4763	Create a fail message .
4764	Check that the value is equal to the other .
4765	Check that the value is not equal to the other .
4766	Check that the value is identical .
4767	Assert that self is identical to other .
4768	Check that the value is a type of the given type .
4769	Assert that the value is an instance of the given class .
4770	Check that the value is of the given length .
4771	Check that the value contains the specified items .
4772	Raise an exception if any of the items are not contained .
4773	Check that the value contains only one item .
4774	Check that the value contains a sequence .
4775	Check that the value contains duplicates .
4776	Validate that val is not duplicated .
4777	Check that the value is empty .
4778	Check that the value is not empty .
4779	Check that the value is in the given list .
4780	Check that the value is less than the given other .
4781	Validate that the value is between two values .
4782	Check that the value is close to the given tolerance .
4783	Test whether the value is equal to the lower case .
4784	Validates that the value is in case insensitive case .
4785	Indicate whether the value starts with a prefix .
4786	Indicate whether the value ends with the given suffix .
4787	Test if value matches pattern .
4788	Test if the value is an alphabetic char .
4789	Check if value is a digit .
4790	Test if value is lowercase .
4791	Check if the value is an upper case .
4792	Assert that the value is a unicode .
4793	Test whether the value is a subset of supersets .
4794	Check that the value contains the specified values .
4795	Raise an exception if the value is not a value .
4796	Check that the value contains an entry .
4797	Check that the value is before the given time .
4798	Test if the path exists .
4799	Assert that the value is a file .
4800	Test if the file exists .
4801	Test whether the file is a filename .
4802	Check that the file is a child of the given parent .
4803	Construct Assertion builder .
4804	Raises an AssertionError if any .
4805	Print an error message .
4806	Return a formatted string with the given arguments .
4807	Create a DataFrame from a list of words .
4808	Generate training dataset .
4809	Prepare feature data .
4810	Train the model .
4811	Evaluate the model on the best_processed path .
4812	Tokenize a string .
4813	Calculate the frequency of a document .
4814	Return a list of ngrams .
4815	Create feature array .
4816	Create a n - gram dataframe .
4817	Fetch all rows from a cursor .
4818	Parse a datetime string into a datetime object .
4819	Connect to OpenEdX API .
4820	Decorator to refresh the token .
4821	Redirects course_run_id to url .
4822	Retrieve course enrollment details .
4823	Sort a list of course modes .
4824	Return a list of course modes .
4825	Returns True if the given course has the given mode .
4826	Enroll a user in a course .
4827	Get course enrollment details .
4828	Returns True if the given user is enrolled in .
4829	Get the results for a given provider .
4830	Get course grade for a given course .
4831	Get a course certificate .
4832	Returns an instance of the course discovery API .
4833	Traverse the response with a pagination query .
4834	Retrieves a catalog .
4835	Gets the catalog courses for a given catalog .
4836	Get a paginated catalogs .
4837	Retrieves the courses for a catalog .
4838	Returns the course and course_id for the given course_id
4839	Retrieves course details .
4840	Get a program by name .
4841	Retrieves a program by UUID .
4842	Retrieve program type by slug .
4843	Returns a list of common course modes for the given courses .
4844	Checks if a given course is in the given catalog .
4845	Load data from the catalog
4846	Gets the metadata for the given customer .
4847	Load data from a resource .
4848	Partition the content metadata items .
4849	Serialize the metadata items to JSON .
4850	Create content metadata items .
4851	Update the content metadata item .
4852	Delete content metadata items for the given channel .
4853	Returns the permissions for the content metadata item .
4854	Create content metadata item for content metadata item .
4855	Update the transmission_map .
4856	Delete content metadata item .
4857	Mark a function as deprecated .
4858	Decorator to ignore warnings .
4859	Ensure that the user is logged in .
4860	Force a fresh session .
4861	Validate the username .
4862	Create an enterprise course enrollment .
4863	Return a representation of the catalog .
4864	Return a list of groups of the user .
4865	Validate username .
4866	Save an enterprise customer .
4867	Returns a copy of the course_url and course_runs
4868	Returns a copy of the course_run field
4869	Returns a copy of the program .
4870	Validate data .
4871	Create an object from validated_data .
4872	Convert a dictionary into a list of dictionaries .
4873	Create a new customer .
4874	Validate the LMS user ID .
4875	Validate the TPA user ID .
4876	Validate user email
4877	Validate course run id .
4878	Validates that the given data is valid for the given data .
4879	Paginated response .
4880	Create switch .
4881	Delete switch .
4882	Create switch .
4883	Takes a payload and adds it to the model .
4884	This function is called when an error occurs .
4885	Update the throttled scope .
4886	Update the throttler scope .
4887	Get the total price for the course
4888	Updates the courses for the given customer .
4889	Updates the course .
4890	Updates the course_runs with the given parameters .
4891	Export the course_id and course_id .
4892	Returns a list of learner data records for the given enterprise .
4893	Gets the certificate information from the enterprise .
4894	Gets grades data for the given course .
4895	Return the enterprise user id for the given object .
4896	Return the user s identity for the given object .
4897	Return the course duration .
4898	Remove items from a failed items .
4899	Parses the arguments from the given options .
4900	Execute the given arguments .
4901	Retrieve course enrollments .
4902	Return the modal context .
4903	Create a link to a modal page .
4904	Populate data sharing consent .
4905	Create a course completion .
4906	Delete a course completion .
4907	Synchronize content for serialization .
4908	Perform a POST request .
4909	Perform a DELETE request .
4910	Create a new session .
4911	Ensure data exists .
4912	Returns the content items for the given courses .
4913	Retrieve the courses for the enterprise .
4914	Retrieve course enrollments .
4915	Provides access to the queryset .
4916	Retrieve the entitlements for this customer .
4917	Returns the content items for the given course_run_ids .
4918	Retrieve course detail .
4919	Retrieve a course run .
4920	Retrieve the program details .
4921	List all courses .
4922	Retrieves the data for the given catalog .
4923	Retrieve the courses for a given customer .
4924	Extracts required parameters from the request .
4925	Returns a message indicating missing parameters .
4926	Transform the title into a list .
4927	Transform the content - metadata item into a description .
4928	Transform content_metadata_item to image_url
4929	Translates the content of the launch points .
4930	Transform the title to the title .
4931	Transform the content_metadata_item into a description .
4932	Transform a courserun to a list of dictionaries .
4933	Get content_metadata_item from content metadata item .
4934	Parse a datetime into an epoch .
4935	Split a dictionary into chunks of chunks .
4936	Convert datetime to strftime
4937	Transform a content metadata item into a full description .
4938	Return the path to a logo file .
4939	Get a link by email address
4940	Link a user to an enterprise customer .
4941	Unlink a user from an enterprise customer .
4942	Return the uuid of the customer .
4943	Returns the consent for the given user and program .
4944	Returns a DataSharingConsentConsent object for the given course .
4945	Retrieves the data sharing consent for a program .
4946	Sends a LearnerCourseEnrollment statement .
4947	Send a Learner course completion statement .
4948	Export the content metadata .
4949	Transform the content_metadata_item into a dictionary .
4950	Returns the consent record for the given request .
4951	Returns the required parameters for the given request .
4952	Returns a response with no record .
4953	Connect to the enterprise .
4954	Disconnect post_save for migrations .
4955	Return an Agent object .
4956	Returns an Activity object .
4957	Parse a CSV file .
4958	Validate email to link by email address .
4959	Returns a set of course_runs from the program .
4960	Get the earliest start date from the program .
4961	Generates a paginated list of objects .
4962	Validate email or username .
4963	Validate course .
4964	Validate program .
4965	Returns the value of the notification field .
4966	Validate the form .
4967	Validate course .
4968	Validate the program .
4969	Returns the list of catalogs
4970	Ensure the catalog is empty
4971	Validate the identity provider .
4972	Validate the enterprise customer .
4973	Validate channel worker username .
4974	Verify that all available methods are available .
4975	Returns the global context .
4976	Renders an error page .
4977	Check if a course or program exists .
4978	Returns the context of a course or program .
4979	Handles POST requests .
4980	View course_mode .
4981	Sets the final prices for the given mode
4982	Get the course modes for a course run .
4983	Redirect to the course .
4984	Extend course and course_run
4985	View a program .
4986	Get path variables .
4987	Get the course id for the given course .
4988	Checks if the user has access to the course .
4989	Redirect to the view .
4990	Handles GET requests .
4991	Handles POST requests .
4992	Transfer content metadata to an integrated channel .
4993	Transfer learner data to the given channel .
4994	Remove inactive learningers from a channel .
4995	Called when a user has changed .
4996	Set default content filter .
4997	Assigns an enterprise learner role .
4998	Delete an enterprise learner role assignment .
4999	Decorator for views that require an enterprise customer .
5000	Ensure that the given query parameter is at least one of the specified query parameters .
5001	Retrieves a new batch of enterprise customers from the indexes .
5002	Assigns an enterprise role to users .
5003	Assign enterprise roles to users .
5004	Transmit the payload into the model .
5005	Returns the enterprise customer for the given pipeline .
5006	Create an enterprise customer .
5007	Retrieves a UserSocialAuth object from the SocialAuth provider .
5008	Create a requests session .
5009	Create a course completion .
5010	Sends a POST request to the server .
5011	Calls a POST request with the given payload .
5012	Retrieves the inactive students .
5013	Recursively call all student students .
5014	Filter the queryset .
5015	Filter the queryset .
5016	Attempt to transmit the training data .
5017	Called when an error occurs .
5018	Adds a message to the error message for missing price information .
5019	Validate image extension .
5020	Validate the image size .
5021	Get the enterprise customer from the catalog_id .
5022	Initialize apidoc .
5023	Retrieve all the integrated channels .
5024	Get an enterprise customer by uuid
5025	Returns a list of channel classes .
5026	Convert course_grade to a result .
5027	Parse a requirements file .
5028	Transmit the learner data to the dataset .
5029	Transfer content metadata for a given user .
5030	Returns the data records for the learner data .
5031	Handles get notification email .
5032	Builds the admin context .
5033	Displays the current courses .
5034	Return a queryset of enterprise customer users .
5035	Returns a queryset of pending users .
5036	Called when a single user is logged in .
5037	Handle bulk upload .
5038	Enroll a user in the given course .
5039	Check if a user is enrolled in .
5040	Get users by email address .
5041	Enroll multiple users in a program .
5042	Enroll multiple users in a course .
5043	Send messages to the HTTP request .
5044	Invoke the program learn .
5045	Returns the error message for the failed learner .
5046	Enroll users in the given course .
5047	Displays a user .
5048	Delete a user .
5049	Proxy to get_get method .
5050	Create a ProxyProxy for the given programs .
5051	Creates a new ProxyDataSharingConsent .
5052	Return the course gradients for the given days .
5053	Fetch all the users in the persistent course .
5054	Returns the identity provider for the given provider_id .
5055	Return the IDP choices .
5056	Returns the URL for the catalog admin .
5057	Build a notification message .
5058	Returns the subject line for the subject line .
5059	Sends an email notification message .
5060	Get an enterprise customer by uuid
5061	Returns the enterprise customer for the given user .
5062	Get an enterprise customer user .
5063	Returns the course track URL .
5064	Update query parameters .
5065	Return a list of course modes that are in audit mode .
5066	Returns an enterprise customer object for the given UUID .
5067	Generate a cache key .
5068	Traverse the response with pagination .
5069	Format the min and max_value .
5070	Format a price .
5071	Get a configuration value for a site .
5072	Get a configuration value .
5073	Get a request value from the request .
5074	Track an enrollment .
5075	Returns True if course_run is an enrollmentable .
5076	Is the course run upgradeable?
5077	Given a list of course runs return the closest course run .
5078	Returns the current course run for the given course .
5079	Strip HTML tags from a string .
5080	Parse a course_identifier into a string .
5081	Return a RemoteLRS object for the LRS API .
5082	Save a statement .
5083	Returns a list of all learner data records for the given session .
5084	Remove all students from the customer .
5085	Returns whether the user has implicit access to the dashboard .
5086	Returns whether the user has implicit access to the catalog .
5087	Tests if user has implicit access to an enrollment API .
5088	Returns the URL for an entitlement .
5089	Drop a historical table .
5090	Export selected objects as CSV file .
5091	Returns a action that deletes the catalog id .
5092	Login to the server .
5093	Refresh the robot s maps .
5094	Refresh the robot .
5095	Download a map image from a URL .
5096	Refresh the persistent maps .
5097	Calculate the distance between two points .
5098	Convert a graph into a dictionary .
5099	Convert a matrix into a dictionary .
5100	Convert dict to dict
5101	Convert an adjacency matrix into an adjacency matrix .
5102	Return all edges that have the given type .
5103	Draw the graph .
5104	Add line_collecton_kwargs .
5105	Poisson random variates .
5106	Return current color .
5107	Fetch data from the queue
5108	The next event description .
5109	Set the number of servers .
5110	Simulate the simulation .
5111	Get the indices of the given edges .
5112	Plot the simulation .
5113	Clears the graph .
5114	Clears the data for the given edges .
5115	Return a shallow copy of the queue .
5116	Draw the network .
5117	Get agent data .
5118	Get the data for a queue .
5119	Initialize the queueing .
5120	Return the next event description .
5121	Resets the colors of all edges .
5122	Set the transition probabilities .
5123	Show the active edges .
5124	Show the type of an edge .
5125	Simulate n times .
5126	Start collecting data from the given queues .
5127	Stop the given queues .
5128	Return transition probabilities .
5129	Return the number of items in the cluster .
5130	Find the parent with s .
5131	Merge two sets .
5132	Generate a transition matrix .
5133	Generate a random graph .
5134	Generate a graph from a graph .
5135	Generate a minimal random graph .
5136	Get the name and docstrings of a class .
5137	Add a string to the start line .
5138	Process a file .
5139	Process a token .
5140	Add a non comment block .
5141	Add a comment .
5142	Make the index .
5143	Search for a comment .
5144	Load the given config block .
5145	Merge a list of templates .
5146	Render this object as a string .
5147	Generate the tar archive .
5148	Write a tarball to a file .
5149	Add a file to the tar archive .
5150	Parses a string into a NetworkJSON object .
5151	Merge a config dictionary into a new one .
5152	Merge two lists .
5153	Evaluate variables .
5154	Get a deep copy of a dict .
5155	Cast the given item to the correct type .
5156	Get install context
5157	Add install .
5158	Add uninstall .
5159	Add a script .
5160	Render the template .
5161	Get the IPv4 addresses for the given interface .
5162	Modify interface attributes .
5163	Remove an intermediate address from the given dictionary .
5164	Remove bridge from interface .
5165	Get the protocol representation of an interface .
5166	Return the IPv4 DNS servers for the given interface .
5167	Gets the DNS search for the given interface .
5168	Determine the HHT mode .
5169	Return the network protocol protocol protocol .
5170	Return the channel width .
5171	Create a client .
5172	Auto generate client files .
5173	Get install requirements . txt
5174	Retrieve events for this report .
5175	Retrieve facts for this certificate .
5176	Retrieve a fact by name .
5177	Retrieve the certificates for this certificate .
5178	Retrieve a single certificate .
5179	Retrieve the reports for this certificate .
5180	Base URL .
5181	Return the URL for the endpoint .
5182	Retrieve a list of nodes .
5183	Get a node by name .
5184	Returns an iterator of edges .
5185	Return the catalog for the given node .
5186	Aggregate event counts .
5187	Return an iterator over the inventory
5188	Connect to a remote server .
5189	Main application .
5190	Send a direct operation .
5191	Send a command to the master .
5192	Send a command to the master .
5193	Send a command to the master .
5194	Process the results .
5195	Main application .
5196	Configure the stack .
5197	Configure the database .
5198	Returns an application IIN .
5199	Process a point value .
5200	Process a point .
5201	Operate operation .
5202	Create a pdblp connection
5203	Delete the connection
5204	Parse the README file .
5205	Process the list of element names .
5206	Format the year data into a pandas dataframe .
5207	Format the output data into a DataFrame .
5208	Format a dataframe into a DataFrame .
5209	Return a QUERY string .
5210	Load reference data from BDP .
5211	Load data from bds .
5212	Calculate the bdh data .
5213	Return a pandas dataframe .
5214	Calculates an annual income dataframe .
5215	Return the active futures for a given ticker .
5216	Format a period ticker .
5217	Calculate the hours for the given tickers .
5218	Return the path to a histogram file .
5219	Refresh a file
5220	Save the data to a datetime
5221	Get the exchange info .
5222	Return market info for a given ticker
5223	Calculate currency pair .
5224	Calculate market time .
5225	Flatten an iterable .
5226	Convert an iterable into an iterable .
5227	Return a string representation of a dictionary .
5228	Load the info for a given cat
5229	Load a yaml file
5230	Convert number to hour format
5231	Create a folder .
5232	Return a list of all files in a directory .
5233	Return a list of all folders in a directory .
5234	Sort a list of files by modification time .
5235	Filter files by date .
5236	Return the modified time of a file .
5237	Get an interval from a session .
5238	Shift the start time .
5239	Return a new session open .
5240	Return a new session close .
5241	Calculate a Sessna .
5242	Return a new session with the given time .
5243	Convert datetime to datetime
5244	Return a string describing the missing information .
5245	Return the number of missing files .
5246	Update the log directory .
5247	Mark a function as public .
5248	Send a request .
5249	Context manager to create a new connection .
5250	Starts the session .
5251	Initialize the service .
5252	Initiate the Intraday API .
5253	Assemble one instruction .
5254	Assemble a sequence of lines into an assembly .
5255	Disassemble one instruction .
5256	Disassemble all instructions in bytecode .
5257	Return the fork name for a given block number .
5258	Parse an operand .
5259	Adjust the delay of a response .
5260	Return the number of memberness .
5261	Parses 10k and returns the result .
5262	Convert string to CamelCase
5263	Convert string to lowercase .
5264	Convert string to snake case
5265	Convert string to snakecase
5266	Convert string to lowercase .
5267	Convert string to snake case .
5268	Checks if input is a string or a list of strings
5269	Label generalized idxs .
5270	Get word start index
5271	Find the root of the string .
5272	Searches for the given node ids .
5273	Generalized word start
5274	Find the index of a node in the tree .
5275	Return the label of a node .
5276	Generates a sequence of terminal symbols .
5277	Query the ORacle to find out whether i and j .
5278	Create a graph of constraints for both and cannot - links
5279	Make a PMML pipeline .
5280	Convert a sklearn pipeline to pmml format .
5281	Takes a config dictionary and returns a dictionary of pymatl_pmml_pmml_pmml_pmml_config .
5282	Constructs the formset .
5283	Returns the full path to the success url
5284	Validate the formset .
5285	Handles GET requests .
5286	Handles POST requests .
5287	Returns the formset .
5288	Validate forms .
5289	Handles invalid forms .
5290	Returns a list of formsets .
5291	Handles GET requests .
5292	Handles POST requests .
5293	Add formset variables to the context .
5294	Get params for a given field .
5295	Returns the start date of the object
5296	Returns the end date of the object
5297	Get the first occurrence of the week .
5298	Add a queryset to the queryset .
5299	Returns a list of all the objects in the context .
5300	Context manager to create a new coloring .
5301	Parse a JSON file .
5302	Parse an RGB color file .
5303	Parse a JSON color file .
5304	Sanitize a color palette .
5305	Detect color support .
5306	Convert RGB color to ANSI color .
5307	Convert RGB color to ANSI color .
5308	Convert a hex color to RGB .
5309	Check that a hex string is valid .
5310	Translate RGB color to ANSI code .
5311	Translate a color name to ANSI code .
5312	Convert a modifier name to ANSI escape code .
5313	Translate color names to ANSI escape sequences .
5314	Apply colors to a string .
5315	Set the color palette .
5316	Sets up the color palette .
5317	Change the color palette .
5318	Format a string .
5319	Read an attribute from a USB device .
5320	Find the USB port number .
5321	Get device data .
5322	Get the humidity of the sensor .
5323	Interrupt the read .
5324	Read a file from a URI .
5325	Measure the memory of an object .
5326	Create a json object for the given repo .
5327	Retrieve the sha for a given repo_file from the repo_api .
5328	Get the uuid of a profile .
5329	Load raw data .
5330	Merge identities .
5331	Load enriched data
5332	Create panels .
5333	Configure logging .
5334	Get command line arguments
5335	Parse command line arguments .
5336	Get Kibiter version .
5337	Create dashboard .
5338	Upload the dashboard title
5339	Create the dashboard menu
5340	Remove the dashboard menu .
5341	Returns a list of menu entries
5342	Returns the dash menu
5343	Compose the mox for the given projects
5344	Compose gerrit projects
5345	Given a list of projects compose a git repository
5346	Recursively compose mailing_lists
5347	Recursively compose github repositories
5348	Recursively compose bugzilla data
5349	Compose the title for each project .
5350	Compose the projects json data .
5351	Autorefresh for studies .
5352	Execute the study .
5353	Retrieve identities for a given retention time .
5354	Return a list of all projects in a given backend .
5355	Convert project names into JSON format .
5356	Set a configuration parameter .
5357	Add a new configuration to the configuration .
5358	Retrieve the ES version of a given url .
5359	Execute a batch of tasks .
5360	Execute a batch of tasks .
5361	Execute initial load tasks
5362	Validate the configuration .
5363	Return a list of stdout .
5364	Return a list of stderr .
5365	Format a log record .
5366	Temporarily replace stdout .
5367	Compact a list of intervals into a comma separated list .
5368	Get storage service .
5369	Retry the storage check .
5370	Load a file from GCS .
5371	Load a GCS file .
5372	Checks if a file exists in GCS .
5373	Determine if a file exists in GCS .
5374	Check if a prefix exists in GCS .
5375	Determine if a file pattern exists in GCS .
5376	Check if outputs are present .
5377	Builds a parameter for a pipeline file .
5378	Build a pipeline command .
5379	Build a pipeline .
5380	Build command line arguments .
5381	Convert datetime to seconds .
5382	Builds a pipeline request .
5383	Delete one or more tasks .
5384	Return the status of the operation .
5385	Retrieves the field values for an operation input .
5386	Formats the task name .
5387	Convert suffix to docker characters .
5388	Return a sorting function for a task .
5389	Checks if a datetime is within the bounds .
5390	Get task from task directory .
5391	Determine logging command for logging .
5392	Return the path to the task directory .
5393	Build the environment variables .
5394	Builds a command based on input inputs .
5395	Get target target path .
5396	Generate a command to run the command .
5397	Returns a list of commands to run on the task .
5398	Return the DSub version .
5399	Retrieves the normalized normalized events .
5400	Parses an event .
5401	Get logging environment variables .
5402	Generate prepare environment variables .
5403	Returns a dictionary with environment variables .
5404	Returns a dictionary with the localizations .
5405	Build user environment variables .
5406	Return a list of actions to mount a mount point .
5407	Return the status of the operation .
5408	Return the status of the operation .
5409	Validate RAM in MB .
5410	Build the machine type .
5411	Build a machine configuration .
5412	Build an action .
5413	Given a list of statuses return a list of job tasks .
5414	Return a job provider
5415	Parse command line arguments .
5416	Return command line arguments for dstat provider .
5417	Format the task URI .
5418	Formats the logging URI for logging purposes .
5419	Parse command line arguments .
5420	Create a job_model from command line arguments .
5421	Get job metadata .
5422	Resolve task logging parameters .
5423	Waits until all jobs are completed .
5424	Waits until a job has finished .
5425	Return a list of all the tasks in the given jobs .
5426	Group tasks by job - id .
5427	Waits until all jobs have completed .
5428	Validate job arguments and task_params .
5429	r Return the name of a command .
5430	Rewrites a local filesystem path .
5431	Filters a list of mount_param_type .
5432	Build a logging parameter .
5433	Splits a string into two parts .
5434	Parse a Tasks file header .
5435	Return a list of task descriptors .
5436	Parse a list of label arguments .
5437	Convert arguments to job params .
5438	Validate input arguments .
5439	Convert a string to seconds .
5440	Get the variable name .
5441	Rewrites the URI with the given file provider .
5442	Parse a file provider from a URI .
5443	Validate uri .
5444	Parse a URI .
5445	Parse docker image URI .
5446	Parse a local mount URI .
5447	Parse a GCS URI .
5448	Make a job_model .
5449	Validate parameter name .
5450	Validate a bucket name .
5451	Convert string to label characters .
5452	Ensure all task parameters are set .
5453	Remove empty items from dict .
5454	Iterate over task_descriptors .
5455	Convert a task_id to an integer .
5456	Validate label and value .
5457	Create a Job from a YAML specification .
5458	Create a Job from a YAML string .
5459	Find task descriptor by task id .
5460	Returns a dictionary of environment variables for file_params .
5461	Get job and task params .
5462	Print the search criteria .
5463	Delete tasks .
5464	Get an action by id .
5465	Get an action by name .
5466	Get the environment environment environment .
5467	Retrieves the image image of an action .
5468	Return the event of the given operation type .
5469	Get the last update time .
5470	Prepare summary table .
5471	Returns a generator of job tasks .
5472	Convert the given row to the appropriate format .
5473	Trim a value to a maximum length .
5474	Formats a dictionary into a comma - separated string .
5475	Display a string representation of a string .
5476	Get a list of zones from a list .
5477	Parse an RFC 3339 date string .
5478	Get the full job id for an operation .
5479	Cancel a batch operation .
5480	Cancel a batch of ops .
5481	Retry API check .
5482	Retry an authentication check .
5483	Setup a service .
5484	Execute the API
5485	Evaluate the type of an argument .
5486	Return a jsonified response .
5487	Send a jsonrpc request .
5488	Return a JSON - RPC representation of the exception .
5489	Create a configuration object from a file .
5490	Return a configuration object .
5491	Create a configuration file .
5492	Write the config file .
5493	Validate config key .
5494	Expand mentions .
5495	Make a datetime aware datetime .
5496	Load an instance from a file .
5497	Discover and return a Cache object .
5498	Is the given URL?
5499	Add tweets to the cache .
5500	Get a list of tweets from the cache .
5501	Remove tweets from cache .
5502	Retrieve a timeline of tweets .
5503	Edit a configuration value .
5504	Return the relative datetime .
5505	Saves a screenshot of a screenshot .
5506	Take a screenshot of a screenshot
5507	Return an image name from a URL .
5508	Decorator for worker functions .
5509	Get the permissions of a path .
5510	Increment the number of releases .
5511	Register memory .
5512	Connect to the FTP server .
5513	Get number of bytes per second .
5514	Decorator to create a new context .
5515	Temporarily change locale .
5516	Append data to the stream .
5517	Set the limit .
5518	Clone this streamThrottle .
5519	Append data to the throttling .
5520	Check that the expected_codes match the expected_codes .
5521	Parse a directory response .
5522	Parse a list line .
5523	Upload a file to a destination .
5524	Convert values into Jenks breaks .
5525	Grab the image .
5526	Grab a bounding box .
5527	Return the current backend version .
5528	Open a Mapchete configuration
5529	Get the zoom level .
5530	Run process worker .
5531	Yields all process tiles from the pyramid .
5532	Batch processor .
5533	A batch processor .
5534	Execute the process .
5535	Read the contents of the tile .
5536	Write data to process .
5537	Get the raw output of a tile .
5538	Extract a subset of data .
5539	Read the tile .
5540	Open an input file .
5541	Calculate the hillshade .
5542	Extract contours from the tile .
5543	Clip an array .
5544	Clip an array to a vector .
5545	Convert raster to pyramid pyramid .
5546	Convert raster to pyramid .
5547	Determine zoom level .
5548	Validate config values .
5549	Get a hash of an object
5550	Get zoom levels .
5551	Snap a bounding box .
5552	Clip bounding box .
5553	Validate ZookeeperZoom .
5554	Get the raw parameters at zoom level .
5555	Get an element at zoom level .
5556	Filter element by zoom level
5557	Strip the zoom level from a string .
5558	Recursively flattens a nested structure .
5559	Recursively flattens a flat dictionary
5560	The bounds of the pyramid .
5561	Initialize bounds .
5562	Calculate effective bounds .
5563	Output the results to a file .
5564	Load the input reader .
5565	Return a dictionary of baselevels .
5566	Get parameters at zoom level
5567	Get the area at zoom level .
5568	Return the bounds of the area at zoom level .
5569	Generate zoom index file .
5570	Return the metadata for the raster
5571	Execute raster
5572	Validate that the object is valid .
5573	Read from the cache .
5574	Return a list of available output formats .
5575	Return a list of available input formats .
5576	Load an output writer .
5577	Load input reader .
5578	Return a driver from a file extension .
5579	Write output metadata .
5580	Extract contours from an array .
5581	Get a list of contour values .
5582	Create a mapchete pyramid .
5583	Get the path of a tile .
5584	Prepare the path for a tile .
5585	Check if the output data is valid .
5586	Convert raw data to a numpy array .
5587	Extract a subset of the dataset .
5588	Calculate the slope aspect of an image .
5589	Calculate the hillshade of an elevation .
5590	Return a buffered tile .
5591	Generate tiles from a bounding box .
5592	Generate tiles from a bounding box .
5593	Generator that yields tiles from a geometry .
5594	Return a list of tile objects that intersecting a tile .
5595	Convert the grid to a dictionary .
5596	Return a list of all neighboring tiles .
5597	Checks if the tile is on the edge .
5598	Execute raster
5599	Create InputTile object .
5600	Create a memory image for web .
5601	Run a mapchete server .
5602	Create a Flask app .
5603	Read a raster window .
5604	Read a rasterio array from an input file .
5605	Write a raster window to a file .
5606	Extract data from a raster .
5607	Resample a raster from a raster
5608	Convert a set of bounds to a range of coordinates .
5609	Convert tiles to affine shape .
5610	Determine if a tile is required .
5611	Create a memory file .
5612	Prepare a numpy array .
5613	Reproject a geometry .
5614	Segment a geometry .
5615	Read a vector window .
5616	Write a vector window to a vector window .
5617	Convert a geometry type to a correct type .
5618	Convert geom to single parts
5619	Execute raster
5620	Calculate the best zoom level .
5621	Convert tile to zoom level .
5622	Return True if path is a remote URL .
5623	Check if a path exists .
5624	Return absolute path .
5625	Return relative path
5626	Write params to S3 .
5627	Read a JSON object from a path .
5628	Decorator to register a hook .
5629	Returns the digest of the request .
5630	Handles incoming requests .
5631	Command line tool .
5632	Remove indentation from a list of lines .
5633	Return a list of section names .
5634	Convert a list of sections into a list of references .
5635	Convert a docstring into a docstring .
5636	Convert a module into a doc string .
5637	Returns the largest finite distance between all blocks .
5638	Calculate the temporal distance between each profile .
5639	Compute the probability density of the temporal distance .
5640	Remove all trips outside the buffer .
5641	Remove unnecessary shapes from the triplestore .
5642	Compute a set of pseudopotential connections for a given time period .
5643	Get the minimum visit time .
5644	Determines if an event can be infected .
5645	Make all views in the database .
5646	Create a colorbar .
5647	Write temporal networks by route type .
5648	Write a network to a file .
5649	Write GTFS to a zipfile .
5650	Remove columns from a DataFrame .
5651	Scan all footpaths for a given departure stop .
5652	Create a temporary file .
5653	Execute a statement
5654	Make a directory if it exists .
5655	Calculate the distances of the stop profile .
5656	Validate the day start time
5657	Create all views from a GTFS file .
5658	Make sure that there are null values in a table .
5659	Validate danglers .
5660	Prints the latitude and longitude coordinates in a table .
5661	Find the segments in a shapely shape .
5662	Return a list of segments .
5663	Retrieve a list of trips from the database .
5664	Interpolate shape times .
5665	Evaluate the earliest arrival time at the given time .
5666	Run the spreader .
5667	Add the walk distances to the database .
5668	Create a networkx network for a given route type .
5669	Create a networkx graph with stop to stop .
5670	Retrieve a temporal network from a network .
5671	Plot the temporal distance .
5672	Returns a list of pairs representing the transfer stops .
5673	Create a GTFS object from a GTFS directory .
5674	Returns the path to the main database .
5675	Get the distance between two trips .
5676	Returns the timezone name .
5677	Get all trips within a given time range .
5678	Returns a pandas DataFrame containing all stops in the given time range .
5679	Get all route shapes .
5680	Get the number of trips per day .
5681	Calculates the number of trips for a given time .
5682	Given a latitude and longitude return the nearest neighbour .
5683	Check if a trip is on a given day .
5684	Return the start time of the current process .
5685	Increment a day start time .
5686	Return a list of possible start times for a given date range .
5687	Get a stop
5688	Retrieve a list of trips for a given trip .
5689	Returns the start span of the given day .
5690	Returns a pandas dataframe from the dataframe
5691	Ensure dep_time is valid .
5692	Updates the given labels .
5693	Evaluate the walk .
5694	Create the table .
5695	Import the table .
5696	Copy the table to the database .
5697	Get the median latitude and longitude of the stops
5698	Calculate the centroid of the stops
5699	Write stats to a csv file .
5700	Return the distribution of a given column .
5701	Add the start and end dates to the stats table .
5702	Returns a DataFrame containing the route frequencies .
5703	Get vehicle hours by type .
5704	Scan the footpath for a given stop_id .
5705	Decorator to print the time of a method .
5706	Make sure the current user is a staff member .
5707	Retrieves the LOCKDOWN_FORM .
5708	Process the request .
5709	Redirect to the given request .
5710	Get a profile by ID .
5711	Get descriptor base path .
5712	Retrieve a JSON object from a data package .
5713	Return True if path is safe .
5714	Validate the data package . json file .
5715	Ensure the resource name is slugified .
5716	Validate profile .
5717	Deprecated . push_datapage .
5718	Pull a dataset from the backend .
5719	Convert a file name into a table name .
5720	Restore a table from a table name .
5721	Convert a list of schemas into a single resource .
5722	Restore resources from resources .
5723	Parses out of incomplete responses .
5724	Verify that gdb subprocess is attached .
5725	Write data to GDB .
5726	Get the response from gdb .
5727	Get a list of responses from the windows .
5728	Get a list of responses from the server .
5729	Entry point for gdb .
5730	Read a number of bytes from the stream .
5731	Advance the past string with gdb escapes .
5732	Parses a message into a dictionary .
5733	Extract the message and payload from the stream .
5734	Extract the message and payload from the result stream .
5735	Get the subscription path .
5736	Delete the subscription .
5737	Get or create a shared subscription .
5738	Enqueue a function as a task .
5739	Enqueue a task .
5740	Main entry point .
5741	Return the result of the task .
5742	Start a service .
5743	Update the running processes .
5744	Run parallel processing .
5745	Split a file into chunks .
5746	Return the ASN .
5747	Return the ASN block for an IP address .
5748	Return the history of a given IP address .
5749	Aggregate the history of a given IP address .
5750	Download a URL to a file .
5751	Check if a file is already downloaded .
5752	Convert string to boolean
5753	Returns the URL for a page .
5754	Template tag .
5755	Returns a dictionary of regressions for the distributions .
5756	Strip a version suffix from a version string .
5757	Determine the number of versions of package_descriptors .
5758	Calculates the number of packages in the given repositories .
5759	Returns a dictionary of job urls for the given targets .
5760	Configure the C ++ jobs .
5761	Configure a CI job .
5762	Write a Groovy script to a file .
5763	Sort a set of packages in a topological order .
5764	Unarmor pem .
5765	Decrypt the encrypted data using the encryption algorithm .
5766	Sets up the encryption cipher .
5767	Interpret an RSA key blob .
5768	Interpret a dsa key blob .
5769	Load an Advapi3232 key from a key object .
5770	Verify a PKCS1 public key .
5771	Verify the signature of the given data .
5772	Verify the data using bcrypt .
5773	Sign data using DSA private key .
5774	Sign data using ecdsa .
5775	Sign data using AdvAPI32 .
5776	Sign data using bcrypt .
5777	Encrypt data .
5778	Decrypt data using bcrypt .
5779	Decrypt ciphertext using Advapi3232 .
5780	Obtains the credentials for this client .
5781	Create secbuffer descriptors .
5782	Select data from the socket .
5783	Read exactly exactly num_bytes .
5784	Select a write .
5785	Read data from the socket .
5786	Read data from the BIO .
5787	Encrypt data .
5788	Encrypt data using bcrypt .
5789	Handle OpenSSL error .
5790	Get an OpenSSL error .
5791	Extract certificates from the system .
5792	Calls a certificate callback .
5793	Retrieves the details of a certificate .
5794	Extract an error from an error .
5795	Convert a CF dictionary into a dictionary .
5796	Handles SSL errors .
5797	Get the description of a function .
5798	Find all sections in the md_ AST .
5799	Recursively walk the docstrings of a function .
5800	Return the path to the system path .
5801	Extract certificates from the system .
5802	Convert a filetime to a timestamp .
5803	Extract certificates from a server handshake .
5804	Detect a client authentication request .
5805	Extract DH parameters length from handshake data .
5806	Parse an Alert from an Alert .
5807	Parses and returns the session information .
5808	Parse TLS records .
5809	Parse a handshake message .
5810	Parse HelloHello extensions .
5811	Raises a TLSVerificationError if the given hostname is valid .
5812	Raises a TLSVerificationError if the certificate is not available .
5813	Try to detect the other protocol .
5814	Try to decode a byte string .
5815	Read data from socket .
5816	Read remaining bytes from socket .
5817	Handle a write callback .
5818	Retrieve the path to a CA path .
5819	Map a set of oids to a set of ids .
5820	Check if ca_path needs to be updated .
5821	Return a Version object .
5822	Create a new VCL
5823	Return a dict representation of this role .
5824	Add a descriptor .
5825	Make a PATCH request .
5826	Ensure that the query is valid .
5827	Execute a dataset search .
5828	Perform a PIF MultiSearch request .
5829	Check for rate limiting .
5830	Create a new data view .
5831	Update a dataview .
5832	Get a data view by ID .
5833	Create an ml configuration from a list of datasets .
5834	Create an ml configuration .
5835	Convert the result blob to a configuration object .
5836	Get the status of the ml configuration .
5837	Returns the Tsne instance for the given data view .
5838	Retrieve data analysis for a given data view .
5839	Submit a prediction request .
5840	Check the status of a predict request .
5841	Submit a design run .
5842	Get the status of a design run .
5843	Retrieves design results for a given run .
5844	Get a DataView by ID .
5845	Kill a design run .
5846	Load a yaml file
5847	Load credentials from a file .
5848	Get the preferred credentials for a CITRINATION_FILE .
5849	List files in a dataset .
5850	Returns the number of files matching a glob .
5851	Get the files in a dataset .
5852	Get a dataset file from a dataset .
5853	Retrieves a PIF .
5854	Create a new dataset .
5855	Update a dataset .
5856	Create a dataset version .
5857	Get the available columns for the given datasets .
5858	Generate a search template from the given dataset ids .
5859	Prune a search template .
5860	Convert obj to camel case .
5861	Convert dict to camel case
5862	Validate an ml template .
5863	Add an organization course .
5864	Remove an organization course .
5865	Validate course key .
5866	Validate organization data .
5867	Inactivate an organization .
5868	Activates an organization course relationship .
5869	Inactivate an organization course .
5870	Fetch the course courses for the given organization .
5871	Fetch all course organizations .
5872	Serialize an organization .
5873	Deserialize an organization from a dictionary .
5874	Return True if image_node is a valid filename .
5875	Return image size
5876	Check if the link tag is a link tag .
5877	Retrieve a local image .
5878	Returns a Video object for the given node .
5879	Store an image .
5880	Get the content of siblings .
5881	Return true if the link is highlink density .
5882	Return a list of nodes to check if they are not .
5883	Cleans up the content of the article .
5884	Returns the title of the article .
5885	Returns the canonical link of the article .
5886	Shutdown the network .
5887	Extract the content from a URL .
5888	Calls the crawler .
5889	Convert string to unicode .
5890	Convert string to unicode .
5891	Convert string to str
5892	Add the upload URL to the admin .
5893	Handles upload requests .
5894	Render a template .
5895	Return the form field .
5896	Render the toolbar .
5897	Returns the URL for the rendition image .
5898	Check to see if a mdrun is finished
5899	Try to get double precision or double precision .
5900	Return the commandline .
5901	Run OpenMP command .
5902	Start smpd
5903	Return a list of all parts of a part .
5904	Run grompp using grompp .
5905	Convert a list of dp directories into a string .
5906	Create a GOMP file .
5907	Edit a txt file .
5908	Create a new NDX object .
5909	Parse NDXGROUP output .
5910	Delete all frames .
5911	Get the gmx residue id .
5912	Combine index files .
5913	Concatenate the output .
5914	Process a command .
5915	Process a range selection .
5916	Translate a residue name into a dictionary .
5917	Check the output of Gromacs .
5918	Return the path to the output file .
5919	Center the trajectory .
5920	Fit the model .
5921	Strips the input and returns the transformed data .
5922	Create a logger .
5923	Get a GMX configuration parser .
5924	Create Gromacs . gromacs wrapper .
5925	Check if any configuration directories are set up .
5926	Return a list of tool names .
5927	Return a dictionary with the configuration .
5928	Return the path for the given option .
5929	Get the logging level of a log file .
5930	Convert a filename to a collection .
5931	Scale dihedrals .
5932	Scale impropers .
5933	Convert string to python type
5934	Convert an array to int64 .
5935	Convert an irray to python types .
5936	Parse colour specification .
5937	Transform a set of command - line arguments .
5938	Print help for this command .
5939	Create a dictionary with the given arguments .
5940	Build the argument list .
5941	Return a copy of the arguments .
5942	Get Gmx doc string from Gmx .
5943	Convert string to numpy array
5944	Check if an object is a stream .
5945	Convert an amino acid code to an amino acid code .
5946	Context manager to temporarily change working directory .
5947	Unlink a file .
5948	Remove legend .
5949	Return the filename .
5950	Verify that a file exists .
5951	Convert datetime to string .
5952	Start logging .
5953	Stop logging .
5954	Factory function .
5955	Return a list of executables .
5956	Load v4 tools .
5957	Merge multiple files into one .
5958	Break an array by a given threshold .
5959	Return the masked array .
5960	Compute a collection of timeseries
5961	Set the correlation parameters .
5962	Parse a text file .
5963	Plot the data .
5964	Build a topology from a structure .
5965	Build the main index file .
5966	Retrieve the VDXradii database .
5967	Solve a structure using solver .
5968	Run energy minimization .
5969	Schedule the energy distribution .
5970	Starts the MD relaxation .
5971	Create an MD file .
5972	Generate submission scripts .
5973	Generate a job array .
5974	Determine if a scriptname is a mine .
5975	Convert an atom number to atom
5976	Calculate total number of regular pixels from a mask .
5977	Generate a mask of a circular array .
5978	Create blurring mask from mask and shape .
5979	Calculate the edge pixels from a mask .
5980	Bins a 2D array using bin_up_factor .
5981	Setup the figure .
5982	Output a matplotlib numpy array .
5983	Output a subplot array to a file .
5984	Create image shape tag from image shape .
5985	Return the shape of the inversion PSF shape .
5986	Calculates the bulge tag tag of alignments .
5987	Compute the deflections at the given plane_index .
5988	Scales the deflection stack from a plane .
5989	Compute a grid stack from a given deflection stack .
5990	Calculates the regularization matrix from the given coefficients .
5991	Calculates the regularization matrix based on pixel indices .
5992	Plot an array .
5993	Get the minimum and maximum of an array .
5994	Sets a colorbar .
5995	Plot a mask .
5996	Plot the border of a mask .
5997	Plots points in the grid .
5998	Plot a grid .
5999	The mapper_matrix of the grid .
6000	Return a list of regular pixel indices .
6001	Return a list of pixel indices corresponding to each pixel .
6002	Convert regular grid to pixel coordinates .
6003	Convert grid to pixel coordinates .
6004	Set random seed .
6005	Generate a Poisson noise .
6006	Load CCD data from a FITS file .
6007	Load an image .
6008	Load a noise map from an image .
6009	Load the background noise map .
6010	Load a poisson noise map .
6011	Load a PSF .
6012	Load an exposure time map from an exposure time map .
6013	Load the background sky map .
6014	Load the positions from a file .
6015	Output a list of positions to a file .
6016	Return the noise map .
6017	Convert absolute signal to noise map .
6018	Create a NoiseMap from a weight map .
6019	Create a NoiseMap from an inverse_noise_map .
6020	Simulate a PSF .
6021	Create a PSF from a FITS file .
6022	Create a new TimeSeries from a FITS file .
6023	Return a new PSF with the transformed array .
6024	Convolve an array .
6025	Create a geometry from a grid .
6026	Create a geometry from a grid .
6027	Construct Voronoi from pixel centers .
6028	Return the neighbors of a pixelization .
6029	Set the y - axis labels for the given units .
6030	Interpolate a grid .
6031	Create an unmasked image from a PSF and unmasked image .
6032	Create a GridStack from a mask and shape .
6033	Create a GridStack from shape and subgrid sizes .
6034	Create a GridStack from mask shape and shape .
6035	Apply a function to each stack .
6036	Convert 1D array to 2D array .
6037	Convert a 1D array to a scaled square array .
6038	The y - axis of the y - axis .
6039	Indices of the x axis .
6040	Convert sub_data into regular data .
6041	Convert the regular grid to a sparse matrix .
6042	Convert sparse matrix to unmasked sparse matrix .
6043	Convert regular expression to sparse matrix .
6044	Create a padded regular grid from shape and pixel scale .
6045	Convert padded_image_1d .
6046	Convert a padded array to a 2D array .
6047	Map padded_array_1d to a 2D array .
6048	Reconstruct grid stack from grid_stack
6049	Decorator to set the default values .
6050	Run the optimizer .
6051	Map a 2D array to a 2D array .
6052	Convert sparse_sparse_sparse_sparse_sparse to full pixel indices .
6053	Convert mask to sparse matrix .
6054	Convert regular_to_sparse to a sparse matrix .
6055	Convert unmasked_sparse_sparse_sparse_sparse to a sparse grid .
6056	Resizes a 2D array from a 2D array .
6057	Create a 2D array from 2D array_2d .
6058	Bins an array using mean_up_factor .
6059	Write a 2D FITS array to a FITS file .
6060	Create a 2D numpy array from a FITS file .
6061	Convolve a mapping matrix .
6062	Calculate the mass within a circle .
6063	Calculate the mass within an ellipse .
6064	Calculate the mass integral of the given axis .
6065	Computes the density between two Circuli .
6066	Rescaled radius
6067	Calculates the convergence density from a grid
6068	Calculate the integral of a grid .
6069	Compute the intensity at a given radius .
6070	Return the sersic constant .
6071	Calculate the luminosity within a given radius .
6072	Calculate the luminosity within an ellipse .
6073	Return the mass of a given circle .
6074	Return the mass of the ellipse in units .
6075	Calculate einstein radius in units .
6076	Calculate einstein mass in units .
6077	Calculate hyper - noise noise from contributions .
6078	Convolve an image and blurring frame .
6079	Compute the intensities of each galaxies in a grid .
6080	Returns the convergence of the given grid .
6081	Calculate the potential potential of a grid .
6082	Compute the deflections of all galaxies in a grid .
6083	Calculates the deflections of all galaxies in a grid .
6084	Creates a blurred image from 1d images .
6085	Get the unmasked blurring image from a padded grid stack .
6086	Return an unmasked image from a padded grid stack .
6087	Calculate the contributions of each model in the hypervisor .
6088	Scales the noise map from the given contribution_maps and contribution_maps .
6089	Factory function for lens and tracer .
6090	Decorator for transform functions
6091	Cache a geometry profile
6092	Return the cosine of the x - axis .
6093	Calculate the cosine angle from the grid angles .
6094	Compute a matrix corresponding to a regular grid .
6095	Convert regular grid to pixel coordinates .
6096	Calculate the VORonoi from a gridded grid .
6097	Calculate luminosity within a circle .
6098	Calculate the luminosity within an ellipse .
6099	Calculate the luminosity integration .
6100	Calculate intensities from grid_radii .
6101	Calculate the intensities from the grid_radii .
6102	Calculate intensities from grid_radii .
6103	Return the luminosity of the galaxies within the given radius .
6104	Return the luminosity of the galaxies in the given units .
6105	Return the mass of all galaxies within the given radius .
6106	Return the mass of all galaxies in the given units .
6107	Trace the grid stack to the next plane .
6108	The y - axis of the grid .
6109	Indices of the x axis .
6110	Return an unmasked image from a PSF .
6111	Trace the plane to the next plane .
6112	Create an array from a single value .
6113	Zoom the array with the specified buffer .
6114	Return a new array with the same shape as the array .
6115	Fit lens_data using sensitivity_matrix .
6116	Create a mask from a shape and pixel scale .
6117	Create a circular image .
6118	Create an annular image .
6119	Create an anti - annular image .
6120	Create an elliptical object from a shape .
6121	Create an ellipticalAnnular object .
6122	Zoom the region .
6123	Return an instance of a Galaxy .
6124	Return a copy of the prior model for the given arguments .
6125	Plot an image .
6126	Normalize the requested path to the root of the source tree .
6127	Return True if filename is contained in the given directory .
6128	Build a Backend object .
6129	Builds an sdist .
6130	Perform a GET request .
6131	Convert frames to video .
6132	Return a JSON representation of the Compile .
6133	Create a FileMetadata from a string .
6134	Create a File from a file .
6135	Fix documentation of child classes .
6136	Add a model string .
6137	Add a model file .
6138	Sets the default simulation parameter .
6139	Returns whether the simulation is running .
6140	Wait for the simulation to stop .
6141	Determine whether the input device is in - out .
6142	Add new data .
6143	Add samples to the DSP capture .
6144	Called by DSP_TSP_T .
6145	Add time to DSP_toc .
6146	Calculate the BRF signal .
6147	Calculate the frequency of a signal .
6148	Finds the roots of a list of cpx roots .
6149	Calculates the firwin probability of a signal .
6150	Calculate the firz filter .
6151	Calculate the firz filter .
6152	Calculate the remov filter .
6153	Calculate the firz filter .
6154	Calculate the position of the center of a loop .
6155	Calculate the cruise control flow .
6156	Calculate the FFT of stereo FM
6157	define a FITS header
6158	This function is used to fix the filter coefficients .
6159	Define an IIRIS filter coefficients .
6160	Plot an eye .
6161	Scatter x and y .
6162	Generate a MPSK signal .
6163	Compute QPSK using QPSK .
6164	Compute and return an incidence matrix .
6165	Compute the square root of the square root .
6166	Calculate the PSD .
6167	Convert a 32 - bit integer to integers .
6168	Convert a bin to an integer .
6169	Filter the signal .
6170	Filter signal .
6171	Display the freqresp .
6172	Select the lock manager .
6173	Decorator for celery functions .
6174	Resets the lock .
6175	Initialize celery .
6176	Iterate over chunksize .
6177	Apply a function to an array .
6178	Apply a function to an array .
6179	Merge ph_times_par_params .
6180	Merge ph_times_d and eigenvectors
6181	Load a PSF file
6182	Generate a hash of the dictionary .
6183	Validate git path
6184	Get git version .
6185	Check status of clean status
6186	Get the last commit line
6187	Get the last commit of a git path
6188	Print a summary of a commit .
6189	Calculate the fnames for aromo fnames .
6190	Set model parameters .
6191	Volume of the cylinder .
6192	Generate a list of particles .
6193	Add a number of particles to the list .
6194	Return the datafile corresponding to a hash .
6195	Get the random state of a group .
6196	Compact name .
6197	Return a dictionary of numeric parameters .
6198	Print the size of each particle .
6199	Simulate the diffusion time .
6200	Calculate timestamps for the time series .
6201	Simulate the simulated time stamps .
6202	Merge the data into a single matrix .
6203	Calculates the energy exchange rates from E_value_tot .
6204	Compute the diffusion coefficient of a set of particles .
6205	Return a list of slices corresponding to each population .
6206	Calculate the hash_d .
6207	Merges D and A timestamps .
6208	Save the signal to an HDF5 file .
6209	Print the attributes of a given node .
6210	Print all children of a given group .
6211	Train the model .
6212	Generate an XYZ plane .
6213	Load the scene .
6214	Load a GLTF meta file
6215	Load a GLTF file .
6216	Check if buffers exist .
6217	Prepare VBOInfo for VBOInfo .
6218	Returns the bounding box of the primitive .
6219	Determine if this component is equal .
6220	Create a dtype and return it .
6221	Set the current position .
6222	Calculate yaw and pitch .
6223	Look at the current position of the scene .
6224	Return a 3D rotation matrix .
6225	Moves the current state .
6226	Rotate the robot .
6227	Translates a string .
6228	Initialize the window .
6229	Draw the scene .
6230	Draw a bounding box .
6231	Applies a set of meshes to the current mesh .
6232	Calculate the area of the scene .
6233	Return a 3D VAO .
6234	Starts playback .
6235	Return the current position .
6236	Set the current position .
6237	Draw the background color images .
6238	Add a point light .
6239	Render the light buffer .
6240	Render the debug shader .
6241	Combine the shader .
6242	Load shader program .
6243	Load a texture from the image .
6244	Draw the scene .
6245	Set the simulation time .
6246	Draw the simulation .
6247	Get a program by label .
6248	Get a texture from the project .
6249	Retrieves the effect class .
6250	Create a projection matrix .
6251	Create a rotation matrix .
6252	Create a normal matrix .
6253	Return the effect template name .
6254	Return the root path of the module .
6255	Load the data from the file .
6256	Return a Finder object .
6257	Find a path by path .
6258	Update the projection matrix .
6259	Draw the scene .
6260	Calculate the global bounding box of each mesh .
6261	Swap the buffers .
6262	Resize the window .
6263	Check glfw version .
6264	Create a 2D quadrilateral .
6265	Translate the buffer format to a string .
6266	Return the stop time .
6267	Set the time .
6268	Resolve a file descriptor .
6269	Resize the image .
6270	Swap the buffers .
6271	Create a 2D vector of a cylinder .
6272	Swap the buffers .
6273	Load the resource .
6274	Load resources from the pool
6275	Resolve loader class .
6276	Get the loader for the given resource .
6277	Resize the widget .
6278	Draw the scene .
6279	Clears the foreground .
6280	Clears the color values .
6281	Handle keyboard events .
6282	Rotate the screen .
6283	Set default viewport .
6284	Start the music .
6285	Toggle playback .
6286	Return True if the file supports file extension .
6287	Get a track by name .
6288	Find all commands in a directory .
6289	Update object attributes .
6290	Add a program directory .
6291	Add a texture directory .
6292	Add a directory .
6293	Render a program .
6294	Apply the transform to the program .
6295	Index the buffer .
6296	Returns an instance of the Vertex instance for the given program .
6297	Release all buffers .
6298	Draw the program .
6299	Parse a dotted path .
6300	Returns a list of all resources in the package .
6301	Returns the list of resources for the effect .
6302	Add a new effect package .
6303	Retrieves an effect package by its name .
6304	Find an effect class by path .
6305	The effect classes of runnable effects .
6306	Load the effect package .
6307	Load the effect classes .
6308	Load the effect module .
6309	Draw the animation .
6310	Load the texture .
6311	Create a ShaderSource from a single source .
6312	Create a ShaderSource from a separate program .
6313	Print the contents of the file .
6314	Load the resources into this object .
6315	Add resource descriptors to pool .
6316	Reload all programs .
6317	Calculates the components of an image .
6318	Find the last occurrence of a path .
6319	Try to import the project .
6320	Create an entrypoint .
6321	Return the path to the template directory .
6322	Resolve loader class .
6323	Encodes text into binary form .
6324	r Train the model .
6325	Convert a string into a human - readable form .
6326	r Import sentences from a corpus .
6327	r Get the number of occurrences of a given ngram .
6328	Add words to the corpus .
6329	Import words from a GNS3 file .
6330	r Calculates the frequency of a term .
6331	r Encode a word .
6332	r Decode a string into a string .
6333	Calculate the distance between src and src .
6334	Compute the distance between src and tar .
6335	Simulate the distribution of the distribution .
6336	Distribute src to a tar .
6337	Calculate Bayesian Distribution Distribution
6338	Compute the Tversky distance between the source and source .
6339	Compute the LCSSequence between source and tar .
6340	r Compute the similarity of a source .
6341	Computes the similarity between the source and target .
6342	r Returns a list of all words in the corpus .
6343	r Return the raw text of the corpus .
6344	r Compute the IDF of a term .
6345	Stem a word .
6346	Determine the language for a language .
6347	Rename a language term .
6348	Apply final rules to the phonetic .
6349	Expand a string into a string .
6350	Return a string with the leading and leading spaces .
6351	Return the phonetic numbers .
6352	Remove duplicates from a string .
6353	Normalize language attributes .
6354	Applies rules to phonetic rules .
6355	Return the language index for a language code .
6356	Calculate the distance between src and src .
6357	Encode a word .
6358	Compute the lcsstr between src and dst .
6359	r Compute the similarity between src and tar .
6360	Calculate the needleman Wunsch algorithm .
6361	Calculate the similarity between the tar and tar .
6362	Encode a word .
6363	Compute the distance between src and dst .
6364	Convert to a tuple .
6365	Return a dictionary representation of the function .
6366	Return the population s population .
6367	r Returns the precision .
6368	r Calculates the precision gain .
6369	r Return the recall .
6370	r Calculate the sensitivity of this element .
6371	r Calculates the fraction of the terminal .
6372	r Calculates the accuracy .
6373	r Return the accuracy gain .
6374	r Compute the log mean .
6375	Returns the stem of a word .
6376	Calculate the distance between src and src .
6377	Simulate a tensor .
6378	Calculate the distance between a source and target .
6379	Calculate the distance between a source and a matrix .
6380	Calculate the Jacobian of a matrix .
6381	Calculate the Jaroinkler distribution .
6382	Simulate a Hamming .
6383	Calculate the fingerprint of a word .
6384	Calculate the mean similarity of a collection .
6385	Calculate pairwise similarity statistics .
6386	Return the number of characters in the R1 prefix .
6387	Return the remainder of a term .
6388	Return True if the term ends in a short syllable .
6389	Return True if term is a short word .
6390	Return True if the term contains a vowel .
6391	Encode a single word .
6392	Get QGrams from a tar archive .
6393	Compute the distribution distance between src and tar .
6394	Simulate Levenshtein .
6395	Calculate the fingerprint of a word .
6396	Simulate Minkowski .
6397	r Compute the similarity between the source and target .
6398	Calculate the distance between a tar .
6399	Encode a word .
6400	Stem a word .
6401	Remove the word from the word .
6402	Generate a fingerprint from a phrase .
6403	Return a list of feature names .
6404	Get a feature from a vector .
6405	Compares two features .
6406	Compute the similarity between src and tar .
6407	r Compute the mean of a list .
6408	r Compute the log - mean of a list .
6409	r Compute the mean of a set of numbers .
6410	r Compute the Lehmer mean .
6411	r Mean mean .
6412	Mean mean .
6413	Calculate the mean of a list of numbers .
6414	Calculate mean .
6415	Calculate the median of a list .
6416	r Compute the variance of a given number of samples .
6417	Stem a word .
6418	Simulate an Editex .
6419	Compute the distance between src and tar .
6420	Read a file .
6421	Encode a word .
6422	Strip punctuation from a word .
6423	Calculate the distance from a tar archive .
6424	r Compute the time - domain
6425	Compute the Tanimoto coefficient of the time series
6426	Simulate a Sift4 file .
6427	Compute the distance between src and tar .
6428	Encode word .
6429	Stem a lowercase word .
6430	Compute the similarity between src and dst .
6431	Distance between src and tar
6432	Encode a word .
6433	Compute an eudex hamming distance from a tar archive .
6434	Compute eudex distribution using Eudex
6435	Simulate an Eudex .
6436	Generate Fibonacci numbers .
6437	Calculate absolute distance between source and target .
6438	Compute the distance between src and src .
6439	Calculate Euclidean distance between source and target .
6440	Calculate Euclidean distance between a tar .
6441	Calculate the Euclidean distance from a tar archive .
6442	Determines if the word is a k .
6443	Determine if a word has a suffix .
6444	Determines if the word ends with the suffix .
6445	Determines if the word ends with the suffix .
6446	Determine whether the word is a boundary .
6447	Stem a word .
6448	Compute the distance between src and tar .
6449	Get Pylint color .
6450	Get the color of a score .
6451	Calculate flake8 color .
6452	Return the distance between src and tar .
6453	Compute the distance between src and tar .
6454	Stem a word .
6455	Distribute an MLIPNS dataset using MLIPNS
6456	Compute the similarity of a source using a similarity function .
6457	Calculate the distance between src and src .
6458	Calculates the degree of a given term .
6459	Return True if the term contains a vowel .
6460	Checks if the given term ends in the givencons .
6461	Return True if the term ends in CVC .
6462	Filter out the y - axis of y .
6463	Print usage of functions .
6464	Print usage information .
6465	Return the size of the terminal .
6466	Return color color .
6467	Return curses value .
6468	Wrap a CSI value .
6469	Consume data from a stream .
6470	Consume a line from a line .
6471	Update self . points .
6472	Calculate the color ramp for a given size .
6473	Convert size to human readable form .
6474	Apply function .
6475	Generate a line between two points .
6476	Set text at point .
6477	Render the screen .
6478	Generate a numpy array with normalised coordinates .
6479	Return a generator that yields all the points in the screen .
6480	Return the null height of the screen .
6481	Return the size of the memory .
6482	Load a class by path .
6483	Process pagination values .
6484	Return a copy of the field values .
6485	Perform a search .
6486	Search for courses .
6487	Translates the results into a dictionary .
6488	Get the filter field .
6489	Process field queries .
6490	Process filter_dictionary .
6491	Process the exclude dictionary .
6492	Process facet_terms .
6493	Get mapping for index and doc_type .
6494	Set the mappings for an index .
6495	Log indexing errors .
6496	Get the mappings for a given document type .
6497	Index a document .
6498	Remove documents from the index .
6499	Search Elasticsearch for documents .
6500	Perform a search .
6501	Perform course discovery .
6502	Return all strings in a dictionary .
6503	Find matches in a list of strings .
6504	Decorator for match_word .
6505	Add a property to the results field .
6506	Process a search result .
6507	Return the excerpt of the search .
6508	Generate a list of field filters .
6509	Set the search environment .
6510	Parse name file .
6511	Set a name line .
6512	Set a country name .
6513	Return the most popular gender .
6514	Get the gender for a given country .
6515	Print a message to stdout .
6516	Execute tools .
6517	Execute the given collector .
6518	Return True if path is excluded .
6519	Return True if path is an excluded directory .
6520	Iterate over all files matching the given filters .
6521	Iterate over the directories found in the base directory .
6522	Add one or more issues .
6523	Return the number of issues in this repository .
6524	Return a list of all the issues in this repository .
6525	Return a list of issues grouped by the given criteria .
6526	Parse a TOML content into a dictionary .
6527	Return a dictionary of all available tools .
6528	Return a dictionary with all the report information .
6529	Return a dictionary of all extenders .
6530	Purge the config cache .
6531	Retrieves the user s configuration file .
6532	Retrieves the local configuration for a project .
6533	Get project configuration .
6534	Merge two lists .
6535	Merge two dictionaries .
6536	Print an error message .
6537	Temporarily modify sys . path .
6538	Compile a list of masks .
6539	Returns True if the given target matches the given masks .
6540	Read a file .
6541	Parse a Python file .
6542	Called when a tool is finished .
6543	Execute a command .
6544	Terminate the server .
6545	Is the connection state?
6546	Connect to a host
6547	Waits for an input field .
6548	Moves the cursor to the specified position .
6549	Fills a field .
6550	Create an instance from a function .
6551	Create an instance from a list of configurations .
6552	Checks the given solution .
6553	Fix a variable value .
6554	Flip a variable .
6555	Return a shallow copy of the function .
6556	Projects a constraint onto the constraints .
6557	Assert that penaltymodel factory is available .
6558	Add a constraint .
6559	Build a binary quadratic model .
6560	Create a binary quadratic model from a 1sat constraint .
6561	Create a binary quadratic model from 2sat .
6562	Iterate over the complete graph .
6563	Load a CNF problem from a file .
6564	Create an AND gate .
6565	XOR operator .
6566	Create a halfadder gate .
6567	Create full ADER gate .
6568	Return a random xOR problem .
6569	Return True if the signature matches the given arguments .
6570	Decorator to add a function to the last argument .
6571	Register a chooser .
6572	Register a simple chooser .
6573	Format the audio data .
6574	Formats the given parameters .
6575	Create an instance from a list of dicts .
6576	Populates the fields with the given data .
6577	Create a new PandoraModel from a dictionary .
6578	Return a string representation of this object .
6579	Send command to stdin .
6580	Ensure playback command is started .
6581	Play a song .
6582	Play a station .
6583	Gets the stdout .
6584	Display the station selection menu .
6585	Execute the command
6586	Retry decorator .
6587	Iterate over playlist items until stop .
6588	Prompt the user to enter an integer .
6589	Open the working area .
6590	Put a package into the working directory .
6591	Receive results from the dispatcher .
6592	Poll the dispatcher .
6593	Receive one result from the dispatcher .
6594	Run multiple events .
6595	Poll for the device .
6596	Receive one item from the queue .
6597	Receive all results .
6598	End all results .
6599	Convert a dictionary to a list of lists .
6600	Open the file .
6601	Put a package into the database .
6602	Load the result from a package .
6603	Return the full path of a package .
6604	Return the relative path of the result .
6605	Return the full path of the result .
6606	Submit multiple jobs .
6607	Poll for cluster processes .
6608	Wait for cluster processes to finish .
6609	Mark the runprocids as finished .
6610	Returns the array and the number of arrays for the given branchName
6611	Put a task into the dropbox .
6612	Put multiple tasks into the dropbox .
6613	Waits for the drop box .
6614	Receive one item from the drop box .
6615	Receive all data from the drop box .
6616	Receive all the results .
6617	Expand a path configuration .
6618	Expand a path tuple .
6619	Poll for running processes .
6620	Wait for all running processes to finish .
6621	Returns the vector at the given branchName
6622	Configure a component
6623	Download a tarball from the given url into a tarball .
6624	Return a list of available versions .
6625	Return a list of tags available for this component .
6626	Return a list of available branches .
6627	Decorator to raise an exception if the request is not available .
6628	Unpublish a version .
6629	Read settings from a list of files .
6630	Get a config value by path .
6631	Set a configuration value .
6632	Iterate over the last item .
6633	Validate source directory name .
6634	Display outdated modules .
6635	Return True if path is ignored .
6636	Publish a tarball to the system .
6637	Unpublish this resource .
6638	Get a script from the description .
6639	Run a script .
6640	Determine whether a dependency has a dependency .
6641	Determines if a target has a dependency .
6642	Iterates over the dependencies of this component .
6643	Returns the full path of the extraIncludes .
6644	Return a list of GitCloneVersion objects .
6645	Merge two dictionaries .
6646	Recursively merges a dictionary .
6647	Return the base target spec for this target .
6648	Load the configuration from the application .
6649	Return True if target_name is inherited from this hierarchy .
6650	Execute a command .
6651	Build a component .
6652	Find a program in the builddir .
6653	Start a program .
6654	Prune the cache directory .
6655	Decorator to prune the cache .
6656	Calibration for eb_prior
6657	Calculate the inbag from the given forest .
6658	Perform the core computation .
6659	Private function to compute bias correction
6660	Compute the error of a random forest .
6661	Generate a new SSL certificate .
6662	Generate CSR for given domain .
6663	Get the certificate expiration date
6664	List all expired certificates
6665	Verify a certificate chain .
6666	Recursively merge a dictionary .
6667	Check release version .
6668	Populate the global variables .
6669	Decorator to mark a function as a task .
6670	Decorator to deploy a function .
6671	Return True if path is a local file
6672	Return True if path is a directory
6673	Return True if path is a link .
6674	Get the owner of a path
6675	Return the umask umask .
6676	Upload a template to the remote host .
6677	Get the MD5sum of a file .
6678	Return a list of uncommented lines .
6679	Get the modification time of a file .
6680	Copy a file or directory to another .
6681	Move source to destination .
6682	Remove a path
6683	Require a file .
6684	r Check for new release
6685	Update yum
6686	Check if a package is installed .
6687	Install packages .
6688	Install a group .
6689	Uninstall a group .
6690	List repositories .
6691	Synchronize the current environment .
6692	Invalidate static media upload .
6693	Get or create a bucket .
6694	Generate static interface .
6695	Upgrade the distribution
6696	Check if a package is installed
6697	Install packages .
6698	Preseed a package .
6699	Return a dictionary with all available packages .
6700	Check if apt key exists
6701	Add an apt key .
6702	Check if a group exists .
6703	Enter a password change .
6704	Add users to the current environment .
6705	Create a new user .
6706	Set user password
6707	Run a command as root .
6708	Generate a hash of a file .
6709	Check the current environment .
6710	Run a shell command .
6711	Run disk usage command .
6712	Tries to tunnel the remote host
6713	Install setuptools .
6714	Install python from scratch .
6715	Install python packages .
6716	Bootstrap the website .
6717	Return whether or not the current environment is running .
6718	Check if a virtualenv exists
6719	Shows the pip depsptree
6720	Initialize the virtual environment
6721	Return the contents of the given requirements .
6722	List all running instances .
6723	Get or create an EC2 key pair .
6724	Check if an instance exists .
6725	Get or create a VM .
6726	Delete an EC2 instance .
6727	Get the name of the virtual machine .
6728	Restore an instance .
6729	Deploy rsync code .
6730	Initialize the environment .
6731	Create a python module .
6732	Add class methods to a module level .
6733	Convert string to list .
6734	Returns the host_retriever .
6735	Write content to a temporary file .
6736	Reboot or restart a host .
6737	Get component settings .
6738	Get the last modified time of a file
6739	Check for differences between two settings .
6740	Return the common packager .
6741	Return OS version .
6742	Render a Jinja2 template .
6743	Render a template to a file .
6744	Install a config file .
6745	Iterate over the specified sites .
6746	Topological sort function .
6747	Return a list of hosts for a given site .
6748	Return a copy of the genv dictionary .
6749	Creates a new capture class .
6750	Register this class .
6751	Unregisters this service .
6752	Returns a list of all tasks .
6753	Return the local renderer .
6754	Return a dictionary with all the available satellite services .
6755	Return a copy of the env .
6756	Determine if a given parameter is changed .
6757	Reboot the device .
6758	Set site specific information .
6759	Get package list .
6760	Return True if the last change has changed since last time .
6761	Configure tracker .
6762	Write a pgpass file
6763	Dump the database .
6764	Drop a database .
6765	Load a table .
6766	Return a list of all available interfaces
6767	Return the IP address of an interface .
6768	Update the device
6769	Install apt package .
6770	Install a yum .
6771	Return a list of all installed packages .
6772	install required packages
6773	Uninstall blacklisted packages .
6774	Deploy a site .
6775	Force stop and purge the server .
6776	Configure the users on the server .
6777	Iterate over the differences between a and b .
6778	Get the order of component_names .
6779	Get the deploy functions for the given components .
6780	Return the manifest filename .
6781	Get the current thumbprint .
6782	Retrieves the previous image from the manifest file .
6783	Lock the deployment .
6784	Unlock the application .
6785	Create a new thumbnail .
6786	Get the deploy functions for the given components .
6787	Print the status of a deployment .
6788	Push components to the server .
6789	Get the settings for the current site .
6790	Create a new site .
6791	Load data from a site
6792	Manage the environment .
6793	Load django settings
6794	Run a shell command
6795	Sync the local database .
6796	Run a command .
6797	Get the timestamp of the media file .
6798	Set root login .
6799	Create a database renderer .
6800	Return the number of free space in bytes
6801	Load a database set .
6802	Determine if the destination is available .
6803	Assign the user to the host .
6804	Initialize the raspbian disk .
6805	Initialize the local disk .
6806	Installs raspbian .
6807	Create the raspbian box .
6808	Configure HDMI
6809	Configure camera .
6810	Fix lpi2 .
6811	Run pre - deploy tasks .
6812	Deploy services .
6813	Run post - deployment functions .
6814	Configure the services
6815	Enables modules .
6816	Optimize wsgi processes .
6817	Overrides the current environment .
6818	Install apache_basic_auth_users .
6819	Synchronize media
6820	Configure mode invasion mode .
6821	Configure modsecurity .
6822	Configure modrpaf
6823	Renders maintenance_template .
6824	Restart the service .
6825	Deploy all configured services .
6826	Clone a remote repository .
6827	Add a remote .
6828	Fetch a file from a remote repository .
6829	Pull a file from a remote repository .
6830	Get the logs between two commits .
6831	Get the current commit
6832	Return the ssh configuration
6833	Return the version of vagrant .
6834	Create a vagrant environment
6835	Configure vagrant settings
6836	Returns a list of the base boxes .
6837	Installs the download_url from the current environment .
6838	Return the distribution id .
6839	Return the distribution name .
6840	Return the distribution family .
6841	Return a list of available locales .
6842	Force stop the celery .
6843	Set the permissions on the daemon
6844	Create the supervisor services
6845	Check to see if check_ok
6846	Determine if a host is present .
6847	Purge SSH keys .
6848	Find working password .
6849	Determine if the target host is present .
6850	Initialize the host .
6851	Get the public ip
6852	Configure the hostname
6853	Return a list of partition IDs .
6854	Get a device by uuid
6855	Determine if a device is mounted .
6856	Execute a SQL query .
6857	Create a MySQL user .
6858	Check if a database exists .
6859	Create a MySQL database .
6860	Absolute path of the configuration file .
6861	Set root password
6862	Drop all views .
6863	Calculate the crossmatch of a single object .
6864	This function is used to normalize the spectrum and convert it to magnitude
6865	Retrieve time flux errs from an AMES file .
6866	Plot periodogram .
6867	Generate a matplotlib plot .
6868	Find the number of time groups in a time series
6869	Normalize the magnitude of time series .
6870	Calculate the SNR of a dipole .
6871	Estimate the precision of the tmid .
6872	Calculate the time stamps for a given time series
6873	Get out_transit points for a given time .
6874	Compress a SQLite curve .
6875	Uncompress a SQLite curve .
6876	Gzip a SQLite curve
6877	Unzip a SQLite curve .
6878	Validate a SQLite curve filter .
6879	Calls smartcast and returns the result .
6880	Parse a csv header .
6881	Parses a LCC header and returns the metadata and columns .
6882	describe LCC - CSV file
6883	Read HATLC data from a CATLC file .
6884	Find the number of time groups in the time series
6885	Main entry point .
6886	Determine the subtype of an mdwarf .
6887	Run the light curve on the light curve .
6888	Run the light curve on the light curve .
6889	Workhorse function .
6890	Read a csv file .
6891	Workhorse function .
6892	Serialize a list of STAR features .
6893	Perform a parallel starstar on a list of light curves .
6894	Run starfeatures in a directory
6895	Calculate phase and magnitude from phase data .
6896	Worker function .
6897	Worker for periodic features
6898	Serialize a list of pfpkl files .
6899	Process a set of periodic features .
6900	Perform a periodic star finding on the LCP dataset .
6901	Parse the XMatch Catalog header .
6902	Load external catalogs into a dictionary
6903	Wrap angle around radians .
6904	Convert hours minutes to decimal degrees .
6905	Calculate the distance between two points .
6906	Calculates the total motion .
6907	Convert an equatorial coordinates to a celestial coordinates .
6908	Convert Galactic coordinates to equatorial coordinates .
6909	Calculate the xieta from the sky and declination declination .
6910	Generate a transit light curve .
6911	Generate an EBS light curve .
6912	Generate a flare light curve .
6913	Generate a sinusoidal light curve .
6914	Generate a sinusoidal light curve .
6915	Create a collection worker .
6916	Add variables to a fakelcs collection .
6917	Simple simpleflare find
6918	Calculate peakheights based on peakheaks
6919	Calculate the autocorrelation function .
6920	Calculate the autocorrelation function
6921	Calculate the autocorrelation function .
6922	Calculate the autocorrelation of a time series .
6923	Calculate the angle of aovh model .
6924	Open a Postgres connection
6925	Switch the database cursors .
6926	Get a cursor .
6927	Create a new cursor .
6928	Close a cursor .
6929	The trapezoid function .
6930	Match external catalogs .
6931	Match external catalogs .
6932	Calculate the colormag diagram diplagDiagram .
6933	Create a colormagdiagram from a cpdir .
6934	Add cmds to checkplot .
6935	Add cmdpkl to cpdir .
6936	Work around checkplot_objectinfo
6937	Update the cplist list of objects .
6938	Perform a parallel update of the objectinfo in a directory .
6939	Run checkplot .
6940	Gaussian function
6941	Determine the double - inverted gaussian .
6942	Invoke the inverse eclipses_eclipses function .
6943	Convert Jhk to bmag .
6944	Convert jhk to VMag .
6945	Convert jhk to rmag
6946	Convert Jhk to an imagenation .
6947	convert jhk to sdssu
6948	convert jhk to sdssg
6949	convert jhk to sdssr
6950	convert jhk to sdssi
6951	Convert Jhk to sdssz zz zz zz zz z - z z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z - z -
6952	Calculate the angle of the phase of the phase spectrum .
6953	Bootstrap false alarm probabilities .
6954	Plot the combined periodogram .
6955	Return the value corresponding to the given quantitystr
6956	Create a batman model .
6957	Determines the log prior of theta
6958	List all TRILEGAL filters .
6959	Query the sky coordinates of the sky coordinates .
6960	Read a model file .
6961	Determine whether the time - independent of a time series are equal .
6962	Convert obj to JSON .
6963	Initialize the project .
6964	View the current project .
6965	Get the current project .
6966	Initialize the executor .
6967	Smooth mag series using Gaussfilt
6968	Smooth maggol using Savgol filter
6969	Equation for old epd diffs
6970	Same as old_magD_magSeries .
6971	Calculate the eigenvalue of an ephemeris .
6972	2D residuals
6973	Calculate a magnitude - time series from an ephemeris .
6974	Run rfepd .
6975	Calculates the stellingwerf for the phase warping .
6976	Convert a keplermag and DSSR to SI .
6977	Save a keplc dictionary to a pickle file .
6978	Read a pickle file .
6979	Filter a KCDict by filtering the results .
6980	Calculate the ECDF function .
6981	Calculate the centroid offsets for the centroids of the grid .
6982	Calculate the number of points in the chart .
6983	Calculates the detrendering of a legendre
6984	Convert a light curve into a time binned dataframe
6985	Perform a time binning on a list of lists .
6986	Perform a parallel time binning on a directory .
6987	Worker for variable features
6988	Serialize a list of VarFeature objects into a dictionary .
6989	Run VarFeature on a list of lists .
6990	Run VarFeature on a directory .
6991	Convert a checkplot into a pkl file .
6992	Calculate the z - z - z - z - trend model .
6993	Calculate the residual of a flare model .
6994	Shutdown the server .
6995	Run the runCP producer loop .
6996	Fit a time series using spline_fit .
6997	Run a task .
6998	Run parallel CP pickle .
6999	Perform a single period finding
7000	Run a task worker .
7001	convert a list of pandas objects into a single file
7002	Run a light curve on a light curve .
7003	Collect nonperiodic features from a file .
7004	Train a feature classification .
7005	Apply a classifier to a classifier .
7006	Plot training results .
7007	Compute the Fourier transform function .
7008	Compute the chisq of the Fourier coefficients .
7009	Compute the residual residual
7010	Get the skyview stamp of a skyview .
7011	Plots the period base function .
7012	Save a lcdict to a pickle file .
7013	Read a pickle file .
7014	Concatenate a list of textLcs into a single file .
7015	Concatenate light curves for a given objectid .
7016	Concatenate LCDC to a pkl file .
7017	Concatenate a lkc file .
7018	Concatenate lcdir into a single object .
7019	Merge a list of tuples into a list of clusters
7020	Generate the HATPI for a binned HATPI .
7021	Generate a list of textlcs for parallelization .
7022	calc_fovcatalog
7023	Convert base64 string to str
7024	read a pickplot pickle file
7025	Make a matplotlib plot .
7026	Concretience function for querying objectlist .
7027	Retrieve a list of objects from an radecl box .
7028	Perform a GAIA query on the object id .
7029	Generalized LSP value .
7030	Calculate the lsp value of a SpecWindow .
7031	Generate a log window for a spec window .
7032	Check if an existing apikey server exists .
7033	Get a new API key from the LCC server .
7034	Import an APIC API key from the server .
7035	Submit a search query to LCC - Server .
7036	Perform a cone search .
7037	Perform an xmatch search on a file .
7038	Retrieve dataset from LCC server .
7039	Get object info .
7040	Retrieve the most recent available datasets .
7041	Return a list of the latest LLC collections .
7042	Calculate the stetson - jindex of the given time series .
7043	Calculate the timeseries of a light curve .
7044	Calculate the light curve flux measures .
7045	Compute all nonperiodic light curve features .
7046	Run the bs algorithm
7047	Worker function .
7048	Calculate the bls stats for a single period
7049	Calculate the mass radius of a planet .
7050	Rearrange the light curve for the given task .
7051	Run a light curve on a light curve .
7052	Run a light curve on the light curve .
7053	Read a cklc file .
7054	Check if the given module is imported .
7055	Register a lcformat file .
7056	Connect to an EC2 instance .
7057	Download a file from S3
7058	Upload local file to S3
7059	Delete a file from S3
7060	Create a queue .
7061	Delete a queue .
7062	Send an item to a queue .
7063	Get an item from a queue .
7064	Delete an item from a queue .
7065	Terminate EC2 nodes .
7066	Cancel a spotfleet cluster .
7067	Upload local file to GCS .
7068	Read a LCDL file
7069	Retrieve the variable features from the simulated machine
7070	Calculate precision of ntp and ptp .
7071	Compute recall .
7072	Compute Mathews correlation coefficient .
7073	Worker function to find variables for a given magnitude bin .
7074	Generate a variable - index for a variable index .
7075	Run a period finding
7076	Worker for periodic variables recovery
7077	Perform periodic variables recovery on a periodic variable .
7078	Perform a TIC search on the given sky coordinates .
7079	Perform a crossmatch on a set of sky coordinates .
7080	Search for a TIC object .
7081	Send an email .
7082	Calculate the model magnitudes .
7083	Compute the residuals of the Fourier transform .
7084	Make a matplotlib plot .
7085	Preprocess the coordinates of a set of coordinates .
7086	Return True if iterable is True False otherwise .
7087	Calculates epochs for a given time and period .
7088	Convert Julian Day to datetime .
7089	Calculate the RDD of the observer .
7090	Process the light curve .
7091	Worker function .
7092	Handle a change change .
7093	Create the widget layout .
7094	Initialize the options object .
7095	Initialize the map .
7096	Initialize the InfoWindow adapter .
7097	Called when a map fragment is created .
7098	Destroys this item .
7099	Called when a child is added .
7100	Add a marker .
7101	Create a marker .
7102	Fit the model .
7103	Set the data .
7104	Apply transformer to each sentence .
7105	Train the model .
7106	Export the model .
7107	Train the SGD classifier .
7108	Print a CM matrix .
7109	Download a URL from the cache .
7110	Train the model .
7111	Predict class .
7112	Serve the language board .
7113	Predict the estimator .
7114	Compute the neural network .
7115	Return a list of configuration sources .
7116	Return a generator that yields all available source files .
7117	Merge a set of sources into a dictionary .
7118	Recursively merge dicts .
7119	Return a copy of a dict .
7120	Convert object to DotDict
7121	Filters a config file based on deploy_config .
7122	Generate a seeded auth token .
7123	Write configuration to a file .
7124	Validate a date .
7125	Get the total number of downloads in a row .
7126	Add the total number of downloads
7127	Find and patch an entry .
7128	Convert an inv entry to a path
7129	Main entry point .
7130	Create a logging configuration .
7131	Sets up the path to the docset .
7132	Prepare a docset from a source .
7133	Add an icon .
7134	Run a single cell .
7135	Return a copy of a dict
7136	Redirect stdout to a new stdout .
7137	Format an object .
7138	Returns the type information for the given object .
7139	Get the spend key .
7140	Transfer amount to another account .
7141	Transfer multiple destinations .
7142	Get the balance of this account .
7143	Create a new address .
7144	Transfer amount to another account .
7145	Transfer multiple transactions .
7146	Convert amount to atomic .
7147	Convert a string to a SubAddress object .
7148	Integrate the address with the given payment ID .
7149	Encode a hex string .
7150	Decode a phrase .
7151	Calculate the checksum of a mnemonic .
7152	Prompt the user for a question .
7153	Prompts the user for multiple choices .
7154	Prepare command line options .
7155	Prompt user for raw input .
7156	Returns the operator for the given operator .
7157	Assign a prompter .
7158	Add a question .
7159	Ask the question .
7160	Returns the next question .
7161	Go to the next n times .
7162	Format answers to JSON format
7163	Display the answer .
7164	Add an intent .
7165	Add a new entity .
7166	Load an entity from a file .
7167	Load intent from file .
7168	Remove an intent by name .
7169	Remove an entity by name .
7170	Train the PadaOS device .
7171	Train a Padaio model .
7172	Calculate intent data .
7173	Calculate the intent .
7174	Train and save an object .
7175	Main entry point for pyi_dir .
7176	Recursively retype a directory recursively .
7177	retype a file
7178	Parse lib2to3 .
7179	Unparse a node .
7180	Refresh all functions in lib2to3 .
7181	Fix type comments .
7182	Parse a function signature type comment .
7183	Parse a type comment .
7184	Copies the arguments to a type comment .
7185	Recursively copy annotations to annotations .
7186	Try to replace any or equal if any .
7187	Remove a function signature type comment .
7188	Get the offset and prefix and prefix and prefix .
7189	r Fix line numbers .
7190	Return a leaf .
7191	Load prefix info
7192	Calculate the equalization of the histogram .
7193	Match image histograms .
7194	Stretch the image .
7195	Calculate the NDI intensity .
7196	The ndwi band .
7197	Plot the data .
7198	Describe image results .
7199	Retrieve a chip from the given coordinates .
7200	Create a leaflet viewer .
7201	Returns True if cat_id is ordered by the given category id .
7202	Deprecate a module attribute .
7203	Returns the matching port matching the given name
7204	Set the values of the given ports .
7205	Save the object to an output file .
7206	Generates a workflow description .
7207	Launch the workflow .
7208	Returns a list of task ids .
7209	Cancel the workflow .
7210	Get stdout of the workflow .
7211	Get the stderr of the workflow .
7212	List of layer definitions .
7213	Returns a pyproj . Proj . Proj object .
7214	Display an image .
7215	List all tasks .
7216	Register a task .
7217	Get task definition .
7218	Delete a task .
7219	Update a task .
7220	Write an array to a geotiff file .
7221	Ingest vector data to S3 .
7222	Retrieve a recipe by its id .
7223	Save a recipe .
7224	Save project
7225	Delete project by id
7226	Return a copy of this vector .
7227	Parses the current color .
7228	Returns a copy of this SVG .
7229	Parses the heatmap .
7230	Create a vector .
7231	Create a Feature from a WKT string
7232	Get a vector by ID
7233	Execute an aggregation query .
7234	Generate a tilemap for a query .
7235	Display a map .
7236	Read data from the Dataset .
7237	Create a new DataFrame with a fixed size .
7238	Iterate over a set of windows .
7239	Return a new image at the given shape .
7240	Return a cover of the image .
7241	Return the area of the ellipsoid .
7242	Return the bounds of the image .
7243	Convert to geotiff
7244	Parse geometries .
7245	Calculate the tile coordinates .
7246	Launch a workflow .
7247	Get the status of a workflow .
7248	Get stdout of a task .
7249	Cancel a workflow .
7250	Launch a batch workflow .
7251	Get the status of a batch .
7252	Place an image .
7253	Get the status of an order
7254	Send a heartbeat to the server .
7255	Get a single record .
7256	Retrieves the catalog metadata .
7257	Get the coordinates of a geocoding address .
7258	Search for a given address .
7259	Searches for a point .
7260	Get the location of a catalog .
7261	Perform a search operation .
7262	Get the most recent images .
7263	Add a method to the interface .
7264	Validate a configuration option .
7265	Run all assertions .
7266	Run a Matcher .
7267	Run the operator .
7268	Decorator for operator methods .
7269	Create an attribute operator .
7270	Register a new engine .
7271	Load and register all the operators .
7272	Registers an operator .
7273	Set the rate of the player .
7274	Play pause .
7275	Seek to the given position .
7276	Sets the player position .
7277	Set video position .
7278	Play synchronously .
7279	Play the game .
7280	Quits the OMXPlayer .
7281	Render the template .
7282	Translate a value into a reference field .
7283	Trim a field key from a document .
7284	Returns True if the current user has edit permission .
7285	Returns True if the current user has a staff permission .
7286	Check if the user has a delete permission .
7287	Set form fields .
7288	Get the value of a field .
7289	Determine if a string has a digit .
7290	Make a unique key .
7291	Set the fields on the model .
7292	Set the form data .
7293	Returns the form .
7294	Create a dict from a list field .
7295	Convert a document into a dictionary .
7296	Returns the widget for the given model field .
7297	Returns a dict of attributes for a model field .
7298	Returns the form field class .
7299	Filter queryset .
7300	Add the context to the context .
7301	Handles POST requests .
7302	Return a list of available apps .
7303	Set mongonautautautautautautilus base class .
7304	Add all the permissions to the context .
7305	Process POST request .
7306	Process a document .
7307	Set embedded document .
7308	Set a list field .
7309	Renders the current timezone .
7310	Return a HttpResponse with the current timezone .
7311	Return True if the given address is a valid ip address .
7312	Determine if an IP address is a loopback .
7313	Called when a request is received .
7314	Perform the query
7315	Parse a list of filters
7316	Create a query .
7317	Send email .
7318	Parse a string and return a list of email addresses .
7319	Create a boundary parameter .
7320	Make a multipart message .
7321	Convert markdown into HTML .
7322	Add attachments to a template .
7323	Send an email to the given config file .
7324	Create sample input files .
7325	Entry point for mailmerge .
7326	Return a function that wraps a function with the given values .
7327	Parse a comma - separated list of integers .
7328	Generate a base URL .
7329	Make a request .
7330	Send a request to the client .
7331	Return a list of all tasks .
7332	Run all tasks in the background .
7333	Close the session .
7334	Uploads a chunked media to the given path .
7335	Upload a file .
7336	Parse the response from IEDB .
7337	Predict binding probabilities for given peptides .
7338	Get the arguments of a function .
7339	Log an error .
7340	Get the media type and category .
7341	Get the size of the file .
7342	Set debug level .
7343	Clone this PredictionPredictionPrediction .
7344	Get the data from the response .
7345	Calls the callback on the given data
7346	Get OAuth token .
7347	Get a user s OAuth token .
7348	Get an OAuth access token .
7349	Parse a token into a dictionary .
7350	Predict a sequence of sequences .
7351	Parse netchop output .
7352	Return a pandas DataFrame containing the bindingPredictionaries .
7353	Run a netMHC program .
7354	Predict prediction for peptides .
7355	Convert an object to a string .
7356	Create input peptides files .
7357	Validate peptide lengths .
7358	Check input peptides .
7359	Predict a subset of peptides .
7360	Validate alleles .
7361	Connect to the stream
7362	Connect to the stream .
7363	Create a new event handler .
7364	Set the time zone .
7365	Run a command .
7366	Run multiple_commands on multiple arguments .
7367	Deserialize a JSON object .
7368	Decode a response .
7369	Get the docstring of a function .
7370	Checks if the given data has the specified permissions .
7371	Run the predictor .
7372	Prepare allele name .
7373	Extract an error from a dict .
7374	Raise an exception .
7375	Decorator to register an exception code .
7376	Prepares a request .
7377	Return a copy of the request headers .
7378	Decorator to process keys .
7379	Return the first completion of the given text .
7380	Run a command .
7381	Iterate over edges .
7382	Return True if the given node is within the given group .
7383	Plot an axis .
7384	Plot a list of nodes .
7385	Return the angle of a group .
7386	Find the group membership of a node .
7387	Get the index of a node .
7388	Return the radius of a node .
7389	Calculate the angle of a node .
7390	Add edges to the plot .
7391	Draws the plot .
7392	Adjust angles between start_angle and end_angle .
7393	Returns the string of the mods genre .
7394	Return all publications .
7395	Displays a single publication .
7396	Return the list of publications .
7397	Parse latex string .
7398	Parse a BibTeX string .
7399	Swap another instance .
7400	Updates the ordering by ascending order .
7401	Swap down the ordering .
7402	Sets the order to the given order .
7403	Move this ordering to another one .
7404	Move this ordering to another .
7405	Gets the highest order .
7406	Gets the highest order .
7407	Populate the publications dictionary .
7408	Worker function .
7409	Get the order of the tree .
7410	Count the number of samples in the ensemble .
7411	Generate a sequence of loci loci
7412	Runs the tree inference algorithm
7413	Plot the results table .
7414	Plot the pairwise distance between samples .
7415	Return a shallow copy of this object .
7416	Migrate loci to a new file
7417	Update a dictionary with counts .
7418	Create an assembly .
7419	Cleanup the input sample .
7420	Index a reference sequence .
7421	Fetch the cluster SE from a SAM file .
7422	Calculate the genome and chromosome clustering .
7423	Merge reference sequences into reference sequence .
7424	Check insertion size for insertion .
7425	Merge BAM files .
7426	Update stats for refmap_unmapped reads
7427	Initialize refmap files .
7428	Sample from the map
7429	Draw the adjacency plot .
7430	Resolve association matrix .
7431	Count the number of pis .
7432	Write the NEX file .
7433	Read the sample names from a file .
7434	Count the number of lines in a file .
7435	Count the number of lines in a file .
7436	Convert a string to a tuple .
7437	Return a pandas DataFrame containing the sample statistics .
7438	Return a DataFrame containing all files in the dataframe .
7439	Build a pandas dataframe by index
7440	Get the parameters for a given parameter .
7441	Set a parameter .
7442	Branch an assembly .
7443	Run one step 1 step 1 .
7444	Run the main step 2 . 0 step2 .
7445	Run joint estimate .
7446	Run consensus base function .
7447	Run clustering on samples .
7448	Check if samples are in the correct state .
7449	Combine the fastq files in a file .
7450	Return a function to get the barcode from the data
7451	Iterate over the quantile of the samples .
7452	Write FASTQ file .
7453	Recursively concatenate input files .
7454	Estimate optimal number of reads
7455	Cleanup temporary files .
7456	Splits raw data into chunks .
7457	Add stats to a file .
7458	Compute the share matrix .
7459	return the name of a parameter
7460	Save output to json2
7461	Save data to json .
7462	Encode an object .
7463	Plot the depth plot .
7464	Parse MCMC results .
7465	Parse mcmc . txt file .
7466	Load an existing results file .
7467	Return a pandas summary of the results .
7468	Perform multi -mus alignment .
7469	Concatenate align bits into a GATK file .
7470	Fill arrays with duplicates .
7471	Build a temporary HDF5 file from samples .
7472	Get the number of segments in the network .
7473	Concatenate a single genome .
7474	Write data to a full HDF5 file .
7475	Calculate the chromosomes for each chromosome .
7476	Return a copy of the inserted indices .
7477	Count the number of selected seeds .
7478	Sort shuffle files .
7479	Build the reads file .
7480	Build clustbits for each cluster .
7481	Remove temporary files .
7482	Clean up assembly stats .
7483	Parse the results from a single sample .
7484	Run a single sample .
7485	Concatenate multiple reads .
7486	Run cutadapt .
7487	Concatenate multiple input files .
7488	Create a VCF file .
7489	Import a VCF file
7490	Return a list of all the targets in ipy .
7491	Compute stats for each sample .
7492	Return the random product of two iterables .
7493	Return the number of k choices .
7494	Count the number of SNPs .
7495	Convert a numpy array into matrices .
7496	Calculate the number of sequences in a sequence .
7497	Run nworker .
7498	Shuffle cols in seqarr
7499	Resolves ambiguous sequences .
7500	Get the spans of a map array .
7501	Calculate the width of a slice
7502	Fill boot array with boot data
7503	Convert data to bytes .
7504	Parse the names from the file .
7505	Run qmc .
7506	Dump qmc data to a file .
7507	Rename names .
7508	Compute the final statistics .
7509	Save the parameters to a json file .
7510	Insert results into an array .
7511	Select a subset of samples .
7512	Pad a list of names .
7513	Perform clustering .
7514	Enter a pair of sequences .
7515	Enter singles into a string .
7516	Initialize arrays for clustering .
7517	Calculate the number of SNPs in the superint .
7518	Find the highest index of a block .
7519	Write SNPs map to HDF5 file .
7520	Write usnPS HDF5 file .
7521	Write string to str
7522	Concatenate a VCF file .
7523	Perform a reftrick analysis .
7524	collapse out the outgroup
7525	Draw the tree .
7526	Get the depth of each cluster .
7527	Align a cluster and parse it into a file .
7528	Calculate the number of indels that overlap the cluster .
7529	Sets up the directories of the data .
7530	Build a DiGraph from the given samples .
7531	Plot a dag .
7532	Track the results of a function .
7533	Concatenate multiple edits .
7534	Cluster samples from a sample .
7535	Run muscle_chunk .
7536	Perform concatation on a sample .
7537	Branch assembly .
7538	Returns an ip . assembly object
7539	Calculate the binomposition of the binomposition
7540	Calculate the basecaller function based on the given parameters .
7541	The nfilter1 filter1
7542	Store alleles for alleles .
7543	Split clusters into chunks of clusters .
7544	Run the neural network .
7545	Calculate the depth of each sample .
7546	Iterate over clusters .
7547	Create allele allele names .
7548	Display the cluster information .
7549	Set the debug configuration .
7550	Turns the debug flag .
7551	Check if a command exists .
7552	Retrieve the path to the bin directories .
7553	Main worker function .
7554	Store all samples .
7555	Stores random samples from the database .
7556	Generate n sets of n sets .
7557	Random product of two sequences .
7558	Resolve ambiguities in tmpseq .
7559	Sets the number of threads to use .
7560	Calculates the total number of nodes in the given tree .
7561	Calculate the number of samples sampled from a node .
7562	Run qmc .
7563	Insert results into an hdf5 file .
7564	Establish a connection to a cluster .
7565	Memoize a function .
7566	Remove ambiguities from a sequence .
7567	Calculate splital alleles based on consensus .
7568	Convert a sequence into a string .
7569	Convert a sequence into a fullcomposition
7570	Takes a FASTA file and writes it to outfile .
7571	returns reverse complement of a string
7572	Perform clustering .
7573	Print progress bar .
7574	Get a list of threads from the ipyclient .
7575	Detect the number of CPUs on the system .
7576	Run a structure command
7577	Concatenate clumppparams . txt file
7578	Calculate the EVanno - likelihood table .
7579	Return a list of all output files .
7580	Get an EVanno table .
7581	Parse the output file .
7582	Call command_list .
7583	Run raxml
7584	Get the binary .
7585	Calculate the bootstrap statistics for a given sample .
7586	Get a random bootstrap array .
7587	Return a pandas DataFrame containing the taxon tables .
7588	Create NEX file .
7589	Call fastq - dump on a set of sources .
7590	Convert a list of fields to a list of strings
7591	Run the worker .
7592	Create a new session .
7593	Retrieve constants from the API .
7594	Retrieve a single player .
7595	Get a fullclan .
7596	Search for tournaments .
7597	Retrieves the top warans for a country .
7598	Retrieve a list of popular plans .
7599	Get popular players .
7600	Get a full list of all popular tournaments .
7601	Retrieve a list of popular users .
7602	Get a list of all tournaments .
7603	Get a single player .
7604	Retrieves the current player s players .
7605	Get a singleclan .
7606	Search for communities .
7607	Search for tournaments by name .
7608	Retrieve all cards from the API .
7609	Retrieves a list of all locations .
7610	Get a location by ID .
7611	Retrieves the top scans for a given location .
7612	Returns the image of the clan .
7613	Returns the avatar of the arena .
7614	Returns a link to the deck s deck .
7615	Convert timestamp to datetime
7616	Decorator for typecasted arguments .
7617	Coerce an annotation to a namespace
7618	r Compute the beat .
7619	r Compute the chord expression .
7620	Convert an annotation into a hierarchical structure .
7621	r Compute the hierarchical hierarchy .
7622	r Compute the tempo .
7623	r Compute the tempo - contour
7624	Convert an annotation to an interval .
7625	r Compute the pattern expression .
7626	r Compute the transcription of a reference .
7627	Add a namespace from a JSON file .
7628	Return a copy of the schema .
7629	Create a numpy array
7630	Get the values of a namespace .
7631	Return dtypes and confidence dtypes for a namespace .
7632	List all the namespaces .
7633	Get the dtype of a type specification .
7634	Load JAMS schema .
7635	r Import a lab file .
7636	Return a list of filepaths .
7637	Creates a directory if it doesn t exist .
7638	Find all files with a given extension .
7639	Get comments for a jam .
7640	Convert a jam file into a text file .
7641	Parse command line arguments .
7642	Decorator to register a function .
7643	Convert an annotation to a target_namespace .
7644	Check if an annotation can be converted to a target namespace .
7645	Convert pitch frequency to contour
7646	Convert notehz to midi .
7647	Scaper an annotation .
7648	Mark a function as deprecated .
7649	Open a file descriptor .
7650	r Load a JAMS file .
7651	Remove a prefix from a query string .
7652	Match a query against a string .
7653	Convert an object into a python object .
7654	Return a summary of the given object .
7655	Update object attributes .
7656	Validate the JSON object .
7657	Append an Observation .
7658	Append a list of Observation objects .
7659	Append columns to the table .
7660	Validate the data .
7661	Trim the annotation .
7662	Create a slice of the annotation .
7663	Pop the data from the list .
7664	Convert time series to samples .
7665	Return an HTML representation of the dataset .
7666	Return the key of the Observation .
7667	Searches the annotation array .
7668	Trim the annotations from start_time to end_time
7669	Return a copy of the annotation array .
7670	Add a Jam .
7671	Save the object to a JSON file .
7672	Validate the JAMS .
7673	Trim the Jam file .
7674	Creates a new JAMS with the given time range .
7675	Pretty print an object .
7676	Display intervals of an annotation .
7677	Display the histogram of an annotation .
7678	Plot a pitch contour .
7679	Display an event .
7680	Display the beat position .
7681	Display a pianoroll .
7682	Display an annotation .
7683	Display multiple annotations .
7684	Makes a click .
7685	Click on an annotation .
7686	Calculate downbeat for an annotation .
7687	Calculate the number of segments from an annotation .
7688	Calculate the pitch contour .
7689	Calculate a pianorotonic pianoroll .
7690	Convert an annotation .
7691	Validate a JSON file .
7692	Handle an authentication failure .
7693	Return True if the JID is valid False otherwise .
7694	Perform SASL authentication .
7695	Decorator for timeout handler
7696	A delayed call handler .
7697	Create a new roster item from an XML element .
7698	Returns an ElementTree representing this Job .
7699	Verify that the role is trusted .
7700	Verify the roster set .
7701	The set of groups in the collection .
7702	Get a list of items by name .
7703	Get a list of items by group .
7704	Add an item to the roster .
7705	Remove an item from the list .
7706	Load roster from file .
7707	Save roster to dest .
7708	Process the server features .
7709	Handles an authorized_jid event .
7710	Request a roster .
7711	Receive a roster from the roster .
7712	Add an error to the event queue .
7713	Handle a roster push .
7714	Add an item to the roster .
7715	Update a roster .
7716	Remove a roster from the roster .
7717	Set a roster .
7718	Free this node .
7719	Evaluate an XPath expression .
7720	Set the history .
7721	Return history parameters .
7722	Sets the password .
7723	Returns the password of the MUC .
7724	Initialize the object .
7725	Initialize a MUC user from an xml node .
7726	Init the status code .
7727	Return a list of all MucItem objects .
7728	Add an item to the MUC .
7729	Return the MUC child .
7730	Clears the muc child .
7731	Make a join request
7732	Return the join info of the MucX
7733	Make a kick request
7734	Normalize the given data .
7735	Set the cache size .
7736	Convert a string into a list of strings .
7737	Enables forbidden characters .
7738	Check for unassigned characters .
7739	Checks if the given data is correct .
7740	Decorator to hold an exception in a thread .
7741	Configure an IO handler .
7742	Prepare pending events .
7743	Called when a handler is ready .
7744	Calls a timeout callback .
7745	Called when timeout is done .
7746	Factory for stanza .
7747	Process stanza result .
7748	Process an IQ response .
7749	Process an IQ packet .
7750	Tries to try to handle the given stanza type .
7751	Check if the given stanza is valid .
7752	Process presence stanza .
7753	Route stanza .
7754	Process stanza .
7755	Set the response handlers for a stanza .
7756	Set the response handlers for a stanza .
7757	Setup the stanza handlers .
7758	Send stanza to uplink .
7759	Check if all events are available .
7760	Call a timeout handler .
7761	Compare two XML elements .
7762	Create an error message .
7763	Move the next session handler to the next one .
7764	Connect to the server .
7765	Disconnect from the server .
7766	Close the stream .
7767	Called when the client is authenticated .
7768	Handles incoming events .
7769	Called when a stream is disconnected .
7770	Factory for the base_handlers .
7771	Return the payload class for the given element name .
7772	Unquote a string .
7773	Quote double quotes .
7774	Compute the authentication header .
7775	Encode an rfc24 value .
7776	Convert an XML Element into a dictionary .
7777	Creates the FN string .
7778	Create a VCard from a VCard .
7779	Parse RFC242526 record .
7780	Process a RFC242517 record .
7781	Returns the VCARD as a string .
7782	Update the state .
7783	Deactivate the fetcher .
7784	Called when an item is received .
7785	Called when an error occurs .
7786	Timeout the object .
7787	Try to back up the item if necessary .
7788	Add an item to the list .
7789	Get the item at the specified address .
7790	Update an item .
7791	Removes all items from the queue .
7792	Remove a fetcher .
7793	Sets the fetcher class .
7794	Register a fetcher .
7795	Unregisters the fetcher .
7796	Register a client authentication .
7797	Register a server authentication .
7798	Decorator to register a SASL mechanism .
7799	Returns True if the password matches the given properties .
7800	Encode the data .
7801	Handles an IM session .
7802	Decodes ASN string .
7803	Return the name of the subject .
7804	Verify that a server name is valid .
7805	Verify a JID against a common name .
7806	Verify a JID against a JID .
7807	Verify that a given client_jid is valid .
7808	Create a certificate object from an SSL socket .
7809	Create an instance from an SSL socket .
7810	Create a Certificate from DER data .
7811	Decodes a DN from a DN .
7812	Decodes the validity of the validity .
7813	Decodes alt_names .
7814	Create a DER from a file .
7815	Load the roster .
7816	Add a new event handler .
7817	Remove a handler .
7818	Update the handler map .
7819	Dispatch an event .
7820	Flush the queue .
7821	Validate a challenge .
7822	Create a response object .
7823	Validate the final challenge .
7824	Finish the challenge .
7825	Decorator to add a feature URI .
7826	Decorator for defining a payload element .
7827	Decorator to register a stream element .
7828	Create a new option from an xml node .
7829	Add an option .
7830	Create a Field from an XML document .
7831	Add a field .
7832	Create an object from an XML document .
7833	Add an item to the list .
7834	Return a form .
7835	Initialize a form from an xml node .
7836	Register fetchchers for the given stream_suite .
7837	Remove the node from the document .
7838	Set the node .
7839	Set the action property .
7840	Returns the name of the element .
7841	Get category .
7842	Set the category .
7843	Returns the type of the item .
7844	Set the item type .
7845	Returns a list of all DOM items .
7846	Add a disco item .
7847	Checks if a service has a particular item .
7848	Returns a list of feature names
7849	Check if a feature exists .
7850	Add a feature .
7851	Remove a feature
7852	Returns a list of discoIds .
7853	Return True if item_category is an identity .
7854	Add a disco identity .
7855	Send a GET request to the server .
7856	Respond to the server .
7857	Called when an error occurs .
7858	Create an error response .
7859	Create a result response .
7860	Request the TLS header .
7861	Make a TLS connection .
7862	Handle a TLS connection .
7863	Verify a TLS certificate .
7864	Main entry point .
7865	Called when the client is authorized .
7866	Set the value of a key .
7867	Return the next timeout .
7868	Expire an item .
7869	Parses the attributes from the XML element .
7870	Decodes an error element .
7871	Set payload .
7872	Add a payload to the payload .
7873	Get all payloads .
7874	Get a payload from the payload .
7875	Convert an element to unicode .
7876	Bind a resource .
7877	Called when a bind response is successful .
7878	Serialize an element .
7879	Add a namespace prefix .
7880	Emits the stream header .
7881	Split a namespace name into a namespace and name .
7882	Create a prefix for the namespace .
7883	Create a prefix for a namespace .
7884	Convert declarations to XML declaration string .
7885	Emits an XML element .
7886	Emit a Stanza element .
7887	Return a list of mechanisms filtered by properties .
7888	Called when an error occurs .
7889	Update the MUC presence .
7890	Retrieves a Mucroom user .
7891	Set the user s stream .
7892	Join the room .
7893	Leave the room .
7894	Send a message to the room .
7895	Sets the subject to the room .
7896	Change the nickname of the room .
7897	Return the JID of the room .
7898	Process a configuration form .
7899	Request configuration form .
7900	Called when a configuration is configured .
7901	Configure a room .
7902	Set the stream .
7903	Sets the handlers for the message .
7904	Join a MUC room .
7905	Remove a room .
7906	Process a groupchat message .
7907	Process an error message .
7908	Determine if a presence error is present .
7909	Determine if a MUC presence is available .
7910	Return True if presence is unavailable .
7911	Retrieves a setting value .
7912	Add a setting .
7913	Validate a string .
7914	Returns a validator that validates an integer value .
7915	List all definitions .
7916	Return an argument parser .
7917	Compare two strings .
7918	Validate an IP address .
7919	Create a JID from a string .
7920	Prepare a local part .
7921	Prepare a JID domain .
7922	Prepare a resource .
7923	Return the JID as a unicode string .
7924	Is IPv6 address available?
7925	Is IPv4 address available?
7926	Shuffle a list of records .
7927	Reorder a list of records
7928	Stop all threads .
7929	Start the thread .
7930	Resolve a hostname .
7931	Send a message .
7932	Connect to a server .
7933	Connect to the server .
7934	Compute the handshake hash .
7935	Perform the handshake .
7936	Set the state .
7937	Connect to a remote host .
7938	Connect to a remote host .
7939	Resolve the DNS resolver .
7940	Called when a service is received .
7941	Resolve the hostname .
7942	Called when an address is received .
7943	Start a new connection .
7944	Called when the transport is connected .
7945	Attempt to reconnect to the socket .
7946	Write data to the socket .
7947	Set the target stream .
7948	Send the head of a stream .
7949	Send the tail of the stream .
7950	Send an element .
7951	Waits until the connection is readability .
7952	Waits for writeability .
7953	Handle write requests .
7954	Starts a new TLS connection .
7955	Get the certificate from the server .
7956	Initiate the TLS handshake .
7957	Continue the TLS handshake .
7958	Handles incoming requests .
7959	Handles the HUP command .
7960	Called when an error occurs .
7961	Disconnect from the transport .
7962	Close the socket .
7963	Feed data to the reader .
7964	Add an event to the event queue .
7965	Start a new element .
7966	End a tag .
7967	Feed data into the parser .
7968	Start a reading thread .
7969	Remove an IO handler .
7970	Add a timeout handler .
7971	Run a timeout thread .
7972	Remove a timeout handler .
7973	Starts the event dispatcher .
7974	Stop all threads .
7975	Run the loop iteration .
7976	Reset the stream .
7977	Post - connect callback .
7978	Called when authentication is done .
7979	Attempt to authenticate the stream .
7980	Timeout the authentication result .
7981	Handle an authentication error .
7982	Finish the authentication process .
7983	Called when an error occurs .
7984	Called when a registration form is received .
7985	Submit registration form .
7986	Called when registration is successful .
7987	Request the software version .
7988	Sets up the _element_handlers .
7989	Add an event to the event queue .
7990	Called when the transport is connected .
7991	Send a stream start event .
7992	Send a stream error .
7993	Restart the stream .
7994	Send a stanza .
7995	Unlink a stanza .
7996	Process a stream error .
7997	Set the peer s identity .
7998	Set the authenticated user .
7999	Return authentication properties .
8000	Fix out stanza from stanza .
8001	Modify stanza from stanza .
8002	Convert an XML element from an XML node .
8003	Returns the form for this element
8004	Submit a form .
8005	Create a delay from an xml node .
8006	Handle read requests .
8007	Create an error stanza .
8008	Activate the billing plan .
8009	Execute this billing agreement .
8010	Decorator to register a webhook handler .
8011	Create a WebhookEvent from a request .
8012	Check that the payment_key is valid .
8013	Create the upstream applications .
8014	Send a message to the application .
8015	Dispatch a message .
8016	Receive a JSON payload .
8017	Disconnect from websocket .
8018	Disconnect from the device .
8019	Send a message to the websocket .
8020	Handle websocket messages .
8021	Close the websocket .
8022	Creates a new instance of the Calculation .
8023	Retry decorator .
8024	Action for button action .
8025	Compile multiglob .
8026	Return a list of file paths to compare to files .
8027	Group files by a classifier .
8028	Decorator to group a list of paths .
8029	Return the size of a file .
8030	Group files by content .
8031	Compare two chunks .
8032	Use prune to prune a list of lists .
8033	Find duplicate files .
8034	Write text to the file .
8035	Summarize text into sentences .
8036	Perform lex rank - rank lexrank on sentences .
8037	Get a summarizer by name .
8038	Return the code mappings for a given level .
8039	Is this name?
8040	Returns True if the class is public .
8041	Return True if the class is public .
8042	Parse a source file .
8043	Consume the next token .
8044	Perform leapfrog .
8045	Parse a docstring .
8046	Parse a definition list .
8047	Parse from_import statement .
8048	Parse from imports .
8049	Main entry point .
8050	Load the source from stdin .
8051	Return the darkest color .
8052	Parse a KulerTheme from an XML string .
8053	Connect to a socket .
8054	Handles the stdin .
8055	Decorator to mark a command as trusted .
8056	Escape_nl .
8057	Restart the bot .
8058	Play the bot .
8059	List variables .
8060	Do fullscreen prompt
8061	Handles the browser window .
8062	Print help message .
8063	set a variable
8064	Parse a command line .
8065	Draws a turtle .
8066	Get source from a document .
8067	Load a grammar from a grammar .
8068	Refresh the source .
8069	Get a random child element .
8070	Replace characters in a string .
8071	Check if url is not found
8072	Check if url is a type
8073	Return a list of requirements .
8074	Draw an image .
8075	Draw a rectangle .
8076	Set rect mode .
8077	Set the ellipse mode .
8078	Draw a arrow .
8079	Draw a star to a point
8080	Move the path to the given location .
8081	Rearrange the current path .
8082	Relve the path to the current path .
8083	Set the current canvas mode .
8084	Scale the canvas .
8085	Stores the cursor color .
8086	Sets the line width .
8087	Set the font size .
8088	The size of the canvas .
8089	Draw text at the specified location .
8090	Calculate the height of text
8091	Set background color .
8092	Draw a node .
8093	Set the label of a node .
8094	Add edges to a path .
8095	Move an edge to a path .
8096	Change the label of an edge .
8097	Draw a path .
8098	Create a new style with the given stylename .
8099	Return a shallow copy of this style .
8100	Apply styles to the graph .
8101	Return a shallow copy of the graph .
8102	Open the socket .
8103	Load profiles from the manager .
8104	Update the socket .
8105	Calls the callback function .
8106	Copy the contents of src to dst .
8107	Serialize obj to JSON .
8108	Search for Google Maps .
8109	Search for images .
8110	Search for news articles .
8111	Search for blogs .
8112	Calculate a unique identifier .
8113	Return the age of a file .
8114	Calculate angle between two points .
8115	Calculate the distance between two points .
8116	Compute the intersection of a line .
8117	Compute the intersection of a circle .
8118	Invert the matrix .
8119	Transform a path .
8120	Return the intersection of the bounding box .
8121	Return the union of two Bounds .
8122	Print an error message .
8123	Draw text at the specified location .
8124	Draw a flat cube .
8125	Draw a CBU Bezier curve .
8126	Search for Yahoo .
8127	Search for images .
8128	Search for news .
8129	Suggest a spell .
8130	Add a layer .
8131	Merge a list of layers .
8132	Export the layers to a file .
8133	Delete layer .
8134	Move the layer at the top .
8135	Remove the layer from the canvas .
8136	Duplicate the layer .
8137	Increase the brightness of the image .
8138	Change the contrast of the image .
8139	Desaturate the image .
8140	Invert the image .
8141	Translates the rect .
8142	Scale the image .
8143	Rotate the image .
8144	Flip the image .
8145	Shrpen the image .
8146	Get the levels of the image .
8147	Calculate the hue of two images .
8148	Load a namespace into a namespace
8149	Determine if the iteration should be run .
8150	Limit the number of frames in the frame .
8151	Add a variable .
8152	Convert hexadecimal color to RGB
8153	Simple traceback function .
8154	Create a new database .
8155	Create a new table .
8156	Create an index on a table .
8157	Close the cursor .
8158	Execute a SQL query
8159	Edit a record .
8160	Remove an item from the table .
8161	Return the next event .
8162	Publish an event .
8163	Set the transform mode .
8164	Recursively inherit all canvas attributes .
8165	Load the source from the source
8166	Reload function definitions .
8167	Run the main task .
8168	Execute the executor .
8169	Context manager to run the context .
8170	Calculate the separation of the booleans .
8171	Calculate the alignment of the booleans
8172	Limit the velocity to a maximum .
8173	The angle in radians
8174	Compute the goal of the camera .
8175	Update the mesh .
8176	Iterate over a string .
8177	Return a shallow copy of the graph .
8178	Return whether the node can reach the given node .
8179	Clears the graph .
8180	Add a node .
8181	Remove a node from the graph .
8182	Remove an edge from the graph .
8183	Return the edge between two IDs .
8184	Update the layout .
8185	Get the offset of a node .
8186	Draw the graph .
8187	Prune the tree .
8188	Calculate the difference between two nodes .
8189	Compute the eigenvector centrality .
8190	Return a filtered list of nodes with the given tolerance .
8191	Return a list of nodes by eigenvalue .
8192	Get all nodes by category .
8193	Return a descendant of this cluster .
8194	The density of the network .
8195	Load a node .
8196	Click a node .
8197	Calculate the arc between two points .
8198	Calculate the angle between two points .
8199	Transform from local coordinates to local coordinates .
8200	Set the bot .
8201	Set settings .
8202	Return the size of the image .
8203	Set the size .
8204	Snapshot a file .
8205	Flush a frame .
8206	Determine if two points overlap .
8207	Reflect the coordinates of a point .
8208	Calculate the angle between two points .
8209	Return the coordinates of a point .
8210	Returns True if the given point is contained within the given point .
8211	Insert a point at the given point .
8212	Draw the freehand .
8213	Export the path to SVG
8214	Shows the popup menu .
8215	Show the variables window .
8216	Hide variables window .
8217	Trigger fullscreen action .
8218	Perform fullscreen
8219	Unfills the screen .
8220	Close window .
8221	Toggle fullscreen mode
8222	Show the variables window .
8223	Main loop .
8224	Moves the mouse pointer to the namespace .
8225	Called when a key is pressed .
8226	Make an instance of the class .
8227	Make a Colorable instance .
8228	Display the current image .
8229	Import a libname .
8230	Set the canvas size .
8231	Get the current speed .
8232	Set callbacks .
8233	Return the complement of a color .
8234	Compute the complementary color .
8235	Split a complementary color .
8236	Calculate the complementary color .
8237	Calculate the complementary color .
8238	Make an equivalent color .
8239	Calculate a triad .
8240	Calculate the rotation of a color .
8241	Compute a compound color .
8242	Draw a path .
8243	Guess a color name .
8244	Compute the shader of a shader .
8245	Return a dictionary with aggregated files .
8246	Use morgue file .
8247	Convert a string to an RGB color .
8248	Rotate the wheel .
8249	Return the nearest hue of this color .
8250	Blend this color to another .
8251	Swatches the screen .
8252	Convert an image to RGB
8253	Convert a string into a list of RGB colors .
8254	Return a list of all the tags in the context .
8255	Return a copy of this ColorList .
8256	Finds the darkestring of the background .
8257	Calculate the average color .
8258	Sort the color list by distance distance .
8259	Return a copy of self .
8260	Sort the colors according to the given criteria .
8261	Reverse the color list .
8262	Repeat n times .
8263	Swap all cells in the grid .
8264	Draw a swarm .
8265	Interpolate a list of colors .
8266	Create a new color list .
8267	Create a new ColorRange .
8268	Get a color .
8269	Returns True if this color is contained in the current color .
8270	Return the XML representation of this color .
8271	Save the XML to disk .
8272	Load a color from the cache .
8273	Return a random color .
8274	Generate a list of colors .
8275	Create a new color theme .
8276	Apply a window to each color .
8277	Update the current frame .
8278	Iterate over all objects .
8279	Append an element .
8280	Render the renderer .
8281	Convert a line to a line point
8282	Calculate the length of a line .
8283	Calculate curve point
8284	Calculate the length of each segment .
8285	Return the length of the segment .
8286	Return a list of PathElement instances .
8287	Compute adjacency matrix .
8288	Get a widget by name
8289	Return the system sbot executable .
8290	The description of the page .
8291	Return a list of keywords .
8292	Sort a list .
8293	Remove duplicates from a list .
8294	Return a list of unique identifier ids .
8295	Return a list of cliques in the graph .
8296	Render the render queue .
8297	Dump binary data to stdout .
8298	Read a signed 32 - bit integer .
8299	Decode OSC data .
8300	Handles decoding .
8301	Dispatch a message .
8302	Add a callback .
8303	Find the example directory .
8304	Return True if the file is empty False otherwise .
8305	Load a source from the server .
8306	Close the process .
8307	Iterate over the response lines .
8308	Ensure the context is a pycffi .
8309	Create a Pango Cairo Cairo .
8310	Check if a string is a list
8311	Draw a math symbol .
8312	Draw a list .
8313	Draws a table .
8314	Parses the HTML and returns a dictionary of the tags .
8315	Parse links .
8316	Parses and returns a list of Wikipedia images .
8317	Parses a balanced image .
8318	Add a table to the table .
8319	Parse Wikipedia tables .
8320	Extract the categories from a markup string .
8321	Parse a markdown markup .
8322	Sanitize the value
8323	Check if l is a list .
8324	Check if s is a string .
8325	Build a tag map .
8326	Setup the tree .
8327	Extracts the element from the parent .
8328	Finds the last element beneath this object to be parsed .
8329	Finds the next match in the document .
8330	Find all documents matching the given criteria .
8331	Find next sibling of this page .
8332	Returns an iterator over the next sibling of this page .
8333	Searches for previous previous matches .
8334	Find all previous elements of the document .
8335	Find previous sibling of the document .
8336	Searches for previous siblings .
8337	Finds a parent by name .
8338	Returns a generator for all parents .
8339	Iterates over a generator looking for things that match .
8340	Convert string to unicode .
8341	Cheap function to invert a hash .
8342	Convert HTML entities to unicode .
8343	Recursively decompose the contents .
8344	Render the contents of this object as a string .
8345	Find an element matching the given criteria .
8346	Find all matching attributes .
8347	Returns a dictionary of attrMap .
8348	Convert a character reference to an integer .
8349	Return True if name is a self - closing tag .
8350	Convert a string into a string .
8351	Handle processing instructions .
8352	Handle character references as data .
8353	Parse a declaration at the end of the XML element .
8354	Starts the beginning of the metadata attribute .
8355	Substitute MS_CHARS to XML .
8356	Convert data to unicode .
8357	Detect the encoding of an XML string .
8358	Generate a demo example .
8359	Scale the context and center it .
8360	Draws the canvas .
8361	Create an rcontext context .
8362	Encode an object .
8363	Returns a mapping of Gdk class names to keys
8364	Return the filename for a frame .
8365	Create an rcontext object .
8366	Finish rendering .
8367	Generates a closure for the given target .
8368	Parse the description .
8369	Create a canvas .
8370	Create a bot .
8371	Run a script .
8372	Saves this file as a dialog .
8373	Called when a widget has changed
8374	Called when a variable is added .
8375	Called when a variable is deleted
8376	Parses an SVG .
8377	Get the value of an attribute .
8378	Add color information to path .
8379	Return a copy of the event .
8380	Drag a node .
8381	Overrides popup .
8382	Return the path of the text at i .
8383	Update the current speed .
8384	Draw the text .
8385	Main entry point .
8386	Add a filename to the filename .
8387	Check if a file exists .
8388	Merge configuration options into main .
8389	u Write text to file .
8390	Validate the file .
8391	Check that the class is a visitor class .
8392	Return a fully qualified class name .
8393	Parse pylint output .
8394	Main entry point .
8395	Print the help of the command .
8396	Create a new transformation class .
8397	Get a transform from a string
8398	Return all breaks in the domain .
8399	Convert a datetime to a timestamp .
8400	Rescales an array .
8401	Rescales the lower and upper bounds of an array .
8402	Rescale maximum value .
8403	Squish inf .
8404	Squish an array .
8405	Concatenate x with a given range .
8406	Test if x is a zero - range .
8407	Expand a range .
8408	Expand a range from a range .
8409	Extend the major breaks .
8410	Determine the best units for a sequence .
8411	Returns the limits of the plot .
8412	Convert numeric values to timedelta .
8413	Convert datetime to numeric
8414	Round to the given accuracy .
8415	Return the minimum and maximum of x .
8416	Returns the precision of x .
8417	Sort a list of numeric types .
8418	Return nearest integer .
8419	Return True if x is close to an integer .
8420	Return True if x is the same order of x .
8421	Format a ticker .
8422	Takes a list of labels and returns a list of integers .
8423	Return a palette of hls .
8424	Return a list of RGB colors .
8425	Generate a color palette .
8426	Create a color palette .
8427	Generate a brewer palette .
8428	Creates a gradient function that returns a palette of colors .
8429	Factory function to create a color map .
8430	Return a colormap .
8431	Desaturate a color .
8432	Generate a palette from a list of values .
8433	Create a palette for cubehelix
8434	Apply a transformation to an array .
8435	Apply a palette to a palette .
8436	Apply a palette to a palette .
8437	Decorator to register a type .
8438	Patched run hook .
8439	Generate files for a given repo .
8440	Sets up the project .
8441	Parse a Link header .
8442	Search for repositories .
8443	List the cookies for a GitHub user .
8444	Update the latest template .
8445	List projects .
8446	Switches the given template and version .
8447	Determine if we are in a git repo
8448	Verify that the given branch exists .
8449	Raise an exception if branch exists .
8450	Ensure environment variables are set .
8451	Checks if the project is a regular project .
8452	Get the current branch name
8453	Delete the current branch .
8454	Check if the cookiecutter configs have changed .
8455	Apply a template to a target .
8456	Checks if the given version is up to the given version .
8457	Determine if a new CCC config file has changed .
8458	Run a shell command .
8459	Read the configuration file .
8460	Write a configuration file to disk .
8461	Get the cookiecutter for a given template .
8462	Set the command env var .
8463	Make a call to the API .
8464	Deploy to a production branch .
8465	Find file .
8466	Run the server .
8467	Set the path of the request .
8468	Parse the config value .
8469	Returns the OS name .
8470	Execute the command .
8471	Print a debug message .
8472	Sets up the scanners .
8473	Add config values to config
8474	Get the configuration values for a given section .
8475	Return an instance of a class .
8476	Execute a method on the given path .
8477	Execute an escaneo depsentraps .
8478	install npm
8479	Set the potential .
8480	Get a configuration value .
8481	Get environment variable .
8482	Get environment variable .
8483	Set a setting .
8484	Update a configuration dictionary .
8485	Load settings from pyconfig .
8486	Get a setting value .
8487	Initialize the connection
8488	Load configuration from etcd .
8489	Get a watch .
8490	Start watcher .
8491	Parse a comma - separated list of hosts .
8492	Main entry point .
8493	Parse a module .
8494	Print an error message .
8495	Get the filename of a module .
8496	Parse and output a pyconfig file .
8497	Output a list of calls to stdout .
8498	Format a call .
8499	Highlights output using pygments .
8500	Map an arg to its name .
8501	Return the value as a namespace .
8502	Return the value as a live value .
8503	Return the configuration as a call .
8504	Get the key from the source line .
8505	Return the default value of the source line .
8506	Return the default value .
8507	Return a list of parameter names .
8508	Get the dataset .
8509	Train the model .
8510	Predict function .
8511	Load a yaml file .
8512	Create a kernel .
8513	Fit an estimator using the estimator .
8514	Recursively merge two dictionaries .
8515	Format a timedelta object into a string .
8516	Assert that X contains NaNs .
8517	Warn if the result is not finite .
8518	Create a Config object from a dictionary .
8519	Return the sha1 of the file .
8520	Plot t - SNE embedding .
8521	Plot a 2D scatter plot .
8522	Add an integer variable .
8523	Add a floating point variable .
8524	Add an enum variable .
8525	Decorator to log a callback .
8526	Find a matching pattern .
8527	Add a child element .
8528	Extract an IP packet from data .
8529	Write the results to the output file .
8530	Return the difference between two structures .
8531	Return a list of structs .
8532	Determine if two messages are diffable .
8533	Return True if this object is an identity of the same type .
8534	Read data from memory .
8535	Pop nbytes from the packet .
8536	Pop nbytes from the packet .
8537	Push an IP packet onto the stack .
8538	Main loop .
8539	Get a disk image by name .
8540	Read the config file .
8541	Save the config to a file .
8542	Get a username .
8543	Get a password .
8544	Get information about a datacenter .
8545	Get a datacenter by name .
8546	Delete a datacenter .
8547	Retrieves a firewall rule .
8548	Delete a firewall rule .
8549	Create a firewall rule .
8550	Updates a firewall rule .
8551	Delete an image .
8552	Update an image .
8553	Delete an IPblock .
8554	Reserve an IP block .
8555	Get information about a LAN .
8556	Returns a list of LANs for the specified datacenter .
8557	Delete a LAN .
8558	Creates a LAN .
8559	Update a LANLAN .
8560	Retrieves the members of a LAN .
8561	Retrieves a load balancer .
8562	List loadbalancers .
8563	Delete a load balancer .
8564	Creates a load balancer .
8565	Updates a load balancer .
8566	Get the members of a load balancer .
8567	Adds a balance to a load balancer .
8568	Retrieves a loadbalanced NIC .
8569	Remove a loadbalanced NIC from a load balancer .
8570	Get information about a location .
8571	Get information about a NIC .
8572	Returns a list of nics on the server .
8573	Delete a NIC .
8574	Creates a NIC .
8575	Update a NIC .
8576	Get a specific request .
8577	Get information about a server .
8578	List the servers on the server .
8579	Delete a server .
8580	Creates a new server .
8581	Update a server .
8582	Retrieves the volumes attached to a server .
8583	Retrieves an attached volume .
8584	Attaches a volume to a server .
8585	Returns a list of CDroms attached to a server .
8586	Retrieves a CDrom .
8587	Attaches a CDrom to a server .
8588	Starts a server .
8589	Stop a server .
8590	Reboot a server .
8591	Creates a snapshot .
8592	Restore a snapshot .
8593	Remove a snapshot .
8594	Get a group .
8595	Create a group .
8596	Update a group .
8597	Delete a group .
8598	List all shares in a group .
8599	Get a share .
8600	Add a share to a group .
8601	Delete a share .
8602	Get information about a user .
8603	Create a user .
8604	Update a user .
8605	Delete a user .
8606	List users in a group .
8607	Add a user to a group .
8608	Remove a user from a group .
8609	Returns a list of all available resources .
8610	Get a specific resource .
8611	Get a specific volume .
8612	List all the volumes in a datacenter .
8613	Delete a volume .
8614	Create a new volume .
8615	Wait for a request to complete .
8616	Convert to bytes .
8617	Convert a string to a camel case .
8618	Find an item by name
8619	Get information about the server .
8620	Get the status of a server .
8621	Get the current request .
8622	Get a user by ID .
8623	Get the current user ID .
8624	Add one or more jobs to this group .
8625	Set the user s jobs .
8626	Delete one or more jobs .
8627	Get users by user .
8628	Create a project .
8629	Create a new project .
8630	Get projects by query .
8631	Get a project by ID .
8632	Search projects .
8633	Places a project bid .
8634	Get all bids .
8635	Get a list of all the milestones .
8636	Get a milestone by ID .
8637	Advance a project bid .
8638	Revoke a project bid .
8639	Accept a project bid .
8640	Retrieve a project bid .
8641	Highlight the project bid .
8642	Create a new milestone .
8643	Create a track .
8644	Update a track .
8645	Get a track by id .
8646	Create a new milestone request .
8647	Accept a milestone request .
8648	Reject a milestone request .
8649	Delete a milestone request .
8650	Post a review .
8651	Get a list of jobs
8652	Create a new thread .
8653	Create a project thread .
8654	Get a list of messages .
8655	Search for messages in a thread .
8656	Get threads by query .
8657	Validate a zipcode .
8658	Return a list of zips that match a partial_zipcode .
8659	Filter zips by kwargs .
8660	Return True if name is a valid identifier .
8661	Create a PaletteEntry from a configuration dictionary .
8662	Migrate a stash .
8663	Generate a password .
8664	Build a dict from keys and values .
8665	Prettify a list of available keys .
8666	r Initialize a stash .
8667	Store a key .
8668	Lock a key .
8669	Unlock a key .
8670	Get a key .
8671	Delete a key .
8672	List all available keys .
8673	Purge a stash .
8674	Export keys from a stash .
8675	Load all keys from a key file .
8676	Migrate all keys from one stash to another .
8677	Executor for SSH .
8678	Put a key .
8679	Get a key .
8680	Retrieve a list of passwords from the store .
8681	Delete a key .
8682	Delete the stash .
8683	Export all keys to a file .
8684	Load stash from a stash file .
8685	Encrypt a value .
8686	Decrypt a hexified value .
8687	Get a key by its name .
8688	Delete a key .
8689	Construct a key from a list of values .
8690	Put a key
8691	Stores the given key .
8692	Initialize the index
8693	Initialize bucket .
8694	Create a miniterm .
8695	Set the baud rate .
8696	Set the timeout .
8697	Clears the input buffers .
8698	Wait until the device is reached .
8699	Write to the port .
8700	Exchange the output .
8701	Close the serial port .
8702	Prepare esp for transfer .
8703	Download a file .
8704	Read a file .
8705	Transfer a file to the device .
8706	Verify a file .
8707	Execute a file .
8708	Wait for an ACK .
8709	Write the given string to the wire .
8710	Write chunk .
8711	Read a chunk from the port .
8712	Return a list of all the files on the server .
8713	Execute a file
8714	Format the file format .
8715	Print a file .
8716	Returns the number of available nodes .
8717	Compile a file .
8718	Remove a file
8719	Back up all the files in the given path .
8720	Perform an operation upload operation .
8721	Perform a download operation .
8722	List all files in uploader .
8723	Display the given content .
8724	Convert timestamp to datetime .
8725	Create a new command .
8726	Localize datetime .
8727	Create a new datetime for the given date .
8728	Convert a datetime to a string .
8729	Convert a string to a datetime object .
8730	Get the nearest year for a given day .
8731	Get the number of seconds for a given period .
8732	Divide a timedelta .
8733	Parse a comma - separated datetime string .
8734	Divide a timedelta .
8735	Iterate over a date range .
8736	Construct a datetime object .
8737	Perform a GET request .
8738	Get the number of ports in a tenant .
8739	Allocates a V6 address .
8740	Creates a flip
8741	Create a Floating IP .
8742	Update a floating IP .
8743	Delete a floatingip .
8744	Get a floating IP .
8745	Get a list of floatingips .
8746	Get the number of floatingips in a tenant .
8747	Create a scalingip .
8748	Update a scalingip .
8749	Delete scalingip .
8750	Get a scaling IP .
8751	Get a list of scaling IPs for the tenant .
8752	Return True if vif is an IISet vif
8753	Partition the vifs .
8754	Return a list of security groups that have changed .
8755	Run the security group .
8756	Delete tenant quotas .
8757	Validate a subnet with the given CIDR .
8758	Get a subnet .
8759	Get subnets .
8760	Count the number of subnets in the tenant .
8761	Delete a subnet .
8762	Perform an asynchronous update operation .
8763	Update a security group rule .
8764	Return the public net id of the strategy .
8765	Decorator for opt_args .
8766	Ensure tenant_id is missing .
8767	Validate allocation pools .
8768	Add a job to the context .
8769	Create a job .
8770	Check if a logical switch is open .
8771	Add default tz_tz binding .
8772	Remove the default tz values for the given network .
8773	Returns a list of uswitch ids for the given network .
8774	Load a worker plugin .
8775	Discovers the name and plugin classes .
8776	Start the api and wait for it to finish .
8777	Split an iterable into chunks .
8778	Check if new_ranges overlap .
8779	Attempt to allocate a segment .
8780	Delete lock holders .
8781	Create lock holder for given addresses .
8782	Select the IPAM strategy for a network .
8783	Get details about the base network .
8784	Create a port .
8785	Update port .
8786	Get the port for a given port .
8787	Set the value of the model .
8788	Get the value from the model .
8789	Remove tags from the model .
8790	Pop an item off the stack .
8791	Return True if the model has a tag .
8792	Validate vlan_id .
8793	Get all the tags for a given model .
8794	Set all tags on the model .
8795	Serialize rules to a list .
8796	Serialize a group into a list .
8797	Applies security group rules to a device .
8798	Get security group states .
8799	Update group states .
8800	Run migrations on the database .
8801	Run migrations on the database .
8802	Notify network .
8803	Notify IP address .
8804	Builds the payload for an IP address .
8805	Given a period_start and period_end and period_end return a list of IPAddresses .
8806	Calculate the start and end times .
8807	Make a job dictionary .
8808	Get mac address range .
8809	Delete a MAC address range .
8810	Delete segment allocation range .
8811	Create a filter factory .
8812	Get all available IPs .
8813	Get the number of unused segments in the segment .
8814	Get all VIF interfaces from the Xapi .
8815	Update security groups .
8816	Update a network .
8817	Get a network by id .
8818	Get a list of networks .
8819	Get network number .
8820	Delete a network .
8821	Make a case 2 .
8822	Main function .
8823	Start RPC listener .
8824	Returns the admin context .
8825	Update a security group .
8826	Populate the subtasks .
8827	Update ports for a port .
8828	Gather the ports associated with a group .
8829	Update a security group rule .
8830	Find all segments in the database .
8831	Send data to the socket .
8832	Returns the value of the first argument or None if not found .
8833	Soft equality .
8834	Return True if a and b is less than b .
8835	Return True if a and b is less than or equal .
8836	Calculate the negative value .
8837	Merge multiple lists .
8838	Get a variable from the data .
8839	Return a list of values that are missing
8840	Return a list of items that satisfy min_required
8841	Returns the JSON - Logic logic function .
8842	Indent the text .
8843	Unindent tab .
8844	Handle indentation between brackets .
8845	Return True if line starts at a block start .
8846	Update terminal colors .
8847	Updates the cursor position .
8848	Handles open file press events .
8849	Sets up the actions .
8850	Setup the editor .
8851	Open a file .
8852	Create a new tab widget
8853	Opens the file .
8854	Save the current file .
8855	Setup the styles menu .
8856	Called when the tab has changed
8857	Event handler for run
8858	Go to the next doc .
8859	Extract signature from calltips .
8860	Go to assignments .
8861	Return a list of all names defined in the request data .
8862	Return a list of docstrings .
8863	Run PEP8 analysis .
8864	Convert a name to an icon name
8865	Return a list of completions
8866	Generate python patterns .
8867	Check word under cursor .
8868	Remove duplicates from a sequence .
8869	r Read variants from a BED file .
8870	r Create a metafile file .
8871	Match the given subsetLines .
8872	Matches the given subsetLines .
8873	Checks if an instance is an instance of type list .
8874	Tries to touch a file
8875	r Calculate allele frequency .
8876	r Compute the dosage of an exposure .
8877	r Calculate allele expectation for a variant .
8878	Find the library name .
8879	Calculate the optimal forest model .
8880	Predict probabilities for X .
8881	Fits the estimator .
8882	Predict probabilities for X .
8883	Predict the mean of each sample .
8884	Fit the model .
8885	Fit the model to an array .
8886	Finalize the head .
8887	Fit the model .
8888	Fit the model .
8889	Return the foreign key of a class .
8890	Serialize the object into a dictionary .
8891	Deserialize a model from a dictionary .
8892	Return the default value .
8893	Calculate a unique UUID .
8894	Add a model to the deleted models .
8895	Parse an HTTP response .
8896	Default poll callback .
8897	Calculate the priority of ficity between fisc1 and ficity .
8898	Deserialize a profile from the database .
8899	Dequeues records into the database .
8900	Sets the maximum parameter substitution .
8901	Authenticate user and password .
8902	Checks if the given class_model is a multiple of the same class .
8903	Add syncable models .
8904	Make a request .
8905	Create an access token .
8906	Save a service .
8907	List all registered services .
8908	Fetch a service by name .
8909	Fetch a service by url .
8910	Redirect to wsproxy
8911	Create a tornado_security_tween .
8912	Include twitcher .
8913	Save a service .
8914	List all services .
8915	Fetch a service by name .
8916	Retrieve an OAuth certificate .
8917	Get a parameter from the request .
8918	Get the version parameter .
8919	Get the service name .
8920	Get request type .
8921	Get the version of the request .
8922	Localize datetime .
8923	Return the base url of a service .
8924	Returns a boolean indicating whether or not the value is valid .
8925	Get the egg_info file .
8926	Bump the project version .
8927	Create a distribution
8928	Prepare the setup .
8929	Run pylint .
8930	Determine if the workdir is unchanged .
8931	Create a description file .
8932	Execute a command and capture output .
8933	Run a command .
8934	Try to detect a git repository .
8935	Generate an SCM provider .
8936	Log an error .
8937	Get user and password from config file .
8938	Build Sphinx confluence .
8939	Generate a zip file from the docs_base .
8940	Upload to a pypi file .
8941	Convert a release to a webdav file .
8942	Upload to docs_base
8943	Search for a file by name
8944	Context manager to temporarily change working directory .
8945	Yield a file from a URL .
8946	Run a command .
8947	Run a command .
8948	Print a message to stdout .
8949	Print warning message .
8950	Print an error message .
8951	Get devpi url .
8952	Return the project root .
8953	Load the configuration .
8954	Convert glob to regular expression
8955	Parse a glob pattern .
8956	Compile a glob .
8957	Return True if path is included in the collection .
8958	Recursively walk the directory tree .
8959	Build the distribution .
8960	Cleanup project files .
8961	Build Sphinx docs .
8962	Freeze requirements . txt file
8963	Convert datetime to ISO 8601 format .
8964	Retrieves the registered executable .
8965	Return a list of matches for a given command .
8966	Return the first occurrence of the given command .
8967	Step the chain .
8968	Decrypt the given ciphertext .
8969	Encrypt a message .
8970	Perform a single step .
8971	Return the next chunk of data .
8972	Connect to another mesh
8973	Return whether this mesh can connect to other .
8974	Factory function to create a loader for lifting patterns .
8975	Walks each row and returns a list of rows
8976	Return the file as a string .
8977	Write to a file .
8978	Write to a binary file .
8979	Write to a file .
8980	Return a temporary file path .
8981	Set the color of a pixel .
8982	Set a pixel on the image .
8983	Convert an instruction or tuple to a _Instruction_id .
8984	Convert an instruction to SVG .
8985	Convert an instruction to SVG dictionary .
8986	Called when an instruction changes .
8987	The last produced mesh .
8988	The last mesh .
8989	The first produced mesh .
8990	The first mesh in this instruction .
8991	Returns a list of all the rows before the consumed mesh .
8992	Returns a list of all the rows that were consumed .
8993	Return all files in a folder .
8994	Return the relative path of a folder .
8995	Return the absolute path of a file .
8996	Return the relative path of the example .
8997	Return the content of a webpage .
8998	Create an object from a string .
8999	Write the knitting pattern to a file .
9000	Unique elements in iterables .
9001	Build SVG dictionary .
9002	Register an instruction .
9003	Compute the scale for an instruction .
9004	Convert KnittingPattern to SVG .
9005	Add a new pattern .
9006	Convert this instruction to an SVG .
9007	Transfer instruction to new_row .
9008	Returns the instruction in which this instruction is in .
9009	Return the next instruction in the row .
9010	The index of the first produced mesh in this row .
9011	Return the index of the first consumed mesh in the row .
9012	Starts the instruction .
9013	Create a new pattern set .
9014	Fill pattern_collection with patterns .
9015	Create a new row .
9016	Return the instruction in the specified row .
9017	Create a new pattern from a dictionary .
9018	Create a new pattern .
9019	Create a row collection from a spec .
9020	Connect a set of MESH rows .
9021	Create a new pattern set .
9022	Add a new row to the table .
9023	Write bytes to the file .
9024	Write string to file .
9025	Return the svg .
9026	Inserts definitions into the svg
9027	The width of the instruction .
9028	The list of instructions in the grid .
9029	Perform a single step .
9030	Expand the given mesh into the given row .
9031	Expand the given mesh into the given row .
9032	Place a row at the given position .
9033	Walk through the list of tasks .
9034	Return an instruction in grid .
9035	Iterate over the instructions in the table .
9036	Iterate over all rows in the grid .
9037	Iterate through all connected connections .
9038	The bounding box of each row .
9039	Dump the document to a file .
9040	Add an instruction .
9041	Return an instruction .
9042	Eigenvectors of the tensor .
9043	Gradient of gradient
9044	Add a callback function .
9045	Gradient of gradient
9046	Solve Ax = A
9047	Multiply multivariate normal distribution .
9048	Return the gradient of the covariance .
9049	Matrix B .
9050	r Samples from Bernoulli distribution .
9051	Sample from a Poisson distribution .
9052	r Compute the covariance of the covariance matrix .
9053	r Compute the posterior distribution of the posterior distribution .
9054	r Calculates the posterior covariance of the posterior distribution .
9055	Perform a fast scan .
9056	r Sample from the posterior distribution .
9057	Compute and return the zeros .
9058	r Compute the gradient of the model .
9059	Gradient of gradient
9060	The beta of the covariance matrix .
9061	The beta covariance matrix .
9062	Modify the parameter .
9063	Unfix a parameter .
9064	Maximize the model .
9065	Return the LML value .
9066	The delta of the logistic .
9067	Return the optimal log likelihood scale .
9068	Calculate the arithmic scale
9069	The number of samples in this dataset .
9070	r Compute the value of the model .
9071	r Initialize the covariance matrix
9072	Build and return an engine and session .
9073	Get the connection name .
9074	Create a custom SMTP client .
9075	Sends multiple recipients .
9076	Start the server .
9077	Make a downloader .
9078	Return a function that returns a dataframe .
9079	Decode a timestamp .
9080	Return a list of provider providers .
9081	Returns a list of concepts .
9082	Returns a list of all concepts
9083	Get a concept by URI .
9084	Configure upload
9085	Update the brief backend
9086	Sort a list of concepts .
9087	Update the device state .
9088	Main loop .
9089	Iterate over the namespace models .
9090	Get the default namespace .
9091	Create a new namespace .
9092	Returns the set of old entries in a namespace .
9093	Update a namespace entry .
9094	Add a BEL namespace to a BEL graph .
9095	Add the annotation to the graph .
9096	Create a BEL namespace .
9097	Drop BEL namespace .
9098	Write BEL namespace to file .
9099	Write BEL annotation .
9100	Write BEL namespace mappings to a file .
9101	Write the BEL namespace to a directory .
9102	Get the namespace hash of the namespace .
9103	Get long description from README . rst file .
9104	Return a dropbox object .
9105	Return a dropbox object .
9106	Return a dropbox editor .
9107	Sanitize a filename .
9108	Remove all attachments and attachments .
9109	Create an encrypted zip file .
9110	Create encrypted backup of cleaned attachments .
9111	Returns the total size of all attachments .
9112	Return the replies .
9113	Return the message .
9114	Returns a list of all attached attachments .
9115	Return a list of all attached attachments .
9116	Reset all workers
9117	Reset all the locks .
9118	Create an admin .
9119	Displays the dropbox form .
9120	Upload a dropbox attachment .
9121	Submit a dropbox .
9122	Return a function that returns a function that will be used in obonet .
9123	Convert BEL graph to BELNS .
9124	Convert BEL annotation to BEL annotation file .
9125	Store a model .
9126	Create a new session .
9127	Create all tables .
9128	Stores the given resource .
9129	Store a copy of a resource .
9130	Store a drop action .
9131	List actions .
9132	Return the number of instances in the database .
9133	Get the data directory .
9134	Returns a module configuration class .
9135	Get a connection from a module .
9136	Return a mapping of biobel modules .
9137	Clear the cache .
9138	Drop all tables .
9139	Return the label for a given language .
9140	Find the label for a given language type .
9141	Filter labels by language .
9142	Return the sortkey for the given key .
9143	Iterate over all managed managers .
9144	Drop all databases .
9145	Clear all of the modules .
9146	Generate a tabular sheet .
9147	Run Bio2bel .
9148	List all actions .
9149	Return the number of relationships in the graph .
9150	Convert to INDRA Statements .
9151	Convert input object to pgmagick list .
9152	Convert a list of PathList to a VPathList .
9153	Get EXIF information .
9154	Draw a Bezier curve .
9155	Scale the canvas .
9156	Draw a line cap .
9157	Draw a line join .
9158	Return the version of pgmagick .
9159	Delete a license request .
9160	Delete roles request .
9161	Delete acl request .
9162	Process a channel .
9163	Lookup all API key information .
9164	Include OpenSTax Auth Policy .
9165	Expand environment variables .
9166	A task decorator .
9167	Create celery app .
9168	Called when a module is finished .
9169	Parse an archive URI .
9170	Declare API routes .
9171	Add routes to the config .
9172	Include pyramid views .
9173	Create the formatter callback .
9174	Bake a Recipe from a given recipe .
9175	Create a connection to the database .
9176	Decorator to add a cursor .
9177	Dissect the user s roles .
9178	Retrieve the licenses from the database .
9179	Validate license .
9180	Validate the roles of the model .
9181	Validate subjects .
9182	Validate a model .
9183	Lookup a document pointer for a given identifier .
9184	Convert a tree to a model pointer .
9185	Reassemble a binder using cnxepub .
9186	Return the moderations .
9187	Include cookies .
9188	Displays print styles .
9189	Get API keys .
9190	Get the status of a book .
9191	Insert the metadata into the database .
9192	Get the SHA1 of a file .
9193	Insert a file into the database .
9194	Publish an EPUB .
9195	Get a publication .
9196	Include a cache manager .
9197	Get the value of a key .
9198	Remove a key from the map .
9199	Generator for reverse reversals
9200	Decorator for extract_cycles
9201	Extract cycles from a series .
9202	Count the number of cycles in a series .
9203	Render a node .
9204	Return the node corresponding to the given path .
9205	Prepend a constant .
9206	Get the prefix for multicodec .
9207	Add prefix to multicodec .
9208	Remove prefix from bytes .
9209	Extract the codec from a byte string .
9210	Capture an archive .
9211	Capture an archive .
9212	Get the image of a channel .
9213	r
9214	r \ \ \ \ \
9215	r
9216	Read a file .
9217	Read input file .
9218	Return the state of a given name .
9219	Find a block by name
9220	Parse arguments .
9221	Mix two colors .
9222	Reverse lst
9223	Takes a number and returns a float .
9224	Convenience function to convert a value to an integer .
9225	Generate permutations of an iterable .
9226	Parse the result .
9227	Return the next page .
9228	Get all tags in the repo .
9229	Fetch closed pull requests .
9230	Fetch the creation date of a repository .
9231	Fetch all events for a given issue .
9232	Fetch the date of a given tag .
9233	Fetch a commit .
9234	Generate a changelog .
9235	Parse the data into a list of sections .
9236	Return a map of signal handlers .
9237	Open the environment .
9238	Retrieve user and project from options .
9239	Convert a string to a datetime object .
9240	Fetch events for issues and PR
9241	Fetch the dates for each tag .
9242	Detect the actual closed dates for the given kind .
9243	Finds the closed date for the given issue .
9244	Set the date from an issue .
9245	Encapsulates a string and returns it .
9246	Generate a compound changelog .
9247	Generate a sub section for the given issues .
9248	Generate the log file .
9249	Generate log between two tags .
9250	Filter issues by newer tags .
9251	Generate log for all tags .
9252	Generate an unleased log file .
9253	Returns a string with the title of the issue .
9254	Add user to issue line .
9255	Generate the log for a given tag .
9256	Convert issues into log format .
9257	Exclude issues by label .
9258	Find issues to add to the given tag .
9259	Delete issues by time .
9260	Include issues by label .
9261	Filter issues by labels .
9262	Filter issues by include_labels .
9263	Filter pull requests by labels .
9264	Filter pull requests by merge date
9265	Fetch and filter tags
9266	Sort tags by date .
9267	Get the time of a tag
9268	Determine the time of a tag .
9269	Get the version of the first item .
9270	Get a temporary tag for this repository creation .
9271	Filters out tags that are older than the given tag .
9272	Filters out due tags .
9273	Filters the given tags based on the given tags .
9274	Filters out all tags .
9275	Return a list of all tags that match the exclude_tags_regex .
9276	Apply exclude_tags to all_tags .
9277	Parse packet .
9278	Convert a string to a decimal value .
9279	Convert a number to a string .
9280	Calculate passcode from callsign string .
9281	Parse packet header .
9282	Set the filter .
9283	Sets the user s login .
9284	Connect to the server .
9285	Close the socket .
9286	Send a line to the socket .
9287	Read lines from the server .
9288	Connect to the server .
9289	Send login information .
9290	Read lines from the socket .
9291	Convert a value into a UUID .
9292	Return a UUID .
9293	Encrypt a value .
9294	Create a hash value .
9295	Disconnect all connections .
9296	Get the database for a given model .
9297	Return a dict mapping primary keys to primary keys .
9298	Paginate a query .
9299	Apply filters to a query .
9300	Retrieve a list of items from the database .
9301	Retrieve an object from the database .
9302	Generates a new signing key .
9303	Extract the date from the request .
9304	Parse a date string .
9305	Handle a date mismatch .
9306	Encode the request body .
9307	Return a canonical request from a request .
9308	Return a list of canonical headers .
9309	Generates a signature string from the request .
9310	Convert path to amz_path
9311	Parse a query string .
9312	Generates a key for AWS 4 requests .
9313	Sign a message
9314	Format a datetime . datetime object .
9315	Convert a datetime to a string .
9316	Convert a response into a JSON object .
9317	Refresh the content of this object .
9318	Waits until the status is completed .
9319	Validate the status .
9320	Validate the collection .
9321	Validate API root .
9322	Refresh information .
9323	Fetches information from the server .
9324	Refreshes the collection .
9325	Validate the server s URL .
9326	Refresh the object .
9327	Return True if content_type is valid .
9328	Perform a GET request .
9329	Perform a POST request .
9330	Return the total memory in bytes .
9331	Return the number of CPU cores .
9332	Create an empty copy of an array .
9333	Create a copy of an array .
9334	Create a shared array .
9335	Return a copy of an array .
9336	Get an item from the queue .
9337	Wait for the result to finish .
9338	Apply a function to a sequence .
9339	Load data from a text file .
9340	Flatten a dtype .
9341	Meta class decorator .
9342	Kill all processes .
9343	Abort the game .
9344	Read n items from the pool .
9345	Call a function on an axis .
9346	Adapt a packarray from a packarray .
9347	Sort an array .
9348	Return the year .
9349	Return a datetime . datetime object .
9350	Check digit number .
9351	Generate a random number .
9352	Returns a random street number .
9353	Generate a job title .
9354	Return a text representation of the body .
9355	Generate money .
9356	Generate a list of words .
9357	Generate a list of sentences .
9358	Create a paragraph of text .
9359	Return a list of paragraphs .
9360	Convert a string to lower - letter letters .
9361	Generate a list of characters .
9362	Get the text for the given text .
9363	Returns a random user name .
9364	Returns a random domain name .
9365	Convert a user name to an email address .
9366	Generate a random account number .
9367	Generate a bik .
9368	Generate a legal inn .
9369	Generate a legal ogrn .
9370	Generate a random person .
9371	Generate a password .
9372	Read data from a stream .
9373	Check if url is valid
9374	Download a config file .
9375	Get the start time period for the run_steps .
9376	Extracts the differences between the given config file .
9377	Calculate statistics for a given data list .
9378	Validate a file .
9379	Detect the format of a timestamp .
9380	Convert timestamp to standard format
9381	Set a SLA rule .
9382	Aggregate count over time .
9383	Parse the XML file .
9384	Parse the JTL file into a dictionary .
9385	Convert word to G .
9386	Parses the input file .
9387	Get a list of URLs from a seed URL .
9388	Plot the difference between two datasets .
9389	Checks the sla against the sla
9390	Convert a timestamp to an integer .
9391	Aggregate the number of times over a given time .
9392	Calculate the stats for each group .
9393	Check if a sub_metric is contained in self . important_metrics .
9394	Plot the cdf file .
9395	Compute the smoothing scores .
9396	Extract the metric name from the given metric name .
9397	Run the oct2py speed test .
9398	Terminate the engine .
9399	Restart the engine .
9400	Evaluate a function .
9401	Parse an error .
9402	Check if a value exists in octave workspace .
9403	Return True if the object exists False otherwise .
9404	Get a function pointer .
9405	Get a user class by name .
9406	Cleanup workspace .
9407	Read a MATLAB MAT file .
9408	Save an object to a mat file .
9409	Extract data from a Matlab object .
9410	Create Struct from data .
9411	Encode a data object .
9412	Return True if data is a simple numeric type .
9413	Setup stdout .
9414	Create a class for a user class .
9415	Create a new instance from the given value .
9416	Convert an instance to a Matlab object .
9417	Convert an instance to a OctavePtr .
9418	Decorator to configure a view function .
9419	Format a function docstring .
9420	Determine whether a file is a RAR file .
9421	Read an RARInfo object .
9422	Process a file op .
9423	Load the metadata for a file .
9424	Open an RAR archive .
9425	Open a RAR archive .
9426	Return a list of all the file names .
9427	Return the info for the given name .
9428	Print directory contents .
9429	Extract a member from a RARInfo object .
9430	Extract members from the archive .
9431	Convert datetime to datetime
9432	Decorator for functions .
9433	Load savefile header .
9434	Load a pcap file .
9435	Read a packet .
9436	Strip an IP from a packet .
9437	Strip Ethernet from packet .
9438	Load the network .
9439	Send a call heartbeat notification
9440	Perform an HTTP request .
9441	Reload the configuration .
9442	Reload the cache configuration .
9443	Make an API call .
9444	Perform bulk call .
9445	Create a group call .
9446	Transfer a call .
9447	Hookup all calls .
9448	Hookup call .
9449	Schedule a hangup .
9450	Cancel scheduled hangup .
9451	Record start operation .
9452	Mute conference .
9453	Perform a play request .
9454	Stop playback .
9455	Schedule a play request .
9456	Cancel scheduled play .
9457	Touch a sound .
9458	Stop recording .
9459	Send Digits API .
9460	Unmute a conference .
9461	Kick a conference .
9462	Perform conference hangup .
9463	Update conference deaf
9464	Undecast a conference .
9465	Start a conference record .
9466	Stop a conference record .
9467	Perform conference play .
9468	Speak a conference .
9469	List conference list .
9470	List members of the conference list .
9471	Return an XML representation of this object .
9472	Validate a request against the expected signature .
9473	Returns the prefix of the DFS prefix .
9474	Return a list of nodes starting at root .
9475	Add a node to the graph .
9476	Add an edge between two nodes .
9477	Parse a GraphML document into a Graph object .
9478	Parse a string .
9479	Return the node of the given node .
9480	Create an argument parser .
9481	Convert the condition to bytes .
9482	Return a 32 - byte string that represents this instruction .
9483	Convert the iterator to a byte string .
9484	Validate a collection of objects .
9485	Validate a lattice structure .
9486	Ensure instruction is correct .
9487	Pack a value into a byte array .
9488	Generate a simple call .
9489	Generate bytecode from obb .
9490	Get the value of const_index .
9491	Get the name and repr of a name .
9492	Compile bytecode into bytecode .
9493	Simulate the stack .
9494	Compile python code .
9495	Parses the document_id of the document .
9496	Parse a Python module .
9497	Parse a collection .
9498	Parse a LZIP file into a list of dictionaries .
9499	Convert a complete zip file into a Python object .
9500	Get instructions from instructions .
9501	Disassemble the instruction .
9502	Return the intersection of two lists .
9503	Remove elements contained in a list .
9504	Return the distance between the given point .
9505	Return True if the interval intersects the interval .
9506	Return True if i is contained within this region .
9507	Return the intersection between self and self .
9508	Return the union of the interval i .
9509	Return the intersection between self and self .
9510	Return a new FASTA .
9511	Replace all bases .
9512	Find gaps in the sequence .
9513	Convert this sequence into an Interval object .
9514	Is this interval?
9515	Convert the sequence into Fastq object .
9516	Return a subseq from start to end
9517	Remove NN from the sequence .
9518	Count the number of sequences in a file .
9519	Interleave two sequences .
9520	Generate random contigs .
9521	Calculate mean length of a file .
9522	Merge two sequences into one .
9523	Convert scaffolds to contigs .
9524	Sort sequences by size .
9525	Sort a file by name .
9526	Convert a FASTA file into a FASTA file .
9527	Write a bcbioio file to a bcbioio . bcbio file .
9528	Derive a PBKDF2 HMAC .
9529	Return an encrypted field .
9530	Encrypt a field .
9531	Return the value as a string .
9532	Serialize obj to a Timestamp .
9533	Verify a signed value .
9534	Get the version string .
9535	Determine the Django version .
9536	Enumeration decorator .
9537	Match a regex pattern .
9538	Return a function that matches a regex pattern .
9539	Check that a number is within inclusive .
9540	Check that a number is inclusive .
9541	Check that a datetime is within the given format .
9542	Add a header check .
9543	Add a record length check .
9544	Add a value check .
9545	Add a value predicate .
9546	Add a record check .
9547	Add a record predicate .
9548	Add a unique check .
9549	Validate the data .
9550	Iterate over the data .
9551	Initialize unique sets .
9552	Iterate through the values and apply them to each row .
9553	Iterate through the header checks .
9554	Iterate over record lengths .
9555	Applies the predicate predicates .
9556	Applies the check_checks to each record .
9557	Applies the predicate predicates to the record .
9558	Iterate over unique_checks
9559	Iterate over each method in each row .
9560	Iterate through assert methods .
9561	Iterate through check methods .
9562	Iterate over the skipped rows .
9563	Convert r to a dictionary .
9564	Create a CSVValidator .
9565	Validate a CSV data file .
9566	Pack the given buffer into the given buffer .
9567	Wap data to a byte array .
9568	Get chat ID .
9569	Build a Message from data .
9570	Get a response from a message .
9571	Determine the view of a message .
9572	Build a new message from the engine .
9573	Unpack the given data .
9574	Read a file header .
9575	Read an element from a file - like object .
9576	Read the header .
9577	Read var_header from fd .
9578	Read a numeric array from a file - like object .
9579	Read a numpy array from a file - like object .
9580	Read a struct_array from a file - like object .
9581	Checks if the file descriptor ends .
9582	Write data to a file descriptor .
9583	Write a variable header .
9584	Write variable data to file .
9585	Writes a variable array to a file .
9586	Write a numeric array to a file .
9587	Test whether an array contains all elements of the given test .
9588	Execute a command .
9589	Initialize the session .
9590	Switches to a window .
9591	Sets the window size .
9592	Sets the window position .
9593	Switches to the specified frame .
9594	Execute a script .
9595	Execute an async script .
9596	Add a cookie .
9597	Save the screenshot to a file .
9598	Searches for an element with the given value .
9599	Returns the list of matching elements .
9600	Wait for the driver to be executed .
9601	Waits for an element .
9602	Waits until an element is found .
9603	Create a Session from an object .
9604	Raises WebDriverException if the status code is not available .
9605	Wrap a function into an instance .
9606	Check for unused arguments .
9607	Calls vformat .
9608	Return a string representation of a string .
9609	Find an exception by code .
9610	Execute a request .
9611	Make a request .
9612	Execute a command .
9613	Searches for a child element .
9614	Returns the child element or None if not found .
9615	Fetch the children of a child .
9616	Checks if the given target is visible
9617	Create a plugin .
9618	Unplug the device .
9619	Set control value .
9620	Main function .
9621	The gamepad .
9622	List of all buttons .
9623	Decodes the given header .
9624	Auto - discover INSTALLED_APPS .
9625	Register a preview .
9626	Retrieve the detail view of a preview .
9627	The URL for this preview .
9628	The detail view .
9629	Split a value into a docstring .
9630	Render the message .
9631	Render the template .
9632	Render the subject template .
9633	Add a template to the message .
9634	Convert a decimal value to a string .
9635	Execute a command from a command line .
9636	Extract the module name and line number from the stack .
9637	Formats the record as JSON
9638	Publish a record .
9639	Emits a record .
9640	Decorator to require template debug mode .
9641	Display the details of a variable
9642	Sets the trace of the current context
9643	Run pydevd .
9644	Flatten an iterable .
9645	Get the value of a detail attribute .
9646	Return a list of all valid attributes .
9647	Determine whether a variable is a valid value .
9648	Parse log messages .
9649	Determine the paths for a package .
9650	Perform sanity checks on the structure .
9651	Check if the shastore version is installed .
9652	Get the sha1 hash of a file .
9653	Write sha_dict to sha
9654	Take the shas of all files in the graph .
9655	Run multiple commands .
9656	Return the node dict with the given name
9657	Get the direct ancestor of a list of nodes .
9658	Return a list of all sink sinks .
9659	Return a list of all the levels of a graph .
9660	Merge from from_store and in_mem_shas
9661	Find the standard Sakefile .
9662	Returns a list of ties in the graph .
9663	Given a list of target_targets and a list of target_targets return a list of tuples that have the same dependencies .
9664	Construct a networkx graph from a list of formulas .
9665	Remove all files from the graph .
9666	Write a graph to a dot file .
9667	Iterate over a table .
9668	Create a BEL package .
9669	Check if a sound is a valid sound
9670	Normalize a string .
9671	Return the sound from a string .
9672	Perform an iteration on the input data .
9673	Resolve the context .
9674	Returns the number of days in the given month .
9675	Calculates a float from a byte array .
9676	Calculate the period .
9677	Calculate the bin boundary .
9678	Read the info string from the network .
9679	Ping the device .
9680	Return the configuration of the network .
9681	Get the configuration of the device .
9682	Set the fan power .
9683	Toggle the speaker .
9684	Return a string representing the SNP .
9685	Read the firmware .
9686	Calculate the PM2 .
9687	Read GSC and SFR
9688	Read the bin boundaries .
9689	Read the bin density .
9690	Starts the receiver .
9691	Stop all senders .
9692	Send data to the device .
9693	Cut the range by a given number .
9694	Return a new Date instance with new values replaced .
9695	Find all dates from a string .
9696	Validate OAuth token .
9697	Validate the OAuth nonce .
9698	Return a list of deliveries .
9699	Return a list of event choices .
9700	A worker thread .
9701	Send a message .
9702	Return the TUN packet .
9703	Monitor the TUN .
9704	Write the serial to the device .
9705	Main loop .
9706	Get field settings .
9707	Apply sanitizer to values .
9708	Get sanitizer .
9709	Return the maximum item in the heap .
9710	Replace an item in the heap .
9711	Add an item to the heap .
9712	Return the maximum item in the heap .
9713	Decorator to validate a response .
9714	Connect to the given host and port .
9715	Returns the Qtm version .
9716	Block until an event is received .
9717	Get the current frame .
9718	Stop streaming frames .
9719	Takes a password .
9720	Release control .
9721	Start the device .
9722	Load a file .
9723	Save to a file .
9724	Load a project .
9725	Set Qtm event .
9726	Send XML to QRTP .
9727	Called when data is received .
9728	Get an analog data .
9729	Get a single analog device .
9730	Returns a list of force components .
9731	Return a list of force components .
9732	Return a list of 6D components .
9733	Returns a list of 6D euler angles .
9734	Returns a list of components of the QRTP packet .
9735	Returns the 3D marker positions of the 3D marker positions .
9736	Retrieves the 3D marker positions residuals .
9737	Retrieves a 3D marker without a label .
9738	Returns 3D marker positions without label resolution .
9739	Get a 2D marker .
9740	Get the markers of a 2D plot .
9741	Wait for an event .
9742	Send a QRTP command .
9743	Reboot a QReboot .
9744	Called when a packet is received .
9745	Called when the connection is made .
9746	Called when a datagram is received .
9747	Send a discovery packet .
9748	Choose a QTM instance .
9749	Creates a dictionary mapping the body name to the index .
9750	Search for doublefann files
9751	Search for FANN source libraries .
9752	Run SWIG .
9753	Add an experiment .
9754	Get information about a job .
9755	Delete an experiment .
9756	Update an experiment .
9757	Stop the experiment .
9758	Restart an experiment .
9759	List the status of the experiment .
9760	Get resources for a job .
9761	Get the logs for a given experiment .
9762	Unbook the experiment .
9763	Upload the project to the project .
9764	Get information about a given node
9765	Check a polyaxon specification .
9766	Decorator to clean stdout
9767	Add a job .
9768	Get a job .
9769	Delete a job .
9770	Update a job .
9771	Stop a job .
9772	Restart a job .
9773	List the status of a job .
9774	Get resources for a job .
9775	Get the logs of a job .
9776	Download the output files .
9777	Print a JSON object to stdout .
9778	Login to the server .
9779	Display user information .
9780	Build a project
9781	Get a build .
9782	Delete a build .
9783	Update a build .
9784	Stop the build .
9785	Book the build .
9786	Get resources for a build job .
9787	Initialize a project
9788	Add a bookmark .
9789	List projects .
9790	Remove trailing spaces from a line .
9791	Find all patterns matching path .
9792	Return True if path is ignored .
9793	Return True if path matches a list of patterns .
9794	Return True if path is ignored .
9795	Add group to project .
9796	Get the group details .
9797	Delete experiment group .
9798	Update an experiment group .
9799	Stop the experiment .
9800	Book the experiment group .
9801	Display current configuration .
9802	Print a list of configuration values .
9803	Set the global configuration .
9804	Activate a user .
9805	Delete a user
9806	Deploy a file .
9807	Teardown the deployment .
9808	Generate a tarball file .
9809	Print version of cli
9810	Launch a dashboard .
9811	Grant a superuser role .
9812	Revoke a superuser .
9813	Get a notebook URL .
9814	Start a notebook .
9815	Stop a notebook .
9816	Check deployment type .
9817	Install on the deployment .
9818	Upgrade the deployment .
9819	Tear down the deployment .
9820	Add project .
9821	Create a project .
9822	List projects .
9823	Delete a project .
9824	Update a project .
9825	List experiment groups .
9826	List all experiments .
9827	Download project .
9828	Write the object to a file .
9829	A list of edges in the grid .
9830	Write the metadata to a file .
9831	Read a DSField from a file .
9832	Return the value as a string .
9833	Create a new object .
9834	Parses a DSField into a dictionary .
9835	Main entry point .
9836	Comment .
9837	Parse an object .
9838	Process gridpositions .
9839	Parse gridconnections .
9840	Process an array .
9841	Process a field .
9842	Use a parser to use a parser .
9843	Tokenize a string .
9844	Refill the token buffer .
9845	Convert ndarrays into ndarray .
9846	Resample the graph according to the given factor .
9847	Load a CCP4 file .
9848	Load a DataFrame from a file .
9849	Load a plot from a file .
9850	Exports the model to a file .
9851	Export the grid to a file .
9852	Exports the OpenDX density file .
9853	Iterate over the centers of the grid .
9854	Detect the byteorder of a CCP4 file .
9855	Read header from ccp4 file .
9856	Retrieve data from the API .
9857	Returns a list of devices
9858	Create a new URL .
9859	Set a parameter .
9860	Start the subscription .
9861	Synchronously update the device info .
9862	Update the user info .
9863	Returns a list of all the users .
9864	Retrieves a TibberHome object .
9865	Get the current currency
9866	The price unit .
9867	Remove the subscription .
9868	True if the subscription is running .
9869	Remove any empty properties .
9870	Builds the environ from the given socket .
9871	Write data to the server .
9872	Start a HTTP response .
9873	Create a CherryPy WSGI server .
9874	Aggregate a list of IP prefixes .
9875	Aggregate the leaves of a network .
9876	Calculate the ordinal metric of the ordinal order .
9877	Compute the ratio of two values .
9878	Calculate the coincidences between two values .
9879	Generate random covariance matrix .
9880	Calculates the distances between each value and a given distance_metric .
9881	Convert a reliability_data to a numpy array .
9882	Calculate an alpha - correlation coefficient .
9883	Infer the contents of the file .
9884	Read z_variable_info from fname .
9885	Load all the variables from the z - axis .
9886	Call multiple tensors .
9887	Retrieve all attribute names and their attributes .
9888	Call multiple Fortran zeros .
9889	Return the uptime in seconds .
9890	Return the boottime of the machine .
9891	Return the amount of time in seconds .
9892	Return the uptime in seconds .
9893	Return the uptime in seconds .
9894	Return the current boottime .
9895	Get the uptime of the system .
9896	Return the uptime of the system .
9897	Return the current boottime .
9898	Initialize a JSON file .
9899	Return the cached data .
9900	Save data to JSON file
9901	Update the type of the file .
9902	Create a new file with the given data .
9903	Check if the server is configured .
9904	Called when the group changes .
9905	Run a ping command .
9906	Parses a ping message .
9907	Send an email confirmation .
9908	Send a duplicate email notification .
9909	Sets the email address .
9910	Verify email address .
9911	Checks if the token is expired .
9912	Send the confirmation email .
9913	Create a user .
9914	Create a new email address .
9915	Sets the primary field .
9916	Validate that the email address is the primary address .
9917	Validate password .
9918	Validate the confirmation code .
9919	Save the password reset token .
9920	Reset the password .
9921	Validate a password reset token .
9922	Create a new user .
9923	Sends the verification email to the database .
9924	Create a new email address .
9925	Return a queryset of valid password resets .
9926	Remove old email confirmation .
9927	Get user by id
9928	Verify that the email address is valid .
9929	Authenticate a username and service .
9930	Handles POST requests .
9931	Return a pretty representation of an object .
9932	Return the referent of an object .
9933	Iterate through the object and yield the results .
9934	Returns a Finder object .
9935	Searches for a path .
9936	Return a generator yielding a list of file paths .
9937	Return a generator for all files in the store .
9938	Searches for a given path .
9939	Find path in app .
9940	Set options .
9941	Collect files from the storage .
9942	Delete a directory .
9943	Delete a file .
9944	Link a file .
9945	Copy a file to the storage .
9946	Return current space .
9947	Create a new space .
9948	Create a new space .
9949	Create a new space .
9950	Get an object from an object .
9951	Get the arguments for a node .
9952	Get object by name .
9953	Get a node by name .
9954	Display a warning message .
9955	Custom show traceback function .
9956	Generate a tracememessage as a string
9957	Setup the IPython shell .
9958	Restore IPython .
9959	Restore sys . sys . tracebacklimit
9960	Get an object by name .
9961	Show the model tree .
9962	Get the interfaces of an impl .
9963	Get the implementation of an interface .
9964	Update the list of LazyEvalals .
9965	Convert attributes to a dictionary .
9966	Convert arguments to Cell .
9967	Return a list of parameters that share the same parameters .
9968	Return a copy of this Cell .
9969	Return the value of this field .
9970	Get the index of a column .
9971	Get a range from a book .
9972	Read a range from a file .
9973	Get the name of a named range .
9974	Get the MRO of a space .
9975	Alter Python code object .
9976	Change the freevars of a function .
9977	Fix lamdaline syntax .
9978	Tries to find a function definition .
9979	Extract parameters from a source .
9980	Extract names from a source .
9981	Return True if source is a function definition .
9982	Remove decorator from source code .
9983	Replace a function name with its name .
9984	Return True if src is a lambda function .
9985	Reloads the function .
9986	Get the description from README . rst file .
9987	Convert to pandas . DataFrame .
9988	Create new cells .
9989	Import functions from a module .
9990	Get object from namespace .
9991	Return the dynamic base .
9992	Create a new dynamic space .
9993	Get the dynamic space .
9994	Set attribute value .
9995	Delete attribute .
9996	Delete a space .
9997	Delete a cell by name
9998	Convert an iterable into a pandas DataFrame .
9999	Convert a Pandas DataFrame to series .
10000	Remove an object from the tree .
10001	Get all nodes with given object .
10002	Add a path .
10003	Renames the model .
10004	Renames the model .
10005	Remove all descendants of a source .
10006	Remove an object from the cell graph .
10007	Get object by name .
10008	Get a dynamic base .
10009	Return the MRO of a set of bases .
10010	Return a list of all command names .
10011	Get a value from a key .
10012	Parse option settings .
10013	Parse an environment .
10014	Create an archive .
10015	Add config files to the archive
10016	Swap environment names .
10017	Upload an archive to S3 .
10018	Checks if an application exists .
10019	Create an environment .
10020	Checks if an environment exists .
10021	Get all environments .
10022	Update an environment .
10023	Return the environment name for a CNAME .
10024	Deploy the environment .
10025	Get the application versions .
10026	Create an application version .
10027	Delete unused versions .
10028	Retrieve a list of events .
10029	Add command line arguments .
10030	Swap environment cnames .
10031	Parse configuration options .
10032	Create an application .
10033	Join phonemes .
10034	Wait for environments .
10035	Add command line arguments .
10036	Describe events .
10037	List available solution stacks
10038	Pick a Coda from a letter .
10039	Pick a Coda from a decimal .
10040	Fetch a deposit .
10041	Create a deposit for a record .
10042	Factory for admin permissions .
10043	Create a blueprint .
10044	Default view method .
10045	Create a deposit provider .
10046	Extract actions from a record class .
10047	Decorator to check oauth2 scope .
10048	Check if a record can be elasticsearch .
10049	Add error handlers to the blueprint .
10050	Create a blueprint .
10051	Post a record .
10052	Get a single record .
10053	Handles POST requests .
10054	Put a record .
10055	Get a single record .
10056	Update a record .
10057	Delete a record .
10058	List all users .
10059	Create a local location .
10060	Return the JSON Schema for this application .
10061	Default schema forms .
10062	Factory function for creating links .
10063	Process minter .
10064	Process a schema value .
10065	JSON serializer .
10066	Serialize a File object .
10067	Serialize a collection of objects into a JSON response .
10068	Index the deposit .
10069	Index an object .
10070	Decorator to preserve results .
10071	Return the persistent identifier for this deposit .
10072	Record the current schema .
10073	Build the deposit schema .
10074	Fetch the published record .
10075	Merge this commit with the given revision .
10076	Commit a deposit .
10077	Create a deposit .
10078	Process a list of files .
10079	Create a new record .
10080	Return a copy of this record .
10081	Publish a deposit .
10082	Prepare the data for the given record .
10083	Edit the record .
10084	Discards the current record .
10085	Delete this deposit .
10086	Clear all deposits .
10087	Update this deposit .
10088	Patch a deposit .
10089	Return a list of files in this deposit .
10090	Convert rst to a paragraph .
10091	Sets up the autopyramid extension .
10092	Parse the response .
10093	Get all the templates .
10094	Get a specific template .
10095	Create a template .
10096	Create a new locale .
10097	Create a new template .
10098	Update a template version .
10099	Retrieve the snippets .
10100	Retrieves a single snippet .
10101	Create a new snippet .
10102	Convert a file into a dictionary .
10103	Send an email .
10104	Execute the batch API .
10105	Returns a list of groups that belong to this group .
10106	Sort tabs by weight .
10107	Add tab data to context .
10108	Normalize a name .
10109	Return the schema of a table .
10110	Write data to the database .
10111	Iterate over a sequence of rows .
10112	Rewrites a file .
10113	Filter rows as a dict
10114	Dump a grid to a string .
10115	Parse a string into a list of dictionaries .
10116	Add an item to the list .
10117	Extend a list of items .
10118	Construct a regular polygon .
10119	Create a regular polygon .
10120	Create a rectangle .
10121	Create a rectangle from a dictionary .
10122	Return a dictionary with kwargs .
10123	Rotate the polygon .
10124	Flip the polygon .
10125	Flip the y - axis .
10126	Flip this vector by an angle .
10127	Draw the scene .
10128	Update the position of the camera .
10129	Return a map of timezones .
10130	Return the timezone for a given haystack .
10131	Unescape a string .
10132	Parses a grid from a string .
10133	Parses a scalar data into a Zincar object .
10134	Add an item to the list .
10135	Return a string representation of a grid .
10136	Detect if value is a list or not
10137	Assert that the data type is correct .
10138	Return the closest version .
10139	Encrypt files using gpg
10140	Check if the file is larger than max_size
10141	Parse command line arguments .
10142	Upload a file to the server
10143	Decrypt a file .
10144	Convert a schema node into an object .
10145	Convert a schema node into a list of Parameter objects .
10146	Convert a path into a list of Parameter objects .
10147	Get a reference to a parameter .
10148	Convert a schema mapping to a dictionary .
10149	Return a reference to the response .
10150	Generate swagger file .
10151	Builds a dictionary of Swagger definitions .
10152	Extract the path from a pyramid service .
10153	Extract an operation from a view .
10154	Extract a colander schema from a colander .
10155	Convert a schema node into a dictionary .
10156	Recursively merge dicts .
10157	Decorator for viewset methods .
10158	Returns a subclass of viewset_method for a model .
10159	Copy cookies to a temporary directory
10160	Execute the Docker CLI .
10161	Calculate a hash of a given key .
10162	Sets up the parser .
10163	Load the file into a dictionary
10164	Extract personalities from a line .
10165	Parse a list of md devices .
10166	Parse a md device from a line .
10167	Parse md status from md status line
10168	Extract components from a string
10169	Register a signal emiter .
10170	Mark the queue as scheduled .
10171	Execute a POST request .
10172	Get the timestamp of the oldest event .
10173	Get the latest bookmark .
10174	Set the bookmark .
10175	Format a datetime into a string .
10176	Iterate over the events .
10177	Run the batch .
10178	Return a list of the bookmarks .
10179	Delete documents .
10180	Get the result from the queue .
10181	Process events .
10182	Process aggregations .
10183	Delete aggregations .
10184	List all bookmarks .
10185	Return a dictionary with the configured event types .
10186	Load the aggregations configuration .
10187	Load the configuration of the configured queries .
10188	Publish events .
10189	Consume an event .
10190	Send a message to the actor .
10191	Get an anonymization salt .
10192	Get the country code for an IP address .
10193	Return the current user .
10194	Return a permission factory .
10195	Return a list of template templates .
10196	Aggregate events .
10197	Handles HTTP requests .
10198	An anonymize a user .
10199	Generate a unique identifier .
10200	Execute bulk actions
10201	Return a list of registered events .
10202	Register aggregations .
10203	Return a list of dictionaries that can be used to create requests .
10204	Parse a time statement .
10205	Extract the date from a date string .
10206	Run the query .
10207	Build a file download event .
10208	Build a record event .
10209	Check that the file has write permissions .
10210	Checks if the system is root
10211	Return a command class .
10212	Count the number of subgraphs in the given graph .
10213	Calculate the intersection of a subgraph .
10214	Calculate the distance between all nodes in a subgraph .
10215	Rank a subgraph by predicate .
10216	Convert a graph into a Jupyter notebook .
10217	Preprocess a BEL graph .
10218	Plot summary axes .
10219	Remove all nodes from a BEL graph .
10220	Preprocessing function for preprocessing .
10221	Preprocessing for preprocessing .
10222	Get the NIFT values .
10223	Return a set of all the nodes in a BEL graph .
10224	Return the set of nodes in the given graph .
10225	Return the correlation graph .
10226	Return the set of correlations in the graph .
10227	Return a set of all triangles in the graph .
10228	Get all unstable correlation triangles .
10229	Summarize the stability of a BEL graph .
10230	Flatten a list abundance .
10231	Expand list abundance .
10232	Expand a list abundance into a BEL graph .
10233	Add unqualified edges to the graph .
10234	Return all catalysts in reaction .
10235	Expand reaction graph .
10236	Returns a list of BEL graphs with the given network ids .
10237	Generate a dictionary of citations for a BEL graph .
10238	Count the number of citations in a BEL graph .
10239	Count citations by an annotation .
10240	Count the number of authors in the graph .
10241	Count the number of authors in a graph .
10242	Retrieve evidence by PMIDs .
10243	Count the number of citations in a BEL graph .
10244	Returns the number of citations in a BEL graph .
10245	Create a timeline .
10246	Count the number of confidence in a BEL graph .
10247	Enrich PubMed citations by PubMed identifier .
10248	Update the namespace context .
10249	Highlights the given nodes .
10250	Return whether the given node is highlighted .
10251	Remove highlights from a graph .
10252	Highlight edges in graph .
10253	Remove edges from the graph .
10254	Given a nbunch and nbunch return a set of edges that are causal .
10255	Return the set of nodes that have a causal source .
10256	Return the set of causal nodes in the graph .
10257	Return the set of causal sink nodes .
10258	Count the number of nodes that have the same number .
10259	Returns the number of modifications in a BEL graph .
10260	Remove all labels from a counter .
10261	Collapse variants by a function .
10262	Collapse all the edges in the given graph .
10263	Collapse an edge into a BEL graph .
10264	Collapse orthologies into a BEL graph .
10265	Collapse equivalencies between Entrez and Entrez .
10266	Collapse edges in a BEL graph .
10267	Collapse all nodes with the same name .
10268	Generate an Hbp knowledge graph .
10269	Return whether the given node is a upstream leaf .
10270	Return the unweighted nodes that are not weights .
10271	Determines if a node is an unweighted source .
10272	Return all unweighted source sources .
10273	Remove all unweighted sources from the graph .
10274	Removes all channels by given key .
10275	Given a node and a node generate a causal channel .
10276	Get the scores for a set of neuroms .
10277	Calculate the score for each gene in the subgraph .
10278	Compute the score of a set of neuroms .
10279	Calculate the topology of a list of nodes .
10280	Run a bond task .
10281	Gets the edges of a subgraph .
10282	Return all predecessors of a subgraph .
10283	Count the number of sources in an edge iterator .
10284	Count the number of targets in an edge iterator .
10285	Get edges that match the given value .
10286	Get the peripheral nodes of a subgraph .
10287	Enrich the complex components of a BEL graph .
10288	Enrich all composite components .
10289	Add reactions to the graph .
10290	Enrich variants in the graph .
10291	Enrich unqualified dependencies .
10292	Expand a BEL graph into a BEL graph .
10293	Expand internal causal edges of a BEL graph .
10294	Get namespaces with missing names .
10295	Return the set of undefined namespace names .
10296	Return a set of names that match the given namespace .
10297	Return the names of undefined namespace names .
10298	Return the set of names in the graph .
10299	Group errors by line number .
10300	Return a mapping of names to names .
10301	Counts the number of elements in a dictionary .
10302	Compute the percentage between two sets .
10303	Compute the similarity between two sets .
10304	Minimum similarity between two sets .
10305	Calculates the distance between two sets of sets .
10306	Calculates the distance between two sets of sets .
10307	r Calculates the distances between a set of sets .
10308	Plot a barh plot .
10309	Plot a bar chart .
10310	Add an edge to the graph .
10311	Prepare c3 format for rendering .
10312	Prepare a C3 time series from data .
10313	Calculates the betweenness centrality of the given graph .
10314	Return the canonical version of the given elements .
10315	Determine if a relationship between two relations .
10316	Determines if a relation set has tendencies .
10317	r Creates a dictionary of data for a single run .
10318	r Calculate the microcanonical average spanning cluster .
10319	Calculate max_cluster_size .
10320	Calculate the microcanonical mean and standard deviation .
10321	r Calculate microcanonical averages for a molecule .
10322	Create a spanning chain spanning tree .
10323	Return a 2D spanning grid
10324	Convert microcanonical averages into dictionary
10325	Compute the polynomial distribution .
10326	Calculate the canonical averages for a molecule .
10327	Calculate the canonical average of a molecule .
10328	Calculates the upperregulation of the given node .
10329	Get the causal effect of a path .
10330	Rank a set of edges .
10331	Group nodes by an annotation .
10332	Calculate the average value of a node .
10333	Group nodes by predicate .
10334	Builds a function to expand a node by its hash .
10335	Return a function that deletes a node by its hash .
10336	Convert BEL graph into Spia matrix .
10337	Build sparse matrices from a set of nodes .
10338	Update spia_matrix .
10339	Write spia matrix to an Excel file .
10340	Convert a sparse matrix to tsv format .
10341	Convert BEL graph to SPIA matrices .
10342	Overlay data into a BEL graph .
10343	Overlay function data into graph .
10344	Load a differential gene expression from a CSV file .
10345	Given a list of locations return a dictionary with merged names .
10346	Merge the namespaces into a single file .
10347	Run RRR algorithm .
10348	Export a BEL graph to a BEL graph .
10349	Run lint on a file .
10350	Run linter on BEL files .
10351	Get Entrez gene data .
10352	Takes a list of Entrez Ids and generates a Pubmed Gene Group .
10353	Writes a Bokeh knowledge file .
10354	Get the subgraph of the given graph .
10355	Get the largest component of the graph .
10356	Create a new graph from a given percentage .
10357	Return a new graph with random edges .
10358	Shuffle a node by a given key .
10359	Shuffle edges according to the given percentage .
10360	Returns True if the given edge is consistent with the same edge .
10361	Rewire the graph .
10362	Return True if source is the same as target .
10363	Determines if an edge has an activity modification .
10364	Determines if the data has any modifications .
10365	Determines if the data contains transition information .
10366	Return true if the complex node has a member .
10367	Determines if an activity has an activity .
10368	Find INDRA Statements .
10369	Summarize an edge filter .
10370	Build an edge predicate .
10371	Build an edge predicate for a given PMID .
10372	Check if a node has a namespace .
10373	Return True if the given node has any namespaces .
10374	Get the cutoff value .
10375	Calculate the Concordance score .
10376	Calculates the Coordance of a given key .
10377	Compute one - sided value of a given distribution .
10378	Calculate the confidenceability probability for a given graph .
10379	Calculate the correlation coefficient for a given annotation .
10380	Calculates the confidenceability probability for a given annotation .
10381	Retrieves the drug target interactions .
10382	Run an epicom .
10383	Main function .
10384	Remove edges from the graph .
10385	Return a tuple of the lengths of a node .
10386	Match a simple_metapath .
10387	Build the database .
10388	Calculates the average scores on a graph .
10389	Calculate average scores for each subgraph .
10390	Generate multiple runners for a given node .
10391	Aggregate the heat diffusion workflow .
10392	Iterate over all nodes in a BEL graph .
10393	Aggregate all Bioprocessing nodes .
10394	Calculates the average score for a given annotation .
10395	Iterate over leaves .
10396	Iterate over all nodes in the graph .
10397	Remove a random edge from the graph .
10398	Calculate the set of leaves .
10399	Iterate over the leaves .
10400	Determine if this tag is done .
10401	Returns the final score of the target node .
10402	Calculates the score of the node .
10403	Dtype of microcanonical statistics .
10404	Return canonical statistics dtype .
10405	Calculate the atomic statics of a molecule .
10406	Return the canonical dtype of the datastore .
10407	Initialize canonical averages .
10408	Return a function that reduces the correlation coefficient of a bond .
10409	Return a tuple of canonical_ averages for the given cluster .
10410	Finalize canonical averages .
10411	Compute the similarity of a BEL graph .
10412	Summarize a node filter .
10413	Build an inclusion filter .
10414	Build a filter for the given nodes .
10415	Build a predicate for function namespaces .
10416	Build a predicate that checks if the given key contains the given key .
10417	Return all variants of a given node .
10418	Return a mapping of variants to controllers .
10419	Group a dict into a single set .
10420	Count unique edges in a BEL graph .
10421	Count the number of occurrences of an annotation .
10422	Count the number of values in a graph .
10423	Determine the relation between two entities .
10424	Infer missing edges .
10425	Infer a missing edge .
10426	Enrich internal unqualified unqualified edges .
10427	Write a boilerplate file .
10428	Print PubMed identifiers .
10429	Returns the number of rows in the object .
10430	Select one or more rows .
10431	Select a row from an object .
10432	Select a row of an object .
10433	Select the last row of an object .
10434	Get the value of an object .
10435	Returns the index of the row of the given row .
10436	Verify a partial table cell .
10437	Returns a list of all running apps .
10438	Start a process monitor .
10439	Stops a process .
10440	Returns a list of CPU information for the given process .
10441	Get the memory usage of a process .
10442	Return a list of all objects associated with a window .
10443	Get information about an object .
10444	Get an object property .
10445	Get a window s children
10446	Launch an app .
10447	Activate a window .
10448	Click an object .
10449	Returns a list of all the states of the object .
10450	Get the size of a window .
10451	Grab the focus of a window .
10452	waittill a window
10453	Waits until the given window_name exists .
10454	Returns the state of an object .
10455	Check the status of an object .
10456	Verify an object .
10457	Get access key .
10458	Clear the contents of the pasteboard .
10459	Returns True if the datatype is empty False otherwise .
10460	Return a tuple of role and title and label
10461	Return True if pattern matches a glob pattern .
10462	Determine if a menu item exists .
10463	Determine if a menu is disabled .
10464	Verify a menu item .
10465	Returns a list of running applications .
10466	Return the frontmost app .
10467	Return the application with windows .
10468	Launch an application by bundle ID .
10469	Launch an application at the given bundle path .
10470	Terminate an application by bundle ID .
10471	Adds an event to the event list .
10472	Add a key to the queue .
10473	Send a key .
10474	Return True if keychr is a single character .
10475	Send a keychr .
10476	Queue a mouse button .
10477	Called when the mouse is clicked .
10478	Wait for a notification .
10479	Return a list of actions .
10480	Perform an action .
10481	Iterate over the AX children .
10482	Recursively iterate over the children of this object .
10483	Return True if any of the arguments match .
10484	Return True if the given object matches the given criteria .
10485	Searches for matching objects .
10486	Yields all matches of the needle .
10487	Return a list of all matching objects .
10488	Get the application .
10489	Returns the bundle ID .
10490	Pop up a menu item .
10491	Drag a mouse button .
10492	Double mouse button left .
10493	Click the mouse button left .
10494	Click the mouse button right .
10495	Click the mouse button right .
10496	Triggers the left mouse button .
10497	Double mouse clicks .
10498	Enqueues the mouse button .
10499	Waits for a given notification .
10500	Waits until the element is created .
10501	Waits for a window to disappear .
10502	Waits for the value to be changed
10503	Waits until the focus window is changed
10504	Remove a callback .
10505	Stop the event loop .
10506	Run the LDTPS server .
10507	Bind server to server .
10508	Log a message .
10509	Stop logging .
10510	Captures an image .
10511	Register a new window .
10512	Register a callback function .
10513	Register a keybe event .
10514	Get the uptime of a window .
10515	Verify that a window is vertical .
10516	Verify that a window is horizontal .
10517	Set the maximum value of an object .
10518	Set the minimum value of an object .
10519	Perform a scrollbar on an object .
10520	Decreases the scrollbar .
10521	Increase the scrollbar .
10522	Perform one left left of the object .
10523	Get all menu items
10524	Login to Google Music API .
10525	Get a playlist .
10526	Load Google Music playlist songs .
10527	Cast a function to a list .
10528	Make a request to pybossa
10529	Get all projects
10530	Get a project by ID
10531	Return a list of Project objects
10532	Create a project .
10533	Update a project .
10534	Delete a project
10535	Return a list of all categories .
10536	Get a category by id
10537	Return a Category object
10538	Create a new category .
10539	Update a category .
10540	Delete a category
10541	Return a list of all tasks in the given project .
10542	List all tasks in a given project .
10543	Create a task .
10544	Update a task .
10545	Delete a task
10546	Get a list of taskruns .
10547	Return a list of Taskruns .
10548	Delete a taskrun
10549	Get the results of a given project .
10550	Get results for a given project .
10551	Update a result .
10552	Remove forbidden attributes .
10553	Create a new helpmaterial .
10554	Get help materials for a project .
10555	Return a list of helper materials .
10556	Update a helping material .
10557	Login to AWS .
10558	Download songs .
10559	Convert path to cygwin path .
10560	Load a music file .
10561	Convert mutagen fields to single value .
10562	Normalize the metadata .
10563	Compares two songs according to the metadata .
10564	Return a list of filepaths that match the specified extensions .
10565	Exclude filepaths from a list of filepaths .
10566	Check if field value matches pattern .
10567	Check if a song is in the correct format .
10568	Filter a list of songs .
10569	Filters a list of filepaths for local files .
10570	Generate a suggested filename .
10571	Convert a template to a file path .
10572	Recursively walk a directory tree .
10573	Load a list of local songs .
10574	Load local playlists .
10575	Load a playlist s songs .
10576	Return a sorted list of all compounds .
10577	Calculates the total mass .
10578	Calculates the mass of the material .
10579	Add a compound to this package .
10580	Calculate the total mass .
10581	Calculate the molecular mass .
10582	Set parent path .
10583	Create a new account .
10584	Remove an account by name
10585	Get child account by name
10586	Create a new account .
10587	Get all descendants of a given account .
10588	Recursively get all accounts and their descendants .
10589	Validate account names .
10590	Generate a GLSR report .
10591	Create a transaction .
10592	Get a relative path relative to the given module path .
10593	Convert date to datetime
10594	calculate thermal pressure
10595	Calculate the Nu power flow .
10596	Calculate h_x .
10597	calculate H_L_L_L
10598	Clears all the data .
10599	Create a csv template
10600	Returns the URL for the given endpoint .
10601	Initialize httplib2 .
10602	Calculate the alpha of a fluid .
10603	Calculate surface pressure
10604	Create a new entity .
10605	Remove an entity by name .
10606	Prepares all entities to run .
10607	Run the simulation .
10608	Returns a sorted list of all compounds .
10609	Create a material stream .
10610	Calculate HH for the material .
10611	Calculates the H - Calculation
10612	Calculate the T matrix
10613	Set the matrix H
10614	Set the tensor .
10615	Return a shallow copy of this Compound .
10616	Clears all potentials .
10617	Returns the mass of a compound .
10618	Returns the amount of compounds in each compound .
10619	Get the amount of compound .
10620	The total amount of compounds .
10621	Returns a dictionary of atomic mass mass .
10622	Returns the mass of an element .
10623	Extract a material from an other object .
10624	Calculates the HFR of the material .
10625	Calculates the HFR coefficients for a molecule .
10626	Calculate the T - matrix
10627	Setter for Hfr
10628	Set the number of atoms .
10629	Set HV value .
10630	Return a clone of this Compound .
10631	Clears the compound .
10632	Returns the MFR of a compound .
10633	Returns the amount of compounds in the compound .
10634	Returns the amount of compound .
10635	Calculate the fractional area of the material .
10636	Calculates the mass of the material .
10637	Returns a dictionary of element mfrs .
10638	Returns the mass of an element .
10639	Extract the material from the other .
10640	Calculate Grolesky Grolesky Groles
10641	Convenience function for equation 3 .
10642	Calculate the Raises Ratio
10643	Calculate the Nu Nu .
10644	Calculate the spherical harmonic coefficients .
10645	Create a Polynomial model .
10646	Calculate the coefficients .
10647	Create a component .
10648	Remove component by name
10649	Get component by name .
10650	Add an activity .
10651	Get activity by name .
10652	Prepares the simulation to run .
10653	Run the simulation .
10654	Prepares the simulation to run .
10655	Run the simulation .
10656	Count the number of elements in each group .
10657	Calculate the amounts for each mass .
10658	Calculates the total fractions of a mass .
10659	Calculate masses from a dictionary .
10660	Calculate the total mass fractions .
10661	Convert a compound into a compound .
10662	Calculate the mass fraction of a compound .
10663	Return a set of all elements in a compound .
10664	Return the molar mass of a compound .
10665	Return the stoichiometry coefficient of a compound element .
10666	Calculate stoichiometry coefficients from a compound string .
10667	Add the contents of another material .
10668	Get the start datetime at the given time .
10669	Return the path to the default data directory .
10670	Split compound string into formula and phase and phase
10671	Finalise result .
10672	Writes a compound to an auxi file .
10673	Load factsage from a data file .
10674	Load all compounds from a data file .
10675	List all compounds
10676	Calculate the composition of a compound string .
10677	Compute the cp p p p .
10678	Calculates the Hacency coefficient of the potential
10679	Compute the standard deviation of a given temperature .
10680	calculates the cp_mag_mag_mag
10681	Calculate the DHREF for a given T .
10682	calculate H_mag_h_mag
10683	Calculates the standard deviation of a given number of times .
10684	Compute the magnitude of the magnitude component of the model .
10685	Returns the magnitude of the gravity component of the gravity model .
10686	Returns the phase of the given phase .
10687	Compute the H phase of a phase .
10688	Create a polynomial model .
10689	Create Air material .
10690	Render the report .
10691	Convert RGB color to hex
10692	Convert an RGB color to yiq
10693	Convert a RGB color to HSV .
10694	Convert a hex string to RGB
10695	Convert yiq to RGB
10696	Convert HSV to RGB
10697	Color a series of colors .
10698	Get a value from the cache .
10699	Set a key in the database .
10700	Returns a link tag for the given item .
10701	Set device state .
10702	Get a list of modes .
10703	Get the usage of a unit .
10704	Get device information .
10705	Retrieves the list of available locations .
10706	Get allacations .
10707	Create a vacation .
10708	Delete a vacation .
10709	Authenticate the API .
10710	Returns a list of waterheater objects
10711	Decorator to make list resources prepare .
10712	Convert a list of commands into a list of device numbers .
10713	Send binary data to the given port .
10714	Set RTS and DTR values .
10715	Send commands to a serial port .
10716	Run the command .
10717	Validate house code .
10718	Validate unit number .
10719	Send an X10 command .
10720	Returns an argument parser .
10721	Get pylint command .
10722	Decorator to convert a function into a function .
10723	Parse a list of functions .
10724	Create a function from a signature .
10725	Calculate the variant levels .
10726	Handles variant calls .
10727	Process array tokens .
10728	Process a struct .
10729	Return a function that handles the base case .
10730	Return the signature of a dbus object .
10731	Convert option name to lower case .
10732	Convert value to float
10733	Convert value to boolean
10734	Fork a fork .
10735	Convert a list of lists into a dictionary .
10736	Split a list .
10737	Create a path from keywords .
10738	Evaluate a function on the grid .
10739	Decorator to log calls .
10740	Decorator to add runtime .
10741	Decorator to print a function in memory .
10742	Decorator to print a function profile .
10743	Decorator to declare a function declaration .
10744	Decorator to print the runtime stats .
10745	Validate multiple arguments .
10746	Return the default field names .
10747	Download a file from a URL .
10748	Validate bands
10749	Validate the sceneInfo .
10750	Download one or more images .
10751	Validate the sceneInfo .
10752	Download data from AWS .
10753	Open an archive .
10754	Convert a name to a slug .
10755	Increment an ISO name .
10756	Generate a slug for a path .
10757	Check if a path is writable .
10758	Return True if the file handle is writable .
10759	Creates a Curve from a curve .
10760	Create a rectangular grid from rectangular coordinates .
10761	Create an instance from a uniform distribution .
10762	Connect to sphinx searchd
10763	Get a unique token .
10764	Generate a random token .
10765	The URL for this object .
10766	Get a poll by id .
10767	Submit a poll .
10768	Convert a numpy array to a numpy array .
10769	Formats a matlab format .
10770	Formats a shapely polygon .
10771	Generate a contour .
10772	Return a filled contour .
10773	Add a node .
10774	Return the path to the settings file .
10775	Determine if the test context should be used .
10776	Finalize the test database .
10777	Make a clean figure .
10778	Update the particle field .
10779	Remove particle from the pos .
10780	Create a diffusion layer .
10781	Guess a feature guess .
10782	Guess feature guess .
10783	Add particles to the model .
10784	Check if a particle exists .
10785	Add missing particles .
10786	Subtracts all particles from an object .
10787	Subtract a piece of particles from a site .
10788	Subtracts a subset of sites from the object .
10789	Guess if the image is invert
10790	Load a pickle file .
10791	Save the tree to disk .
10792	Compute the overlap of two tiles .
10793	Splits an image into groups of particles .
10794	Create a comparison state .
10795	Generate a perfect planar pixel per pixel .
10796	Translates the Fourier transform .
10797	Create users .
10798	Calculate the weight of the clip
10799	Evaluate the first order - order approximation
10800	Evaluate a new call .
10801	Compute the distance between two vectors .
10802	Convert c to x
10803	Compute the k - th polynomial function .
10804	Resolves the admin type .
10805	Validate a policy .
10806	Validate policy .
10807	Validate a state .
10808	Delete the group .
10809	Update this object .
10810	Retrieves an object by name .
10811	Query the database by name .
10812	Query groups by user .
10813	Search for groups .
10814	Add a member to the team .
10815	Invite a list of email addresses .
10816	Returns True if the given user is a member of this group .
10817	Returns whether or not the user can access the given user .
10818	Checks if the given user can invite the site .
10819	Get a single user .
10820	Filter by the given state .
10821	Query by user .
10822	Query all invitations for a given user .
10823	Query the requests .
10824	Query members by group .
10825	Search for users .
10826	Order a query
10827	Create a new membership .
10828	Delete a group .
10829	Accept a member .
10830	Create a new object .
10831	Get a group by group and admin .
10832	Delete an object from the database .
10833	Executor for globus admin query
10834	Query admins by group_ids .
10835	Get all profiles .
10836	Return a new Profiles object filtered by the given kwargs .
10837	Create a zjitter .
10838	Retrieve the interaction list .
10839	Edit this item .
10840	Publish this object .
10841	Delete the container .
10842	Move the container to the top .
10843	List all pending updates .
10844	Returns a list of the sent updates .
10845	Shuffle the profile .
10846	Reorders the given updates .
10847	Create a new profile .
10848	Temporarily change the formatatter .
10849	Set verbosity .
10850	Generate a sphere .
10851	Calculate local max features from an image .
10852	Calculate the Otsu threshold .
10853	Calculate the harris feature .
10854	Compute the CDF of a sphere .
10855	Trim an analytic gaussian gaussian truncation
10856	Return a Tile instance .
10857	Convert index to p - coordinate
10858	Return a new tile with updated values .
10859	Update the particle .
10860	Return a list of param_particles .
10861	Calculate the position of a parameter particle .
10862	Calculate the polar angle of a particle .
10863	Add a particle .
10864	Update the type of the particle .
10865	Return a Tile instance corresponding to the tile n .
10866	Update the collection with the given parameters .
10867	Rotation matrix
10868	Compute the Jacobian of the Jacobian .
10869	Calculate the number of points hg gaussians .
10870	Calculate the laguerre - ragga function .
10871	Calculate the Fourier transform .
10872	Compute the Kprefactor of the kernel .
10873	Calculate the k - th covariance matrix
10874	Calculates hsymm and returns the hsym
10875	Calculate polydisp points for a polynomial distribution .
10876	Calculate the lilm for a line scan .
10877	Calculate the PSF for a line scan .
10878	Calculate the PSF for a polychrome line segment .
10879	Calculate a PSF using a function .
10880	Convert an object to a list .
10881	Return a copy of a .
10882	Convert an array to a numpy array .
10883	Patch the docstrings of a class .
10884	Slice of the bounding box .
10885	Compute the slices of a tile .
10886	The corners of the grid .
10887	Format a vector .
10888	Return the coordinates of the mesh .
10889	Return the kvectors of the kernel .
10890	Return True if the given items contains any of the given items .
10891	Return the intersection of two tiles .
10892	Return a copy of this tile .
10893	Return a copy of this tile .
10894	Filter the image
10895	Set the filter for each slice .
10896	Load image from file .
10897	Calculate the scale from raw data .
10898	Draws the current object .
10899	Update the current value .
10900	Check that the modelstr and modelstr descriptions are consistent .
10901	Check that the inputs are valid .
10902	Add a label to an axis .
10903	Analyzes the unexplained noise residuals .
10904	Compare data model residuals
10905	Perform a trisect of an image
10906	Simulate a sample of CRB differences .
10907	Plots a slice of a field .
10908	Plots circles along a given axis .
10909	Create a missing particle .
10910	Return a list of globals that are globals .
10911	Calculate the number of pixels in jtjj .
10912	Vectorize damping .
10913	Finds all particles in a tile .
10914	Splits particles into groups .
10915	Check if groups are correct
10916	Calculate the size of each particle in a region .
10917	Update residuals with padding .
10918	Find the best step
10919	Compute the LMA - PMG for the given parameters .
10920	Run a list of particles on a set of particles .
10921	Run all particle groups in the given region
10922	Calculate the number of directions at a given direction .
10923	Finish the simulation .
10924	Fit a new model .
10925	Reset the model .
10926	Run one iteration .
10927	Run one step .
10928	Run the main function .
10929	Main run loop .
10930	Find Lm updates for gradients .
10931	Update the parameter values .
10932	Get the termination statistics .
10933	Check if the term is terminated
10934	Check if the iteration is terminated .
10935	Checks if update_J_J_J_J_J_J_J_J_J_J_J_J_J_J_J_J_J .
10936	Update JTJ .
10937	Update JTJ matrix .
10938	Update JTJ .
10939	Calculates the acceleration correction for a given jamped_j .
10940	Calculate the Jacobian .
10941	Update the model .
10942	Update the function .
10943	Calculates the Jacobian of the model .
10944	Resets the state of the particle .
10945	Run the simulation .
10946	Internal method for internal use .
10947	Reset the particle .
10948	Reset the state .
10949	Returns a list of shares
10950	Sample a field .
10951	Update the state .
10952	Builds the functions of the model .
10953	Set the model .
10954	Convert the model to data .
10955	Determine the tile bounds of an update tile .
10956	Get a component by name .
10957	Calculate the log - likelihood of the model .
10958	Update the residuals of a model change .
10959	Set the memory level .
10960	Randomly scramble the positions of positions .
10961	Create an image .
10962	Convert a list of parameters into a list of values .
10963	Set the shape .
10964	Trigger an update .
10965	Return the value of this Compound .
10966	Set the shape of all components .
10967	Synchronize the parameters .
10968	Setup the passthroughs .
10969	Read the environment variables .
10970	Returns the group s name .
10971	List groups .
10972	List pending requests .
10973	List pending invitations .
10974	Create a new group .
10975	Manage a group .
10976	Delete a group .
10977	List members of a group .
10978	Leave a group .
10979	Approve a member .
10980	Remove a user from a group .
10981	Accept a group .
10982	Locate the spheres in the image .
10983	Get initial features .
10984	Create a feature from a statemaker .
10985	Optimize an initial burn using the initial burn algorithm .
10986	Get a list of particles in a state image .
10987	Return the state and image name and image name .
10988	Translate the parts of a string .
10989	Link zscale .
10990	Finish the simulation .
10991	Generate a seismicity matrix .
10992	Calculate the order of the image .
10993	Checks if the response dict is a dict
10994	Randomize parameters .
10995	Barn interpolation .
10996	Retrieve the schedules for this schedule .
10997	Update schedule .
10998	Calculate the moment
10999	Calculate a slice of the PSF .
11000	Convert z - axis to z - z
11001	Pad a PSF field .
11002	Pack the arguments into a dictionary .
11003	Calculate PSF
11004	Calculate PSF .
11005	Make a request to the API .
11006	Get the active bets
11007	Get a list of bids .
11008	Get the project slug .
11009	Subscribe to an event .
11010	Run a development server .
11011	Get the collection endpoint .
11012	Write a file to disk .
11013	Run linter .
11014	Set real value class .
11015	Publish changes to GitHub .
11016	Deploy and deploy the project .
11017	Return a signed number .
11018	Calculate the number of hours for the current user .
11019	Show the response messages from the server .
11020	List images from the latest article .
11021	Generate a ring .
11022	Return the node with the given string key .
11023	Generate a hash of the given key .
11024	Determine network mode .
11025	Retrieves the port mappings from the container
11026	Sort PEM objects .
11027	Raise an HTTPError if the response is not OK .
11028	Send a SSE content to the response .
11029	Parse an SSE response .
11030	Decorator for requests .
11031	Get a JSON field .
11032	Get a JSON value from the Marathon response .
11033	Parse a comma - separated string .
11034	Get an environment variable .
11035	Add a request to Marathon .
11036	Check the results and raise a RuntimeError if any .
11037	Load a JWKR RSA key .
11038	Return a key vault if it exists .
11039	Perform a GET request .
11040	Perform a write request .
11041	Get a single header .
11042	Make a request .
11043	Listen to a server .
11044	Create a MarathonAcme instance .
11045	Initialize the storage directory .
11046	Initialize logging .
11047	Parse a line of field and value .
11048	Receive data from the transport .
11049	Handle a field value .
11050	Dispatch the event .
11051	Listen for events from Marathon .
11052	Perform a sync operation .
11053	Issue a certificate .
11054	Remove backrefs from obj .
11055	Remove all back references from an object .
11056	Ensure all backrefs are updated .
11057	Remove a key from the store .
11058	Start the bot .
11059	Main loop .
11060	Stop the webserver .
11061	Send a message to a channel .
11062	Send text to a user .
11063	Process a message .
11064	Return True if the message is ignored .
11065	Displays an ACL .
11066	Add a user to the ACL .
11067	Create a new ACL .
11068	Delete acl .
11069	Start a mongodb daemon .
11070	Create a proxy factory for a given class .
11071	Decorator to add proxies to a class .
11072	Convert value to primary key .
11073	Set the value of a nested dictionary .
11074	Get a user by username
11075	Set a user .
11076	Load user rights
11077	Send a message to a channel .
11078	Starts a timer .
11079	Stop a timer .
11080	Get a user by username .
11081	Decorator for views .
11082	Return a FrozenList .
11083	Get help for a command .
11084	Save current state .
11085	Receive a shutdown message .
11086	Displays the bot .
11087	Sleep in a channel .
11088	Wake up a channel .
11089	Sort a list by a given key .
11090	Iterate over all files matching filters .
11091	Iterate over files matching filters .
11092	Iterate over all files in this directory .
11093	The number of files in this directory .
11094	The number of directories in this directory .
11095	Select files by extension .
11096	Select files matching a pattern .
11097	Select files by pattern .
11098	Select files by size .
11099	Select files by mtime .
11100	Select files by time .
11101	Select files by ctime .
11102	Create a zip archive .
11103	Backup the file .
11104	Acquire the lock .
11105	Decorator to check if a repository is required .
11106	Get pickling errors .
11107	Iterate over all files in the given directory .
11108	Return a generator yielding all the directories at the given relative path .
11109	Recursively iterate directory info
11110	Yields all directories within a given path .
11111	Synchronize the directory .
11112	Load a repository
11113	Get a repository .
11114	Remove a repository
11115	Save the state of the repository .
11116	Create a new package .
11117	Get the info for a directory .
11118	Get parent directory info .
11119	Get file info for a given relative path .
11120	Get relative path by id
11121	Get the relative path of a file by name .
11122	Add a directory .
11123	Remove a directory from the repository .
11124	Move a directory .
11125	Rename a file
11126	Copy a file to the repository .
11127	Update a file
11128	Ensure value is a string .
11129	Compute stats for a given trace .
11130	Starts the monitor .
11131	Stop the monitor .
11132	Called when a file is moved .
11133	Tear down the temporary files .
11134	Checks if the file exists or not
11135	Copy this file to another .
11136	Create an API client .
11137	Decorator to ensure a path is required .
11138	Return a list of directories that match the given state .
11139	Returns the number of files in the repository
11140	Reset the repository .
11141	Load a Repository .
11142	Remove a repository
11143	Checks if a path name is allowed for the given path .
11144	Convert path to repo relative path
11145	Get the state of the repository
11146	Get the info for a file .
11147	Determines if a file is a repository file
11148	Create a new tarball .
11149	Renames an attribute .
11150	Calculates a fingerprint for a given text .
11151	Calculate a fingerprint of a file .
11152	Generate a fingerprint for a file .
11153	Generate a fingerprint for a file .
11154	Return a list of choices for this directory .
11155	Print the size of a big directory .
11156	Print a big file .
11157	Print a big directory and its contents .
11158	Mirror this distribution to another location .
11159	Execute a python file .
11160	Takes a list of filenames and writes them to a file .
11161	Apply autopep8 to the source code .
11162	The size of the file .
11163	The mtime of the file .
11164	The last modification time .
11165	Return the ctime of the file .
11166	Return a list of option names for each section .
11167	The names of the options .
11168	Add an option .
11169	Add a positional argument .
11170	Read the docstrings from a list of docstrings .
11171	Return the help string for the option .
11172	Return a description of the positional argument .
11173	Return a string representation of the settings .
11174	Return a string describing the settings .
11175	Parse a block from a file .
11176	Parse a command line argument .
11177	Parse a string .
11178	Return the separator at i .
11179	Get the authorization url .
11180	Get an access token .
11181	Acquire a lock .
11182	Release the lock .
11183	Default decoding function .
11184	Wrap a state dictionary into a dictionary .
11185	Publish a dataset .
11186	Prompt for values in a dict .
11187	Create an admin .
11188	Prompts the user to edit the readme .
11189	Edit a dataset .
11190	Show README content .
11191	Write the README file .
11192	Put an item into the datastore .
11193	Add metadata to datastore .
11194	Freeze a proto dataset .
11195	Copy a dataset .
11196	Compress a Python object .
11197	Finds the index of a potential year .
11198	Decorator for naming names in Python 3 .
11199	Validate a datetime .
11200	Convert a datetime to a Time object .
11201	Strip a comment line from a line .
11202	Strip comments from a string .
11203	Pick the nearest occurrence of a given date .
11204	Return a dict of values for a key .
11205	Return the name from a string .
11206	Return the zoneinfo object for the given name .
11207	Return the metadata for the zoneinfo file .
11208	Return the configuration for a given jid .
11209	Check if a datetime exists .
11210	Set self . _tzdata .
11211	Return a normalized datetime .
11212	Calculate the HMAC - SHA - 256 hash of data .
11213	Decodes a token into a dictionary .
11214	Compare two signatures .
11215	Compare two tokens .
11216	Is this time a valid time?
11217	Pop claims from payload .
11218	Encode the payload .
11219	Decodes a JWT into JWT .
11220	Compare two JWT .
11221	Get a file from the server .
11222	Determine whether a file is a JSON file .
11223	Convert an object into a dictionary .
11224	Convert an object into JSON .
11225	Convert OrderedDict to OrderedDict
11226	Dump an nparray object to JSON .
11227	Decorator to validate the cache .
11228	Return the last item in the list .
11229	Return the next item after dt
11230	Iterate over the items after the given dt .
11231	Return a new rrule .
11232	Run the command line tool .
11233	Returns the template for the template .
11234	Translate an array from a string .
11235	Get the current configuration .
11236	Create a reusable generator .
11237	Send a value to the generator .
11238	Apply a function to each item in a generator .
11239	Print bug info .
11240	Copies a web file to local path
11241	Count the number of lines in a file .
11242	Indent CSS file .
11243	Add newlines to a file .
11244	Reformat css file
11245	Strip whitespace from an iterable .
11246	Calculate future value .
11247	Calculate the area of a triangle .
11248	Calculate the median of the data .
11249	Average a list of numbers .
11250	Calculate the variance of a list of numbers .
11251	Get the percentage of two numbers .
11252	Convert datetime object to string
11253	Yields an attribute of an object .
11254	Iterate over all the attributes of a list .
11255	Iterate over all the attributes of an object .
11256	Recursively flattens an iterable .
11257	Yield a list of values from a dict
11258	Helper function to iterate over a list of items .
11259	Return a generator that yields all data matching pattern .
11260	Match a pattern .
11261	Split a list of strings .
11262	Replace all occurrences of a pattern .
11263	Yield a wildcard matching pattern .
11264	Iterate through each of the previous lines .
11265	Read a line from a file .
11266	Run a subprocess .
11267	Iterate over the files inital_path .
11268	Wrapper around join .
11269	Substitute a list of strings .
11270	Substitute a template .
11271	Convert an iterable to a string .
11272	Register default types .
11273	Returns a dictionary with the current page size
11274	Check pidfile
11275	Check if the script is running .
11276	Disown the cgroup .
11277	Run a program .
11278	Parse a comma - separated list of addresses .
11279	Encode ids .
11280	Return the creator function for the given item type .
11281	Clone the object .
11282	Add an item to the chain .
11283	Return an iterator for the next iteration .
11284	A decorator that yields a reducer from a function .
11285	Return a dict of all network names .
11286	Write line to stdout .
11287	Execute the script .
11288	Return a list of subfields of the request .
11289	Strip XML namespace from ElementTree
11290	Load a dictionary from a dictionary .
11291	Return the JSON representation of an object .
11292	Consume a JSON object and return a JSON response .
11293	Return a HttpResponse containing the oEmbed schema .
11294	Main function .
11295	Make request data .
11296	Takes a response and converts it to a dictionary
11297	Check for exceptions .
11298	Get all the text of a given node .
11299	Register a provider .
11300	Unregisters a provider .
11301	Populate the registry .
11302	Return provider for given URL .
11303	Invalidate all stored OEmbedo objects .
11304	Get an OEmbed resource .
11305	Autodiscover provider data .
11306	Store all providers in provider_data .
11307	Map an attribute to an object .
11308	Returns the image s image field .
11309	Map a resource to a dictionary .
11310	Get object from url .
11311	Get the current record .
11312	Update OAI info record .
11313	Update the cnum field .
11314	Update hidden notes .
11315	Update the notes .
11316	Updates the title to the beginning of the record .
11317	Update report numbers .
11318	Update ISBN field .
11319	Update all DOIs .
11320	Updates the date field .
11321	Update language fields .
11322	Generate HTML table for a file .
11323	Check package integrity .
11324	Convert capitalization to capitalization .
11325	Extract oembeds from text .
11326	Strip oembeds from the given text .
11327	Autodiscover apps .
11328	Select a single option .
11329	Main entry point .
11330	Create a new record .
11331	Create a progress bar .
11332	Print an error message to stderr .
11333	Print a banner .
11334	Create a table of columns
11335	Prompt the user for a question .
11336	Get the records from a URL .
11337	Connect to the internet .
11338	Set the mode .
11339	Set the target temperature .
11340	Set the target temperature .
11341	Set the target temperature .
11342	Load configuration from a file .
11343	Authenticate the user .
11344	Make a request to the NUHeat API .
11345	Handle opening tag .
11346	Handle closing tag .
11347	Convert HTML to text .
11348	Return True if the callback is an instance of the class .
11349	True if the callback is a function .
11350	Merge kwargs into the parser .
11351	Merge arguments from a list .
11352	Fill the text with the given width .
11353	Make a user agent string .
11354	Add a control field .
11355	Convert a record to a string .
11356	Escapes HTML to XML .
11357	Format arXiv ID .
11358	Fix journal name .
11359	Add authors field to authors_subfields .
11360	Replace slashes with underscores .
11361	Convert title to capitalization .
11362	Convert HTML subscripts to latex
11363	Download a file from url to another .
11364	Run a shell command .
11365	Create a logger .
11366	Unzip a compressed file .
11367	Locate all files matching a pattern .
11368	Parses an authorname from a string .
11369	Convert date to ISO 8601 format .
11370	Convert a datetime to a human readable string .
11371	convert a list of images to a list
11372	Get a temporary file .
11373	Return a list of letters from a string .
11374	Return True if the given license is an OA license .
11375	Crawl an issue XML file .
11376	Parse an issue . xml file .
11377	This function is called by xmllint
11378	Get publication date from XML document .
11379	Extract OEmbed documents from text .
11380	EEmbed a template .
11381	Autodiscover node .
11382	Render a URL scheme .
11383	Create a Parser object .
11384	The capture module .
11385	The body of the body .
11386	Run the command .
11387	Return the full path to the full path
11388	Parse the function body .
11389	Return True if the body can be run from the CLI .
11390	Register a field .
11391	Add the field to the model .
11392	Fetch an OEmbed URL .
11393	Convert a URL to full path
11394	Create a mock request .
11395	Load a class .
11396	Generate the CSV record .
11397	Add a CMS link .
11398	Update report numbers .
11399	Update keywords .
11400	Update the collaboration field .
11401	Create a field .
11402	Create records from MARC XML file .
11403	Create a record from a MARC XML file .
11404	Filters the field_instances according to the filter_mode .
11405	Drop duplicate fields .
11406	Determine whether two records are identical .
11407	Get a list of field instances from a record .
11408	Delete a field from a record .
11409	Add fields to a record .
11410	Move fields from a record .
11411	Delete a subfield from a record .
11412	Get a field from a record .
11413	Replace field with new field .
11414	Get the subfields of a record .
11415	Delete a subfield from a record .
11416	Add a subfield into a record .
11417	Modify a control field .
11418	Modify a subfield .
11419	Move a subfield .
11420	Convert a record to XML string .
11421	Return XML representation of a field .
11422	Print a record .
11423	Print a list of records
11424	Find a field in a record .
11425	Match subfields of a record .
11426	Remove empty subfields from a record .
11427	Make all subfields in a record .
11428	Remove empty fields from a record .
11429	Remove fields from a record .
11430	Orders the subfields of a record .
11431	Compare two fields .
11432	Checks the validity of the field .
11433	Shift field positions by start and delta
11434	Return True if tag matches pattern .
11435	Validate global field positions .
11436	Sort record by indicators .
11437	Sort fields by indicators .
11438	Create a record from a MAR file .
11439	Get all children of a given tag .
11440	Get all children of a given node .
11441	Validate a record .
11442	Convert a warning to a string .
11443	Compare two lists .
11444	Parse the XML file .
11445	Parse OAI XML file .
11446	Create a deleted record .
11447	Login to the given session .
11448	Check if login data is valid .
11449	Send a message to the recipient .
11450	Get a date from a file .
11451	Returns a list of all the papers in the article .
11452	Add fulltext field to the record .
11453	Convert a collection of records into a string .
11454	Parse a BibRecord .
11455	Get a configuration item by key .
11456	Load a configuration file into a dictionary .
11457	Search record .
11458	Remove all fields from the record .
11459	Remove all fields from the record .
11460	Add a system number .
11461	Add a control number .
11462	Update subject categories .
11463	Connect to the remote server .
11464	Download a file from the remote server .
11465	Change the directory to the remote server .
11466	List files in a folder .
11467	Create a folder .
11468	Delete a file .
11469	Delete a folder .
11470	Return the size of a file .
11471	Upload a file .
11472	Parse the given text .
11473	Parse the oEmbed data from a text block .
11474	Login to the server .
11475	Renew the OAuth token
11476	Create a new item from a local file .
11477	Create a folder .
11478	Calculate the MD5 hash of a file .
11479	Create a bitstream from a local file .
11480	Upload local file as an item .
11481	Create a folder
11482	Recursively upload a folder .
11483	Return True if the local folder contains only files in the local folder .
11484	Upload a folder as an item .
11485	Upload a file .
11486	Descend folder ID .
11487	Search folder for a folder or folder
11488	Find resource id from path .
11489	Recursively downloads a folder
11490	Download an item .
11491	Download a file from the server .
11492	Login with an API key .
11493	List the user s folders .
11494	Get the default API key .
11495	List all users .
11496	Get a user by email
11497	Create a new community .
11498	Get a community by name .
11499	Get a community by ID
11500	Get community children .
11501	List all known communities .
11502	Get a folder
11503	Retrieve the children of a folder .
11504	Delete a folder .
11505	Move a folder .
11506	Create a new item .
11507	Retrieve a specific item .
11508	Download an item .
11509	Delete an item .
11510	Get metadata about an item .
11511	Set metadata for an item .
11512	Share an item .
11513	Move an item to another folder .
11514	Search an item by name .
11515	Search for items by name and folder
11516	Search for items by name and name .
11517	Create a new link .
11518	Generate an upload token .
11519	Perform an upload operation .
11520	Search ThreatConnect API .
11521	Add a condor .
11522	Add a condor job to the batch .
11523	Extract metadata for a specific item .
11524	Login to MFA .
11525	Create a big thumbnail .
11526	Create a small thumbnail .
11527	Perform an advanced search .
11528	Add a scalar data .
11529	Upload build results to a json file .
11530	Get a revision from the database .
11531	Generate a hash of a request .
11532	Setup the client .
11533	Sets up the serial port .
11534	Return the number of resources in a block .
11535	List all available drivers .
11536	Map a pin ID to a physical pin .
11537	Set the direction of a pin .
11538	Return the direction of a pin .
11539	Set the pin type .
11540	Return the type of a pin .
11541	Write a value to a pin .
11542	Read a single pin .
11543	Set an analog reference .
11544	The analog reference for the specified pin .
11545	Set the pwm frequency .
11546	Compute the SIRode .
11547	The URL of the driver .
11548	Guess memory usage of array memory .
11549	Main entry point .
11550	Sets up the modem .
11551	Returns an exception object for the given status code and error codes .
11552	Read the data for a pin .
11553	Disables analog reporting .
11554	Disables digital reporting .
11555	Enables analog reporting .
11556	Enables digital reporting .
11557	Send extended analog data .
11558	Get the stepper library version .
11559	Write to an address .
11560	Send an I2C stop reading .
11561	Plays a tone .
11562	Set an analog pin .
11563	Set the digital latch for a pin .
11564	Configure the servo .
11565	Sets the stepper pins .
11566	Sets the motor speed .
11567	Request the library version .
11568	Open the serial port .
11569	Main loop .
11570	Set the brightness .
11571	Set the bitmap of the image .
11572	Output the whole buffer .
11573	Clear display buffer .
11574	Process a digital message .
11575	Called when the encoder data is received .
11576	Update the sonar data .
11577	Send a sysex command .
11578	Send a command .
11579	Send system reset .
11580	Print data to stdout
11581	Run the command .
11582	Retrieve the content of a given URL .
11583	Returns a list of all image urls
11584	Run background image finder
11585	Return the node name where the name would land to
11586	Return the node where the name would land to
11587	Return the encoding idlet or refcount if the key
11588	Removes an element from the stack .
11589	Removes an element from the stack .
11590	Removes a value from src to dst
11591	Perform sunion .
11592	Perform sunionstore .
11593	Return True if the given mapping exists False otherwise .
11594	Rename src to dst
11595	Rename key src to dst if dst exists
11596	Returns a list of keys matching pattern
11597	Returns the number of keys in the current database
11598	Prepare the attributes and elements .
11599	Verify an XML signature .
11600	Annotate the photos .
11601	Save the model .
11602	Save a formset .
11603	Parse the headers from the headers .
11604	Validate ranges .
11605	Convert a list of ranges into a list of integers .
11606	Condense a list of ranges .
11607	Render a social widget .
11608	Add a new matrix .
11609	Multiply the data .
11610	Update the probability at the given read level .
11611	Run the TPM algorithm .
11612	Write read counts to a file .
11613	Writes genotypes to a file .
11614	Save posterior probabilities to HDF5 file .
11615	Print read data .
11616	Turn a string into a Roman string .
11617	Brahmic transformation .
11618	Determine the scheme name .
11619	Sets up the scheme .
11620	Convert an integer to a UTF - 8 string .
11621	Set the script number .
11622	Handle unrecognised characters .
11623	Return the equivalence of a char .
11624	Transliterate a devanagari string .
11625	Generate generator .
11626	Return a string representation of the query .
11627	Convert a list of verbose parts into parts .
11628	Delete sent messages .
11629	Load the contents of a Namelist .
11630	Read a filename from the cache .
11631	Read a filename from the cache .
11632	Return the codepoints in a filename .
11633	Returns a list of CharsetInfo objects .
11634	Generate HTTP headers .
11635	Parse OAuth2 access token
11636	Refresh the access token
11637	Get data from a file .
11638	Write data to a file .
11639	Write json data to a file .
11640	Get data from a json file .
11641	Get yaml data from a yaml file .
11642	Write yaml data to a file .
11643	Apply spectral transformation to X .
11644	Fit the model .
11645	Compute the rotation matrix .
11646	Apply transformation to X .
11647	Fit the model to X .
11648	Fit the model .
11649	Shift X .
11650	Fit the smoothing model .
11651	Apply smoothing to X .
11652	Return the version of this package .
11653	Get the live version .
11654	Fit the transformer .
11655	Apply transformer to X .
11656	Fit the transformer .
11657	Fit the model .
11658	Scale X .
11659	Inverse of X .
11660	Fit the K - Means model .
11661	Performs k - means clustering .
11662	Checks whether the array is either integral or boolean .
11663	Convert an array to an integer type .
11664	Start the container .
11665	Builds FLANN indices for each bag .
11666	Gets within - bag distances for each bag .
11667	r Compute the linear system .
11668	r Compute quadratic model .
11669	Topological sort function .
11670	Ksas as an array and type - checked .
11671	The dictionary of arguments to pass to FLANN .
11672	Fit the model .
11673	If unstacked .
11674	Return a shallow copy of the features .
11675	Make a Features object with no metadata to the same features .
11676	Fit the model .
11677	Compute the mean of each bag .
11678	Listen for events .
11679	Connect to the server .
11680	Disconnect from the server .
11681	Send a command .
11682	Read a line from the socket .
11683	Read a block .
11684	Read an XML block .
11685	Analyse the changeset .
11686	Get user details .
11687	Return information about a changeset .
11688	Download the given changeset from OpenStreetMap
11689	Get the metadata for a given changeset
11690	Extract the area from a GeoJSON file .
11691	Remove all content from the document .
11692	Set fields from changeset
11693	Suspend a reason .
11694	Perform a full analysis .
11695	Verify that the words are suspicious .
11696	Verify that the editor is legit .
11697	Count the number of changes
11698	Unwrap a stream from a URI .
11699	Serve a socket .
11700	Spawns a spawn of animals .
11701	Return a list of offspring animals .
11702	Return the cosine of two vectors .
11703	Set gender .
11704	Set the parents of an egg .
11705	Convert an Asxword into an egg .
11706	Generate a sexages genotyping .
11707	Generate a gamete .
11708	Print the parents of a person .
11709	Get an instance from the server .
11710	Make a request .
11711	Parses the logged in session .
11712	Recursively flattens a dictionary .
11713	Retrieve a single pipeline instance .
11714	Schedule a pipeline .
11715	Retrieve the console output .
11716	Edit this container .
11717	Create a new template .
11718	Perform a DELETE request .
11719	Return a set of all pipelines .
11720	Get a zip file from a directory .
11721	Configure config loader .
11722	Return Flask application class .
11723	Initialize the application .
11724	Initialize Flask application configuration .
11725	Convert camel case to word
11726	Format the number of seconds .
11727	Pretty print a dictionary .
11728	Assert that needle is contained in haystack
11729	Flag inner classes .
11730	Calculate the pvPC for each pvPC .
11731	Compress the given string using gzip
11732	Register a class .
11733	Return True if class is a valid class .
11734	Get pvpc data .
11735	Sanitize a path .
11736	Validate a Schema .
11737	Decorator to configure a route .
11738	Attach a blueprint to this bundle .
11739	Moves a dot .
11740	Get the first occurrence of a set of symbols .
11741	Compute the first nonterminals .
11742	Compute the forward weights .
11743	Return initial closure .
11744	Go to the next rule .
11745	Construct a closure from a list of rules .
11746	Initialize the application .
11747	Returns a list of all registered routes .
11748	Check if a bundle exists .
11749	Attaches a blueprint .
11750	Register a blueprint .
11751	Get blueprint routes .
11752	Compute the precedence of terminals .
11753	Convert a grammar into a dictionary .
11754	Return the antecedents and the consequent of a definite clause .
11755	Auxiliary routine to implement tt_entails .
11756	Return a list of all propositional symbols in x .
11757	Return True if expression is true False otherwise .
11758	See if the clauses are true in a partial model .
11759	A variable is an Expr with no args and a lowercase symbol as a lower case .
11760	Remove the sentence s clauses from the KB .
11761	Refresh all settings .
11762	An alphabeta search algorithm .
11763	Return the value to player ; 1 for loss 0 for loss 0 .
11764	If X wins with this move return 0 .
11765	Return True if a line through move on board .
11766	Recursively update an object .
11767	Samples from a sequence .
11768	Return a random - sample function that picks from seq weighted by weights .
11769	Print a formatted message to stdout .
11770	Try to find some reasonable name for the object .
11771	Open a file based on the AIMA root directory .
11772	A naive Bayesian Estimation .
11773	Number of bits to represent the probability distribution in values .
11774	Create a NeuralNetLearner .
11775	Ensemble a list of learner classes .
11776	Return a predictor that takes a weighted vote .
11777	Copy dataset replicating each example in proportion to its weight .
11778	Leave one out cross - validation over the dataset .
11779	Generate a DataSet with n examples .
11780	2 inputs are chosen uniformly from 0 .
11781	Compare two datasets .
11782	Check that my fields make sense .
11783	Add an example to the list of examples checking it first .
11784	Raise ValueError if example has any invalid values .
11785	Returns the number used for attr which can be a name or - n .
11786	Return a copy of example with non - input attributes replaced by None .
11787	Add an observation o to the distribution .
11788	Change the value of an object .
11789	Return a random sample from the distribution .
11790	Return True if we remove a value .
11791	Minimum - remaining - values heuristic .
11792	Least - constraints - values heuristic .
11793	Prune neighbor values inconsistent with var_value .
11794	Maintain arc consistency .
11795	Returns the minimum number of conflicts between max_steps .
11796	Return the minimum value of a variable .
11797	Return the number of conflicts var has with other variables .
11798	Start accumulating inferences from assuming var = value .
11799	Rule out var = value .
11800	Return the partial assignment implied by the current inferences .
11801	Undo supposition and all inferences from it .
11802	Return a list of variables in current assignment that are in conflict
11803	Return the number of conflicts in a variable
11804	Assign var and keep track of conflicts .
11805	Record conflicts caused by addition or deletion of a queen .
11806	Segment text using Viterbi algorithm .
11807	Encodes text using a permutation of the alphabet .
11808	Generate a sample of n words .
11809	Index a whole collection of files .
11810	Index the text of a document .
11811	Compute a score for this word on this docid .
11812	Present the results as a list .
11813	Get results for the query and present them .
11814	Return a score for text based on how common letters pairs .
11815	Search for a decoding of the ciphertext .
11816	Compute the log - likelihood score of the given code .
11817	Returns the value as a dictionary .
11818	The expected utility of doing a in state s according to the MDP and U .
11819	Return the state that results from go in this direction .
11820	Return the settings as a dictionary .
11821	Create a new setting .
11822	Returns True if value is compatible with the value_type .
11823	One schedule function for simulatedAnnealing
11824	Run genetic search .
11825	Return a list of random cubes .
11826	Print the board in a 2D array .
11827	Boggle neighbors of a network .
11828	N2 is a perfect square return its square root .
11829	List the nodes reachable in one step from this node .
11830	Fig . 3 . 3
11831	Return a list of nodes forming the path from the root to this node .
11832	Return a new individual crossing self and other .
11833	Make a digraph into an undirected graph by adding symmetric edges .
11834	Connect two matrices .
11835	Add a link from A to B to B of given distance in one direction only .
11836	h function is straight - line distance from a node s state to goal .
11837	In the leftmost column try all non - conflict rows .
11838	Place the next queen at the given row .
11839	Set the board and find all the words in it .
11840	The total score for the words found in the rules .
11841	Trace an agent .
11842	An Agent that keeps track of where locations are clean or dirty .
11843	Run one step .
11844	Run the Environment for given number of time steps .
11845	Return all things exactly at a given location .
11846	Add a thing .
11847	Delete a thing .
11848	Return all things within radius of radius .
11849	By default agent perceives things within a default radius .
11850	Move a thing to a new location .
11851	Put walls around the entire perimeter of the grid .
11852	Parse a list of words .
11853	Add edge to chart and see if it extends another edge .
11854	For each edge expecting a word of this category .
11855	Add to chart any rules for B .
11856	See what edges can be extended by this edge .
11857	Return all settings .
11858	Make a Factor from a variable .
11859	Eliminate var from all factors by summing over its values .
11860	Yield every way of extending e with values for all vars .
11861	Is event consistent with the given evidence?
11862	Calculate a weighted sample from the network .
11863	Shows the approximate approximating probabilities .
11864	Add a Bayes node .
11865	Multiply two factors combining their variables .
11866	Make a factor eliminating var by summing over its values .
11867	Return my probabilities ; must be down to one variable .
11868	Strip whitespace from a node .
11869	Convert HSL color to RGB .
11870	Convert RGB color to HLS .
11871	Convert a hex value to a color .
11872	Wait for a given number of seconds .
11873	Get JSON from API
11874	Stores the given arguments .
11875	Get a password from stdin .
11876	Get a channel from stdin .
11877	Format a log record .
11878	Get the owner of a process .
11879	Search for a process for a given process .
11880	Searches for all processes matching a given searchPortionPortionPortionPortionPortionPortion .
11881	Searches for the mapping for a given process .
11882	Scan all processes for a mapping .
11883	Return a list of file descriptors for a given process .
11884	Scan all processes for an open file .
11885	Connect to the Hub .
11886	Send a command .
11887	Receive data from the socket .
11888	Get the light data .
11889	Return a list of all the lights .
11890	Set the brightness .
11891	Set all the colors .
11892	Update the hub .
11893	Retrieve a single document .
11894	Read a text file .
11895	Clean up the given paths .
11896	Create an index file .
11897	Create a list of index files .
11898	Load an image from disk .
11899	Helper function to get src from image
11900	Retrieve a thumbnail image from a file .
11901	Run the server .
11902	Serve an index file .
11903	Mark a function as static .
11904	Generate a random bloise2d image .
11905	Create a 2D 2D ndarray .
11906	Convert a set of matches into a permutation matrix .
11907	Return two blocks of four blocks .
11908	Convert A to bipartite form .
11909	Convert D to a pattern matrix .
11910	Bump the semantic version .
11911	Extract the version from a file .
11912	Fail an error .
11913	Tag a release .
11914	Initialize the environment .
11915	Render a Jinja2 template
11916	Render a template to a path .
11917	Render a Jinja2 template .
11918	Return the dataframe .
11919	Index row in dataframe
11920	Return the object for this view .
11921	Return the paginator object .
11922	Paginate dataframe .
11923	Parse the config file .
11924	Render a Jinja2 template .
11925	Parse a markdown file .
11926	Parse a filename .
11927	Run the HTTP server .
11928	Return a dict with the file stat information .
11929	Watch files .
11930	Deploy blog .
11931	Context manager for rendering a template context .
11932	Find a widget by name .
11933	Load all widgets from a template .
11934	Return a list of widgets for a field .
11935	Create a new block context .
11936	Display the display .
11937	Create a message .
11938	Add a message to the backend .
11939	Publish a message to all users .
11940	Marks a message as read .
11941	Mark all messages as read .
11942	Return the number of messages stored in the database .
11943	Return a list of inbox messages .
11944	Add a message to the backend .
11945	Store messages in the backend .
11946	Prepare messages to be processed .
11947	Run jocker .
11948	Initialize a logger .
11949	Configure a custom object .
11950	Set global verbosity level .
11951	Import a yaml config file
11952	Execute a Jocker script .
11953	Parse double push output .
11954	Upload a gif to Imgur
11955	Return True if ip is a dot notation .
11956	Is the given IP address?
11957	Determine if the given string is an octal .
11958	Return True if the given IP is a decimal number .
11959	Checks if the given nm is valid .
11960	Return True if nm is a valid number .
11961	Is a wildcard address?
11962	Convert IPv6 address to decimal degrees .
11963	Convert decimal address to dot notation .
11964	Convert an IP address to decimal degrees .
11965	Convert an IP address to decimal .
11966	Convert an IP address to decimal
11967	Convert a byte number to a list of bits .
11968	Convert decimal address to binary string .
11969	Convert a netmask to decimal degrees .
11970	Convert a wildcard address to decimal degrees .
11971	Detect the correct IP address .
11972	Convert an IP address to decimal degrees .
11973	Convert an IP address to an IPv6 address .
11974	Convert nm to an IPv6 address .
11975	Return the sum of the other .
11976	Subtracts the decimal point from self .
11977	Get the bits of the IP address .
11978	Returns the wildcard as a wildcard .
11979	Set the CIDR address .
11980	Set IP address .
11981	Set the netmask .
11982	Is the given IP address?
11983	Upload a file to a bucket .
11984	Copy a Storage object to a bucket .
11985	Upload a folder to a bucket .
11986	Upload a file to S3 .
11987	Trigger an event .
11988	Connect to the websocket .
11989	Called when a message is received .
11990	Compare two strings .
11991	Decode HTML entities .
11992	Set signature passphrases .
11993	Set encryption passphrases .
11994	Sets the algorithms .
11995	Returns a dictionary with the supported algorithms .
11996	Set options .
11997	Verify the signature .
11998	Encrypt data .
11999	Decodes data according to algorithm .
12000	Sign data .
12001	Unsign data
12002	Removes the magic .
12003	Add a header .
12004	Parses the header .
12005	Remove the header from the data .
12006	Read version from data .
12007	Get algorithm information .
12008	Generate a PBKDF2 key .
12009	Update dict with default values .
12010	Returns a list of the contents of the contents of the archive .
12011	Extract a file from the zip .
12012	Perform the photometry calculation
12013	Generate a panel plot .
12014	Calculate the center of each target .
12015	Define the plot of the signal .
12016	Calculate the model unerted stars
12017	Dump a field .
12018	Disassemble the file descriptor .
12019	Finds all imports in the given pbds .
12020	Write a FASTA_dict to a file .
12021	Add a line error .
12022	Check feature boundaries .
12023	Check that the phase is consistent .
12024	Copy line from old_parent to new_parent .
12025	Remove a line from the tree .
12026	Return the abfID of a file .
12027	Parse the ABF file .
12028	Save a header to a file .
12029	Iterate over the sweeps .
12030	Load comments .
12031	Get the protocol sequence .
12032	Calculate the average of the sweep .
12033	Calculate the average sweep .
12034	Create a Gaussian kernel .
12035	Compute the sweep of the kernel .
12036	Convert a list of dicts to a flat list
12037	Return a numpy array of values for a given key .
12038	Convert a matrix to a list of dictionaries .
12039	Launch a temporary web browser .
12040	Check out a given thing .
12041	Convert a matrix to HTML .
12042	Convert an XML file to a python file .
12043	Algorithm for Algorithm
12044	Find the index of the data in the data .
12045	returns a list of dicts
12046	Save object to a pickle file .
12047	Return a string representation of a dict .
12048	Determine protocol comment from file .
12049	Scans the ABF folder
12050	Get the parent ID of an ABF file .
12051	Determine the parent ID of a file .
12052	Get the notes for an ABF file .
12053	Get a list of all the ids from a file .
12054	Inspect an ABF
12055	Login to ftp
12056	Upload a local folder
12057	Upload a file to the server .
12058	Ask the user for a password .
12059	Display a warning message .
12060	Display a message .
12061	Process command line arguments .
12062	Generate a summary of the first sweep .
12063	Calculates the average average of a feature .
12064	Loops through all ABF files .
12065	Plot the gain function .
12066	Plots comments .
12067	Annotate SWH .
12068	Create a new ABF .
12069	Save the figure to a file .
12070	Try to load a swhlab module .
12071	Update the state of the trace .
12072	Print the description of this object .
12073	Print the trace summary .
12074	Update the state .
12075	Analyze an ABF file .
12076	Plot a frame and save it to a file .
12077	Create a new figure .
12078	Save the plot to a file .
12079	Plot the sweeps .
12080	Plot the protocol .
12081	Plot the protocols .
12082	Rename all files in path .
12083	Sort a list of files by extension .
12084	Sort a list of file names by name .
12085	Perform a folder scan
12086	Generate html page .
12087	Iterate over all cells .
12088	Example production test .
12089	One - step plot .
12090	2 - step plotting .
12091	This function is used to create an overlaps test .
12092	Plot the IV .
12093	Python 2 . 3 . 3
12094	Plots the IV and IV of the IV .
12095	Index images in a folder
12096	Updates the activatable value .
12097	Deletes the active model .
12098	Write to file_handle if supplied omitting print output
12099	Get the root directory of the batch .
12100	Append specs to the log file .
12101	Record setup info .
12102	Launch process group .
12103	Print summary of the batch .
12104	Run the qsub command .
12105	Run a qsub command .
12106	Launch a process group .
12107	Validate the launcher list .
12108	Launch all the launcher .
12109	Perform the review .
12110	Prompts the user for the given options .
12111	Save metadata to a file .
12112	Create a temporary file path .
12113	Determines if a file is supported .
12114	Save image data to file .
12115	Get the timestamp of a file .
12116	Load results from results file
12117	Calculate the ndistribution of data
12118	returns the ABF info
12119	Write the header to a file .
12120	Generate a colormap .
12121	Get the data around a given time points .
12122	Filters the data y .
12123	Validate all activatable models .
12124	Helper function to convet an args object to a HoloViews Table
12125	Print positional arguments .
12126	Formats the elements of an argument set appropriately
12127	Return a dictionary with the results of each key .
12128	Print a summary of the items .
12129	Helper function to build the specs .
12130	Print the spec to stdout .
12131	Sorts the arguments according to the given order .
12132	Generate a linspace .
12133	Extract a log from a log file .
12134	Write a log to a log file .
12135	Create a directory from a directory .
12136	Return a list of field names .
12137	Load a list of specs .
12138	Convert a pattern into a list of file names .
12139	Create a FileInfo object from a pattern .
12140	Load a table from a table .
12141	Load data from a pandas dataframe
12142	Return info about a source .
12143	Add an item to the list .
12144	Plot the stimulus .
12145	Starts an ABF .
12146	Analyze an ABF file
12147	Scan folder1 and file2 files .
12148	Copy images to the folder
12149	Analyze the ABFs .
12150	Generate HTML for a file .
12151	Generate HTML for a single ABFID .
12152	Generate html for a single plot
12153	Multiply a signal with a kernel .
12154	Return the time in seconds .
12155	Move value to the front of a list .
12156	Move a value to the end of a list .
12157	Orders an item in a list .
12158	Sort a list of abf ids
12159	Return a dictionary with all the files in a folder
12160	Return the parent of the given ID
12161	Return the user s home directory .
12162	Attempt to catch a coroutine .
12163	Check if an event is exceeded .
12164	Add a listener .
12165	Add a listener .
12166	Remove a listener .
12167	Dispatches an event .
12168	Dispatches an event .
12169	Dispatch an event .
12170	Emit an event .
12171	Return the number of listeners for an event .
12172	Generate a list of pngs .
12173	Generate an HTML file for an HTML document .
12174	Generate an index file .
12175	Plot all sweep events .
12176	Plot data .
12177	Plot the covariance of the covariance .
12178	Ensures the analysis .
12179	Detect APs on all sweeps
12180	Extract the author and version from a package .
12181	Create a new API subclass .
12182	Execute an API request .
12183	Check if a method exists .
12184	Add parsley namespace to namespace_dict
12185	Extract a document from a document .
12186	Connect to real time .
12187	Handle a message .
12188	Return True if message is a message .
12189	Create a new bot from an API token .
12190	Format a message .
12191	Get the socket url .
12192	Return the instruction list .
12193	Respond to a channel .
12194	Validate the first message .
12195	Return a list of all application locations .
12196	Return a list of tasks .
12197	Return a list of all tasks .
12198	Write the dataset to a cldf file .
12199	The description of the command .
12200	Create an instance from a json file .
12201	Create an instance from a yaml file .
12202	Create an instance from a JSON string .
12203	Parse a parselet node .
12204	Perform auto constraint on a component .
12205	Build a URL .
12206	Raise exception for HTTP status code .
12207	Truncate a string .
12208	Add one or more entries .
12209	Return a cache key .
12210	Decorator to cache a result .
12211	Invalidate all cached functions .
12212	Get the field for a proxy .
12213	Update field from pref_proxy
12214	Returns a model class for the given app and app .
12215	Get the locals of a frame .
12216	Traverse the locals of the current frame .
12217	Print a table of file creation and size
12218	Bind arguments to a function .
12219	Iterate over all matching parameters .
12220	Create an executor .
12221	Add a function to the callable .
12222	Add a function to the first call .
12223	Execute a query .
12224	Convert a shapefile to an extension
12225	Convert grib data to tiff format
12226	Called when preferences changes .
12227	Bind proxies to a list of values .
12228	Register admin models .
12229	Autodiscover the site .
12230	Remove all locals from the stack .
12231	Create a proxy module .
12232	Register prefs .
12233	Add prefs to preferences .
12234	Get a preference .
12235	Generate versionwarning data .
12236	Create an objective function .
12237	Determine the gradient of a doublewell .
12238	Rosterbrock function .
12239	Compute the polynomial and gradient of an ellipse .
12240	Robustering function .
12241	Convert polar to camel case
12242	Calculate the bohachevsky derivation
12243	Dixon price
12244	Compute the gradient of the styblinski .
12245	Get all the S3 bucket names .
12246	Get a bucket .
12247	Create a bucket .
12248	Synchronize the database .
12249	Add a request key .
12250	Get a Key object .
12251	Extracts all keys from the bucket .
12252	Delete one or more keys from the bucket .
12253	Delete a bucket .
12254	List all the keys in the bucket .
12255	Sync the database .
12256	Least - BFGS - BGS - B - BFGS - B - BF - B - B - B - BF - B - B - B - B - B - B - BF - B - B - B - BF - B - B - B - B - B - B
12257	Smooth an array .
12258	Compute the eigenvectors of x .
12259	Compute a simplex .
12260	Proximal proximal operator .
12261	Decorator for gradient optimizer .
12262	Add a proximal operator .
12263	Load meta data from file .
12264	Sets the file .
12265	Compute the objective function .
12266	Add a docstring to the decorated function .
12267	Check gradients .
12268	Evaluate the rules for a given spec .
12269	Evaluate the validator against a spec .
12270	Read a table from a file .
12271	Get the schema from a file .
12272	Convert an integer number to a Finish Reference string .
12273	Validate a ISO reference character .
12274	Convert a reference string to an integer .
12275	Check if a reference is valid
12276	Generate a barcode .
12277	Add a file .
12278	Runs the command in the given repo .
12279	Add files to a package .
12280	Return a list of all files in the package .
12281	Run a command .
12282	Get a resource
12283	Lookup a repository by username and repos .
12284	Return the root directory of the dataset .
12285	Add a repository .
12286	Lookup a repository by username and reponame
12287	Run shell command .
12288	Check if datapackage exists .
12289	Bootstrap a datapackage
12290	Initialize a repository .
12291	Annotate the metadata data in a repository .
12292	Add metadata to the package .
12293	Add actions to the package .
12294	Add platform information .
12295	Annotate the dependencies of a repo
12296	Post the metadata to the repository .
12297	Show a specific plugin .
12298	Load all plugins .
12299	Register a plugin .
12300	Search for plugins .
12301	Instantiate a validator .
12302	Validate a given repository .
12303	Check if url is valid .
12304	Post a package to a repo .
12305	Import a module class by path .
12306	Return a list of all executable files .
12307	Try to get a remote repository
12308	Get the files to commit .
12309	Add a list of files to a repository .
12310	Pull a pull stream from a URI .
12311	Record a file .
12312	Creates an ingest point between two streams .
12313	Instantiate a Transformer .
12314	Run a git command .
12315	Run a command .
12316	Initialize a local repository .
12317	Delete a repository
12318	Drop a repository .
12319	Get the permalink for a given path .
12320	Add files to the repository .
12321	Send the code to the server .
12322	Return a dictionary representation of the object .
12323	Decorator for API calls .
12324	Save the order .
12325	Tokenize a list of tokens .
12326	Initialize the profile .
12327	Update the default settings .
12328	Initialize the repository .
12329	Compute the SHA256 hash of a file .
12330	Run a command .
12331	Get a tree from the git repository
12332	Generate a tarball from a history history
12333	Execute a command .
12334	sudo command to sudo
12335	Install apt package .
12336	Install a pip .
12337	Install a pip install .
12338	Stitch macros into a given path .
12339	Compress multiple images .
12340	Compress a PNG image .
12341	Set self . path self . dirname and self . basename .
12342	List of paths to images .
12343	Return the image corresponding to a given row and column .
12344	Return a list of images for a given row and column .
12345	St stitch all wells into a folder .
12346	Compress the image .
12347	Return the metadata for a given column .
12348	Estimate the coordinates of each wells in the grid .
12349	Create a droplet .
12350	Get a DropletActions object .
12351	Restore an image .
12352	Rebuild an image .
12353	Rename a container .
12354	Change a kernel .
12355	Delete this container .
12356	Waits until all actions are in - progress .
12357	Connect to the device .
12358	Send a request to the API .
12359	Formats the parameters into a dictionary
12360	Format the request URL .
12361	Send a request to the API .
12362	Retrieve a list of resources .
12363	Get a single document by id .
12364	Transfer the bucket to a region .
12365	Return an ImageActions object .
12366	Update a key .
12367	Create a service .
12368	Returns a DomainRecords object for the given domain name .
12369	Rename a record .
12370	Get a domain by id .
12371	Logs a given username and password
12372	Chop list_into n chunks . Returns a list .
12373	Get the first droplets
12374	take a snapshot
12375	Return the list of allowed operations .
12376	Asserts allowed operations .
12377	Make a response .
12378	Handles GET requests .
12379	Handles POST requests .
12380	HTTP PUT operation .
12381	Delete the object .
12382	Handles the link .
12383	Create the project .
12384	A decorator that converts a value to an ilike type .
12385	Parses text into a Query object .
12386	Split text into segments .
12387	we expect foo bar
12388	Set the value of a target .
12389	Parse a range specification .
12390	Paginate a list of items .
12391	Decorator for indexing functions .
12392	Read the content from the file .
12393	Create a new use configuration .
12394	Decorator for delegating methods .
12395	Register a method .
12396	Return a method for the given arguments .
12397	Generate method names .
12398	Generate a generator for methods .
12399	Parse a requirement from a string .
12400	Add a requirement .
12401	Return True if this requirement satisfies the given requirements .
12402	Add a requirement
12403	Parse a list of requirements from a change line
12404	Bump requirements .
12405	Reverse the target content .
12406	Serialize data .
12407	Concatenate a collection .
12408	Merge a set of bases .
12409	Get package info .
12410	Return a list of package versions .
12411	Close the stream .
12412	Write chunk to the stream .
12413	Serialize data .
12414	Flush the stream .
12415	Send data to the client .
12416	End the connection .
12417	Temporarily move a directory .
12418	Context manager to capture stdout .
12419	Context manager to capture stderr .
12420	Return a list of urls .
12421	Dump an object to a file - like object .
12422	Serialize obj to bytes .
12423	Load an array from a file - like object .
12424	Load a dictionary from a string .
12425	Reverse the robot .
12426	Expand a list of targets into a list of targets .
12427	Get the NNG configuration .
12428	Ensure the directories exist .
12429	Creates a virtualenv .
12430	Create nginx configuration .
12431	Create manage scripts .
12432	Create the project .
12433	Convert string to lowercase .
12434	Redirect the request to the server .
12435	Parse a resource path .
12436	Recursively traverse a resource .
12437	Generate a stream from a response .
12438	Deserialize resource .
12439	Serialize data and return a serializer .
12440	Dispatch the request .
12441	Ensure user is authenticated .
12442	Ensure the user has accessibility .
12443	Ensure the request is allowed .
12444	Route the given request and response .
12445	Handles OPTIONS requests .
12446	Decorator to create a resource .
12447	Render dictionary as a string .
12448	Parse a cookie string .
12449	Add a method to the list of allowed methods .
12450	Build INDRA INDRA Statement .
12451	Derefs a JSON object
12452	Check that the requirements are in the system
12453	Convert a config dictionary into a tuple .
12454	Create a virtual environment .
12455	Decorator for catching errors .
12456	Install the given requirements .
12457	Iterate over the given data .
12458	Return an iterator over the keys of a dictionary .
12459	r Main function .
12460	Parse command line arguments .
12461	r Run pip .
12462	Prepare command line arguments .
12463	Print an error message .
12464	Print a message to stdout .
12465	Read a configuration file .
12466	r Run a command .
12467	Run a hook .
12468	Save the traceback to a file .
12469	Convert value to str
12470	Copy src to dst
12471	Return the absolute path of a folder .
12472	Get the file extension .
12473	Add an extension to a file .
12474	Join a list of files into a list .
12475	Removes all files from a list
12476	Return the length of a file .
12477	Merge two dictionaries .
12478	Return the path to the sys . path .
12479	Get the rcfile for an application .
12480	Return the rcfile settings for the given application .
12481	Get the value of an rcfile variable .
12482	Find a variable in RCF files .
12483	Filter list using fnmatch
12484	Get a subdict from a dict .
12485	Get the leaves of a dict .
12486	Return a list of paths that match the path_regex
12487	Create a folder .
12488	Import a config file .
12489	Remove all nodes matching pattern .
12490	Count the number of nodes matching pattern .
12491	Convert X to float32 .
12492	Convert an iterable into an indexable .
12493	Check if an array is valid .
12494	Check if X and y are valid .
12495	Convert y to a 1D numpy array .
12496	Warn if X is a float
12497	Convert an array to an ndarray .
12498	Convert an ATF file into functional functions .
12499	Convert FWHM to sigma
12500	Convert sigma to fwhm
12501	Smooth the input array .
12502	Smooth images by fwhm
12503	Smooth an array .
12504	Smooth an image .
12505	Add certificate to the session .
12506	Create a new session .
12507	Convert voxspace to MMSpace
12508	Get a 3D coordinate map from an image .
12509	Extract image information from an image .
12510	Get image data .
12511	Load an image from a nipy file .
12512	Convert niftil list to niftil array
12513	Crop an image to an image .
12514	Crop an image .
12515	Create a new image from a reference image .
12516	Get an HDF5 file .
12517	Extract datasets from an HDF5 file .
12518	Get the node names from an HDF5 file .
12519	Mask the image .
12520	Load images and labels .
12521	Save the mask to a file .
12522	Print msg to stderr .
12523	Run command and return its output .
12524	Calls a command .
12525	Run a condor .
12526	Submit a condor to the Condor .
12527	Clean up the distribution
12528	Upload an artifact to a repository .
12529	Load the command table .
12530	Open a volume file .
12531	Rename file group to serial number .
12532	Store all dicom files in a folder .
12533	Load a set of items from a set of files .
12534	Update the contents of this dataset .
12535	Copy all files to another folder .
12536	Return a function that yields a DICOM header reader .
12537	Scrape all DICOM files .
12538	Returns a set of unique field values for a given field .
12539	Find all dicoms in a directory .
12540	Return True if filepath is a DICOM file .
12541	Group dicom files into groups .
12542	Get a list of attributes .
12543	Merge multiple images into one .
12544	Decorator for nifti conversion
12545	Divide two images .
12546	Apply a mask to an image .
12547	Get the absolute value of an image
12548	Convert an ICC image to zscore
12549	Compute spatial map .
12550	Write meta data to a file .
12551	Dump data to a file .
12552	Write an MHD file to a mh file .
12553	Copies a mhd file to another .
12554	Convert a file to pandas .
12555	Convert a SavReader to a pandas dataframe .
12556	Save a variable list to a file .
12557	Construct a SFTP client .
12558	Determine the rois of the image .
12559	Find the largest connected component of a volume .
12560	Return a mask of clusters that are smaller than min_cluster_size
12561	Create a mask from a list of filenames .
12562	Get the unique elements of an array .
12563	Determine the center of mass of mass .
12564	Partition the data into a single array .
12565	Extract a 3D volume from a 4D image .
12566	Get a dataset by name .
12567	Create an empty dataset .
12568	Create a dataset .
12569	Save data to a dataset .
12570	Fill missing values in a DataFrame .
12571	Get an object from the file .
12572	Put a value into the HDFStore .
12573	Put a DataFrame into a ndarray .
12574	Set the smooth filter .
12575	Apply a mask to the image .
12576	Set the image mask .
12577	Mask data .
12578	Apply smoothing to the data .
12579	Mask the image with smoothed data .
12580	Save the image to a file .
12581	Configure logging .
12582	Create a 3D volume from a 4D file .
12583	Safely cache a function call .
12584	Convert a spatial image to an HDF5 group .
12585	Write spatial image to HDF5 file .
12586	Convert hdf5attrs to nifti1 header .
12587	Convert an HDF5 dataset into a nifti image .
12588	Inserts all the volumes in an HDF5 file into an HDF5 dataset .
12589	Iterate over the leaves of an iterable .
12590	Get a list of all the relative dictionary names .
12591	Get the JSON representation of a relational dictionary .
12592	Query a ReliTable using the given dictionary .
12593	Execute a Reliict
12594	Select command line arguments .
12595	Get an AAD token .
12596	Opens an xl file .
12597	Check if xl_path is valid .
12598	Read an XL file .
12599	Get a list of sheet names from an Excel file .
12600	Concatenate multiple sheets .
12601	Raise an AttributeError if col_names is not present .
12602	Return a list of the values of a column .
12603	Return a list of rows that have duplicated rows .
12604	Remove duplicates from a sequence .
12605	Convert a dictionary to a string
12606	Search for unique items .
12607	Return the unique identifier for a sample .
12608	Concatenate a sample .
12609	Query data .
12610	Concatenate a list of queries .
12611	Search for an element by its identifier .
12612	Search for unique items in a table .
12613	Determine if a sample is unique .
12614	Update an existing record .
12615	Return the number of samples in a given sample .
12616	Return True if object is an image .
12617	Get the data from an image .
12618	Get the shape of an image .
12619	Check if two images are compatible .
12620	Return True if two images have same affine .
12621	Return a string representation of an image .
12622	Check if two arrays have the same shape .
12623	Return a filtered list of files matching a regular expression .
12624	Recursively iterate over folder_path
12625	Return a list of all files in a directory .
12626	Recursively search folder_path
12627	Recursively iterate over folder_path
12628	Get all files in a folder
12629	Recursive glob .
12630	Compose an error message .
12631	Group a list of dicom files into a dictionary .
12632	Copy a list of dicom groups into a folder .
12633	Calculates the distance between two dicom files .
12634	Determine if the transform is correct .
12635	Calculate Levenshtein analysis for each file .
12636	Calculate the upper bound of a distance matrix .
12637	Return a list of groups in the same folder
12638	Merge DICOM groups .
12639	Move all dicom groups to a folder .
12640	Get unique values for a given field .
12641	Retrieves a service fabric configuration value .
12642	Get a servicefabric configuration
12643	Set a service fabric configuration value .
12644	Retrieves the cert and key paths for a security type .
12645	Set the ad_token in the config file .
12646	Set AAD metadata .
12647	Set security credentials .
12648	Filter objlist by fieldname
12649	Return True if the given string is a valid regular expression .
12650	Determine if a string is a regular expression .
12651	Find the index of a matching pattern .
12652	Generate config file .
12653	Call dcm2nn niinnnn nii niinii niinii niinii niinii nii nii
12654	Convert dcm to nii .
12655	Remove dcm2n files from a list of filepaths .
12656	Convert a namedtuple into a dictionary .
12657	Merge a list of lists .
12658	Append a list of dictionaries to a list of dictionaries .
12659	Import a python file .
12660	Copy a config file to a directory .
12661	Convert an input file into a pandas dataframe .
12662	Load a mask from an image .
12663	Load image data from an image .
12664	Join a mask into a mask .
12665	Apply a mask to an image
12666	Apply a mask to an image .
12667	Convert a vector to a volume .
12668	Convert a 2D matrix to 4d volume .
12669	Convert a niftil list into a niftil array
12670	Create a ServiceFabricClient .
12671	Aggregate a class .
12672	Convenience method to group elements .
12673	Aggregate the elements of an array .
12674	Subset a DataFrame .
12675	Modify an object .
12676	Escape a character .
12677	Escape a string .
12678	Unescape escaped characters .
12679	Return whether the user can send a notification .
12680	Returns a dictionary of formatted messages .
12681	Copy attributes from source to destination .
12682	Return a DataFrame row with the given index .
12683	Displays the notice settings .
12684	Perform a JSON query .
12685	Returns a list of all the pods .
12686	Find the first occurrence of the root .
12687	Returns the language language language .
12688	Send a notification .
12689	Send a message .
12690	Queue a list of users .
12691	Write a potential potential potential .
12692	Generate a TSFF potential .
12693	Aggregate a class .
12694	Check if two sets are disjoint
12695	Check if all elements in set2 are contained in set2 .
12696	Serialize the OAI - XML to XML .
12697	Parse a MARC XML string .
12698	Parse control fields .
12699	Parse MARC data fields .
12700	Returns the i - th name for a given number .
12701	Return a list of all subfields in the datafield
12702	Get the parameters of the target .
12703	Set parameters of an object .
12704	Make a quaternion .
12705	Calculate the center of mass of a list of bodies .
12706	Set the state .
12707	Set the rotation angle .
12708	Convert body to world coordinates
12709	Convert world to body coordinates
12710	Calculate the relative offset of the scene .
12711	Add a force .
12712	Add a torque .
12713	Joins a joint .
12714	Connect to another joint .
12715	A list of positions of all positions .
12716	Return the position rates for the surface .
12717	A list of angles .
12718	A list of angle rates .
12719	A list of the axes of the ODE
12720	Set Loops .
12721	Set HiStop parameters .
12722	Set the velocities .
12723	Set maximum force forces .
12724	Set the erps .
12725	Set cfms .
12726	Stop CFM .
12727	Stop erps .
12728	Set the axes
12729	Set the axes
12730	A list of tuples of the axes .
12731	Create a body .
12732	Join a joint .
12733	Moves the next position to the world .
12734	Set the body state .
12735	Perform a single step .
12736	Determine if two bodies are connected .
12737	Parse an AMC file .
12738	Create a skeleton of the skeleton .
12739	Create the joints of the skeleton .
12740	Parse a datafield from a datafield .
12741	Return a list of person names and their names .
12742	Returns a list of ISBNs .
12743	Returns a list of all the urls
12744	Returns a list of internal URLs
12745	r Calculates the PID .
12746	Convert an iterable into a flat array .
12747	Load an ASF file .
12748	Load a skeleton from a skeleton file .
12749	Load an ASF file .
12750	Set parameters for each joint .
12751	The joint torques .
12752	Return a list of indices for a joint .
12753	Return a list of indices for a given body .
12754	The joint distance between each joint .
12755	Enables motors .
12756	Set target angles .
12757	Add a set of torques to the joint .
12758	Return a sorted list of channel names .
12759	Load a csv file
12760	Load data from a c3d file .
12761	Process the image data .
12762	Create bodies .
12763	Load attachments from a source file .
12764	Create a ball joint .
12765	Reposition the scene .
12766	The distances between each joint .
12767	Calculates the forces in the frame .
12768	Load a skeleton from a file .
12769	Load markers from a file .
12770	Run one step .
12771	Settle to markers .
12772	Iterate over all markers .
12773	Perform a step on the world .
12774	Generate the joint angles of the skeleton .
12775	Iterate over the mesh .
12776	Context manager for forward dynamics .
12777	Reverse a list of integers .
12778	Render the scene .
12779	Return a new stream .
12780	Return a list of users .
12781	Set room name .
12782	Set the topic .
12783	Send a message to the room .
12784	Return a list of directories for the group .
12785	Return the path to the XDG_CONFIG_HOME .
12786	Sets the configuration filename .
12787	Check if a file exists .
12788	Load the configuration from the application .
12789	Get the styles for the current page .
12790	Create a connection object from settings .
12791	Perform a DELETE request .
12792	Perform a POST request .
12793	Perform a GET request .
12794	Returns the user - agent headers .
12795	Get the password URL .
12796	Parse a JSON response .
12797	Build a signed request .
12798	Perform an HTTP request .
12799	Returns the URL for the given URL .
12800	Checks if the type is text .
12801	Returns a list of rooms .
12802	Get a room by name
12803	Get a room by id .
12804	Get a user by id or id .
12805	Search for messages .
12806	Attaches an observer .
12807	Handle incoming messages .
12808	Fetch messages from the room .
12809	Called when a message is received .
12810	Called when the connection is established .
12811	Process a line .
12812	Called when raw data is received .
12813	Return a list of all styles .
12814	Starts the stream .
12815	Called when the request is finished .
12816	Send a block to the consumer .
12817	Return the length of the chunk .
12818	Build the headers for the request .
12819	Return the size of a file .
12820	Generate a filename .
12821	Convert a string to a path .
12822	Return a path root .
12823	Generate a list of file paths .
12824	Execute the code .
12825	Parse extends from text .
12826	Flush the buffer .
12827	Add new data to self . data .
12828	Log an error .
12829	Parse the given texts .
12830	Parse the data .
12831	Validate input text .
12832	Validate an XML name .
12833	Called when the game is started .
12834	Update the game .
12835	Called when the game is finished .
12836	Returns a dictionary of variables for rendering .
12837	Initialize the connection .
12838	Connect to the database .
12839	Initialize pooling .
12840	Connect to the database .
12841	Close the pool .
12842	Receive ids from the server .
12843	Synchronize a message .
12844	Undo a message .
12845	Relay a message .
12846	Generate a random item .
12847	Require an active token
12848	Add safety checks .
12849	Watch a method .
12850	Remove the object from the world .
12851	Temporarily lock the lock .
12852	Generator for scanning an XML element .
12853	Convert an event stream into an XML tree .
12854	Parse an XML file .
12855	Generate a subtree .
12856	Merge events into text .
12857	Iterates over events and yields them .
12858	Convert a date to business date .
12859	Convert datetime to date
12860	Add a period to the business date
12861	Return a new date with the given number of months .
12862	Add a number of days .
12863	Return a quoted string .
12864	Returns the number of days in a given year .
12865	Initialize the application .
12866	Start the application .
12867	Close the database .
12868	Register a model .
12869	Get a context manager .
12870	Create a new model .
12871	A chain decorator .
12872	Read one or more files .
12873	Parse one or more or more files .
12874	Return the next occurrence of a predicate .
12875	Creates a rule that is not followed by a parser .
12876	Return a list of results .
12877	Returns a generator that yields the first occurrence of the given term .
12878	Leaves the first occurrence of the given term .
12879	Separator .
12880	Fill the buffer with the given size .
12881	Return the next token .
12882	Main function .
12883	Run supervisor .
12884	Return the field s type .
12885	Convert value to python value
12886	Retrieves the remote filesystem endpoint .
12887	Create a new session .
12888	Calls the given path .
12889	Handle a set item .
12890	Handle text item .
12891	Handle an integer value .
12892	Handle long value .
12893	Returns the current power .
12894	Set the power .
12895	Returns a list of supported modes .
12896	Retrieves the volume steps .
12897	Gets the mute status .
12898	Sets the mute value .
12899	Get the current play status .
12900	Returns a list of equalises .
12901	Sets the amount of time to sleep .
12902	Set value to value_len
12903	Parse genotype field from VCF format .
12904	Generate an index from value .
12905	Return a shallow copy of the object .
12906	Returns True if the object has any unsaved changes .
12907	Assert that value is of expected type .
12908	Load an instance from a file - like object .
12909	Create an instance from a json file .
12910	Return the intersection of two dictionaries .
12911	Return the union of the composite .
12912	Add an item to the list .
12913	Add an item to the list .
12914	Write the object to a JSON file .
12915	Return the filelist as a list .
12916	Remove all files matching regex pattern .
12917	Dereferences this node .
12918	Delete one or more objects .
12919	Save the model to disk .
12920	Reload all objects
12921	Fetch a list of objects .
12922	Render the template as a string .
12923	Render start tag .
12924	Return a pretty representation of an object .
12925	Match a genome file to a CLINAR variable .
12926	Return this object as a dict .
12927	Parse alleles .
12928	Parse the info field .
12929	Dict representation of this variant .
12930	Parse a VCF line
12931	Convert value to storage .
12932	Navigate to VCF directory .
12933	Return a dictionary that can be used as a dict .
12934	Parse frequencies .
12935	Parse alleles .
12936	Decorator to add a new blok .
12937	Mark a function as deprecated .
12938	Set default redis connection parameters .
12939	Clear all redis pools .
12940	Return a RedisPool object .
12941	Print this object as a pprint .
12942	Returns True if this object has any unsaved changes .
12943	Compute the difference between two objects .
12944	Save to redis .
12945	Determines if two objects have same values .
12946	Returns a copy of this object .
12947	Save this object to an external database .
12948	Reload the object .
12949	Returns a copy of the model .
12950	Create an AltConnectedRedis model .
12951	Get a new redis connection
12952	Return a new connection .
12953	Add a key to the key .
12954	Remove an ID from the database .
12955	Add an ID to the index .
12956	Remove an ID from the index .
12957	Returns the redis key for the given index
12958	Remove a string from the index .
12959	Get the next ID from the database .
12960	Add a filter to the filterObj .
12961	Returns the number of items in the database .
12962	Check if a key exists .
12963	Returns a list of primary keys for this table .
12964	Retrieves all the primary keys .
12965	Get all the fields that match the given fields .
12966	Return all of the primary keys for this table .
12967	Get a random object from the database .
12968	Delete the model .
12969	Get an object by primary key .
12970	Cascade all of the related objects .
12971	Retrieve multiple objects from the database .
12972	Get a specific field from the database .
12973	Retrieve multiple fields from the database .
12974	Iterate over all of the indexes in the database .
12975	Saves the object to the database .
12976	Convert a list of objects into hashes
12977	Delete an object from the database .
12978	Delete object by primary key .
12979	Delete multiple objects .
12980	Delete multiple objects by primary key .
12981	Convert a string to a template .
12982	Read text from a file - like object .
12983	Create a template from a file .
12984	Decorator for keyword arguments .
12985	Return the compression mode .
12986	Convert value to bytes
12987	Return a copy of the decorated function .
12988	Return a remote Jupyter proxy URL .
12989	Sets up the Jupyter notebook .
12990	Executor for globus overview
12991	Create a hierarchical hierarchy .
12992	Generates a list of lines from the given text .
12993	Splits a text into a list of references .
12994	Calculate the luminosity table .
12995	round tff_luminosity
12996	Main function .
12997	Create a figure for a SkyImage
12998	Round the templosity of the teff cluster .
12999	Plot H - R Diagram plot .
13000	Calculate the range of diagrams .
13001	Create an hr diagram from data .
13002	Filter the cluster data .
13003	Modify data .
13004	Modify the input .
13005	Rebuild a set of users
13006	Calls os . utime
13007	Return a Windows Path2 .
13008	Microsoft Windows Path2 .
13009	Format a JSON object .
13010	Print a line to stdout .
13011	Return the IP address of the network .
13012	Pretty print a pandas dataframe .
13013	Strip labeled labels from a file .
13014	Remove a namespace from the document .
13015	Return True if the given URI matches the given URI .
13016	Decorator to create a hook .
13017	Add a hook .
13018	Configure the database .
13019	Parses a SQL query and returns the result .
13020	Execute a query .
13021	Process the columns
13022	Execute a SQL query .
13023	Execute a SELECT query .
13024	Get a row from the table .
13025	Create a payload .
13026	Combine two files .
13027	Try to detect the system OS .
13028	Exploit a service .
13029	Exploit a single IP .
13030	Create a WSGI server .
13031	Poll once .
13032	Serve the server .
13033	Write an index translation file .
13034	Write triples to a file .
13035	Read a translation from a text file .
13036	Read an openke file and return a dictionary mapping the entity name to a dictionary .
13037	Executor for globus overview
13038	Main entry point .
13039	List all the credentials .
13040	This method is called when a node is received .
13041	Workhorse function .
13042	Create a query from a section
13043	Create a pipe worker .
13044	Main entry point .
13045	Return the i18n for an iso code .
13046	Given a list of reffs return a dictionary mapping the passage names to their names .
13047	Convert a string to a citation type .
13048	Filter annotations by type_uri .
13049	Check if a service is available
13050	Main entry point .
13051	Parse nmap results from nmap
13052	Run nmap .
13053	Run nmap .
13054	Run nmap scan
13055	View port count .
13056	Rename an endpoint .
13057	Return the locale for the request .
13058	Transform an object to a string .
13059	Get the inventory .
13060	Get the reffs for a given object .
13061	Retrieves a passage .
13062	Get the siblings of a passage
13063	Return the semantic semantic for a collection .
13064	Generates the coin links for the given text .
13065	Expose ancestors of a member .
13066	Make all the members of a collection .
13067	Make the parents of a collection
13068	Renders all collections .
13069	Renders a collection .
13070	Renders references for a given object
13071	Redirect to r_passage
13072	Reverse passage
13073	Retrieve assets from a file .
13074	Register assets route .
13075	Create the blueprint .
13076	Create a view factory .
13077	Return a sorted list of the main collections .
13078	Make the cache key
13079	Render a template
13080	Register this extension .
13081	Register filters .
13082	Register all registered plugins .
13083	Chunk a text .
13084	add a tag
13085	Set a configuration value .
13086	Get a value from a section .
13087	Return the configuration directory .
13088	Write the configuration to disk .
13089	Ensure remote branch is tracked .
13090	Run git checkout .
13091	Return the network interface name .
13092	Load the list of services .
13093	Write the targets to the target file .
13094	Start all processes .
13095	Called when a ldapdomain event is found
13096	Watch the directory .
13097	Terminate all processes .
13098	Wait for the server to finish .
13099	Retrieve an annotation from a set of targets .
13100	Render a breadcrumb .
13101	Main function .
13102	Get the template uuid
13103	Create a scan .
13104	Start a scan .
13105	Compare two uri .
13106	Add a tag .
13107	Remove a tag from the document .
13108	Convert to a dict .
13109	Retrieve the annotations for this resource .
13110	Lookup the name of a key .
13111	Return a sorted list of items .
13112	Return a list of all configured DNS servers .
13113	Transfer a zone to a DNS zone .
13114	Resolve a list of domains .
13115	Parse a list of IPs .
13116	Create a connection
13117	Perform a search .
13118	Search for arguments .
13119	Execute an elasticsearch .
13120	Count the number of arguments .
13121	Return an object from stdin .
13122	Convert a range id to a Range object
13123	Argument parser .
13124	Convert an object to its ID
13125	Convert a user ID to a User object
13126	Get all the domains .
13127	Read lines from stdin .
13128	Convert tree to commands
13129	Initialize the indices .
13130	Parse a single computer entry .
13131	Parse a single host computer .
13132	Parse a user entry .
13133	Parse a list of domains and groups
13134	Import a domain dump file .
13135	Execute a query .
13136	Make a request to the API .
13137	Convert string to unicode .
13138	Perform an HTTP GET request .
13139	Returns the JSON representation of the object .
13140	Read the content of the file .
13141	Convert a list of triples into a triples .
13142	Recursively recover triples from a mapping .
13143	Transform a triple into a numpy array .
13144	Pack a list of triples into a numpy array .
13145	Remove duplicate relation from triples .
13146	Remove direct link triples from train and test .
13147	Shrink indexes in place .
13148	Freeze index builder .
13149	Log an operation .
13150	Log the state of an entity .
13151	Log an update event .
13152	Log an error .
13153	Decorator to make a dict cursor .
13154	Decorator to return a cursor .
13155	Decorator to return a cursor .
13156	Decorator for executing a transaction .
13157	Count the number of records in a table .
13158	Insert values into a table .
13159	Update a table .
13160	Delete rows from a table .
13161	Execute a query against a table .
13162	Execute a query and return the result .
13163	Add padding to out .
13164	Format a value into a unicode string .
13165	Recursively traverse an element .
13166	Parse a query string .
13167	Insert a new element before .
13168	Returns an iterator over the children of this element .
13169	Return True if the given pred matches the given pred .
13170	Return the string representation of this element .
13171	Iterate over the children of this element .
13172	Get the last child .
13173	Iterate over parents of this element .
13174	Return the next element of this element .
13175	Return the previous element .
13176	Get the observations from the table .
13177	Return a cache key .
13178	Decorator to cache a function .
13179	Decorator to get a value from a function .
13180	Return a list of column numbers .
13181	Return a tuple of column names in a row .
13182	Writes an observation to the CSV file .
13183	Convert an observation dictionary to a row .
13184	Convert a row to a dictionary .
13185	Return the name of the default tag .
13186	Download all observations from WebObserver .
13187	Generate an image path .
13188	Process a ltd product page .
13189	Upload a report to the MongoDB .
13190	Convert a json object to an XML Element .
13191	Convert a JSON structure to an XML Element .
13192	Convert a GeoJSON object to a GML tag .
13193	Convert geojson to GML element .
13194	Remove comments from a source file .
13195	r Replace macros .
13196	Ensure that the input is a valid format .
13197	Convert input_doc to OpenTok format .
13198	Read a TeX file from a path .
13199	Convert the TeX document to latex text .
13200	Format the title .
13201	Formats the short title as html
13202	Convert the abstract to latex text .
13203	Returns a list of all the authors in the paper .
13204	Parse the document class .
13205	Parse the title .
13206	Parse a setDocRef .
13207	r Parse the authors command .
13208	Parses the abstract command .
13209	Prepare a latex snippet for pandoc
13210	r Load the BibTeX database .
13211	r Parse the revision command .
13212	Build a JSONLD representation of the article .
13213	Rename a database .
13214	Check if the connection is available .
13215	dump the database to a file
13216	Restore a database .
13217	Return the DSN for a connection .
13218	Return the URL for a connection .
13219	Run a psql command .
13220	Return a list of all settings .
13221	Wrap breakfast .
13222	Time for lunch .
13223	Serve the dinner .
13224	Main entry point .
13225	Process a list of products .
13226	Process a LTD product .
13227	A decorator that turns a function into a decorator .
13228	Get an installation token .
13229	Create a JWT .
13230	r Retrieve macros from a template .
13231	r Extract macros from a template .
13232	r Creates macros from a latex source file .
13233	Load a module .
13234	Makes a timezone aware datetime .
13235	Make a timezone aware datetime .
13236	Convert a datetime to a timezone .
13237	Return the next interval .
13238	Return a list of timed periods .
13239	Iterate over the periods in the given range .
13240	Returns True if the given date is within the given time range .
13241	Generate periods for the given range .
13242	Return the period .
13243	List of weekdays .
13244	Temporarily create a temporary database .
13245	Download text from a URL .
13246	Download BibTeX files .
13247	Retrieves the LSST - TLSST - formatted LSST - TeB file .
13248	Build a BibTeX object from the given files .
13249	Get the URL from an entry .
13250	Return the authors from an entry .
13251	Process a sphinx product .
13252	Reduce the metadata from a github repo into the metadata .
13253	Download metadata from GitHub .
13254	Timezone - aware datetime .
13255	Set the time .
13256	Return this Entry as a dictionary .
13257	Save an entry to a plist file .
13258	Return the path to the journal file .
13259	Concatenate multiple collections into a single file .
13260	Main entry point .
13261	Returns a tree of all the tasks in the task list .
13262	Decorator to define a function .
13263	Return the parameters of this task .
13264	Get a configuration value .
13265	Return a new plugin instance .
13266	Convert an XML Element to a JSON object .
13267	Convert GML element to geojson .
13268	Convert geojson element to geojson
13269	Convert an element into a Paragraph .
13270	Iterate over all subclasses of this class .
13271	List unique elements preserving order .
13272	Create an ndarray with masked values .
13273	Default encoder .
13274	Default encoder .
13275	Update the SIB path with the SIB path
13276	Update the SIB path with the SIB path
13277	Update the lc_path with the lc_path
13278	Update rin_path with rcin_path
13279	Initialize a child descriptor .
13280	Handle child end events .
13281	Parse the source of the command .
13282	Parse a command .
13283	r Parse a whitespace - delimited command argument .
13284	Creates a list of events from a Document .
13285	Clone a dataset .
13286	Get a dataframe from a variable
13287	Load a GraphQL query .
13288	Get the commit timestamp for a given file .
13289	Get the latest commit date for the given extensions .
13290	Iterate over filepaths by extension .
13291	Return a list of variables by attribute names .
13292	Return a JSON representation of all variables in the network .
13293	Decorator to ensure pydoc is installed .
13294	Convert text using pandoc .
13295	Convert latex content to a latex file .
13296	Decode a JSON - LD string into a Python object .
13297	Default encoder .
13298	Return a list of all the repositories in this directory .
13299	Install a package .
13300	Upgrade a package .
13301	Calculate the quantile of a DataFrame .
13302	Mean squared error .
13303	Mean squared error .
13304	Mean squared error .
13305	Compute the difference between two arrays .
13306	Calculate the correlation coefficient .
13307	Compute the Euclidean distance between a and b .
13308	Compute the Euclidean distance between a and b .
13309	Compute the difference between two arrays .
13310	Compute full stats for a and b .
13311	Absolute path to site - packages .
13312	Initialize the environment .
13313	Activate sys . path .
13314	Remove the directory
13315	Return the command name .
13316	Create a virtual environment .
13317	Remove a file from the filesystem .
13318	Launch a module .
13319	Deactivate the environment .
13320	Get all available modules .
13321	Add a module .
13322	Remove a module from the list of active modules .
13323	Format a list of objects .
13324	Display information about available modules .
13325	Activate a virtualenv .
13326	Create a new virtual environment .
13327	Remove a virtual environment .
13328	Add a virtual environment .
13329	Remove a virtual environment .
13330	Create a new module .
13331	Add a module .
13332	Localize a module .
13333	Resolve path resolution .
13334	Resolve the home directory .
13335	Try to cache a resolver .
13336	Resolve a module .
13337	Resolve an active env module .
13338	Redirect to resolver .
13339	Transpose an array .
13340	Roll an axis .
13341	Expand dimensions along an axis .
13342	Concatenate arrays along an axis .
13343	Calculate the shape of an array .
13344	Compute the mean of an array .
13345	Determine if a shape axis is valid .
13346	Run a command .
13347	Return the command line .
13348	Display a prompt .
13349	Launch a shell .
13350	Add a file .
13351	Add a list of files .
13352	Monitor file modification time .
13353	Add a status job .
13354	Wrapper around pager .
13355	Calculate profiler profile .
13356	Run a global hook .
13357	Makes the mean mean of a dataframe .
13358	Calculate the AOTAGE of a DataFrame .
13359	Make sure all environments exist
13360	Load virtual environments from YAML file .
13361	Save the current environment .
13362	Prompt user for input .
13363	Echo text using pager .
13364	Sets up the engines .
13365	Return a copy of obj .
13366	Apply a function to an object .
13367	Register a proxy type .
13368	Return True if path is a git repository
13369	Determine if path is a home environment .
13370	Determine if path is redirecting .
13371	Redirect a path to the env_paths .
13372	Expand environment variables .
13373	Convert a list of paths into a normalized path .
13374	Return the path to the binary .
13375	Ensure path exists .
13376	Recursively walk a directory until the given depth is reached .
13377	Walk up a directory starting at start_dir
13378	Preprocess a dictionary .
13379	Recursively join a sequence .
13380	Join two dictionaries .
13381	Convert a dictionary into a dictionary .
13382	Convert a dictionary into an environment variable .
13383	Expand environment variables .
13384	Return the path to store environment variables .
13385	Store the environment variables in the yaml file .
13386	Returns the URL to the upstream data source for the given URI based on configuration
13387	Return request object for calling the upstream
13388	Get the ttl of the response .
13389	Write manifest to manifest .
13390	Formats a pathname to a maximum length .
13391	Formats a UUID
13392	Paginate an update .
13393	Send a notification to a client .
13394	Get the value of a setting .
13395	Update settings .
13396	Return all the settings and attributes .
13397	Get a reference to a class .
13398	Check docstring for docstring .
13399	Return the absolute path of a resource .
13400	Add a logbook .
13401	Remove a logbook .
13402	Returns the logs of the selected logmenus .
13403	Checks if user is accepted by logtype
13404	Pretty - print an element .
13405	Prepares the image to disk .
13406	Submit a MCC entry .
13407	Send xml to logbook
13408	Setup the UI .
13409	Show the log select layout .
13410	Add one or more logbooks .
13411	Remove one or more logbooks .
13412	Change log type .
13413	Add the log selection .
13414	Remove a layout .
13415	Add a label .
13416	Resolve source code to link code .
13417	Sync database .
13418	Start the run server .
13419	Manage a schema .
13420	Validate a Mapper definition .
13421	Map IDs to one or more IDs .
13422	Get all entries for a given key .
13423	Parse a line of text .
13424	Get a single message .
13425	Create a new message .
13426	Update a message .
13427	Delete messages .
13428	Get a single site .
13429	Returns a list of all sites .
13430	Create a new site .
13431	Renders a link to the move up .
13432	Renders a link to a move down .
13433	Show matplotlib figure .
13434	Convert index to integer .
13435	Cut a line from a line .
13436	Parse the start and end positions .
13437	Cut a line from start to current position
13438	Extend a range of strings .
13439	Lock a file .
13440	Unlock a file .
13441	Initialize the local catalog
13442	Initialize pull from cloud
13443	Return the path between two hashes .
13444	Return the index of x .
13445	Create an admin .
13446	Return a list of messages from the response .
13447	Logs the user .
13448	Perform a GET request .
13449	Handles POST requests .
13450	Return the value of a field .
13451	The maximum image maximum .
13452	The minimum image minimum .
13453	Spawn a greenlet .
13454	Print usage information .
13455	Parse command line arguments .
13456	Open an S3 bucket
13457	Upload a file to S3 .
13458	Download a file from S3
13459	Create an ICalendar .
13460	Displays all comments .
13461	Displays a list of updates .
13462	List video videos .
13463	Add an event .
13464	Add new memory .
13465	Register a library .
13466	Set the moments .
13467	Set the courant_Snyder function .
13468	Normalize a slice .
13469	Add an error message .
13470	Copies src to dst
13471	Apply changesets to the given catalog .
13472	Make sure that the event is in the database .
13473	Context manager to run a function in a background thread .
13474	Main loop .
13475	Starts the loop .
13476	Kill this GeventLoop .
13477	Plots a non - uniform image .
13478	Convert a sentence to adjacent spaces .
13479	Replace hyphens with underscores .
13480	Replace target with replacement .
13481	Replace target with replacement .
13482	Create sphinx docs .
13483	Rsync docs .
13484	Import Sphinx documentation .
13485	Open the Sphinx documentation .
13486	Simplify css .
13487	Get or create an index file .
13488	Create tasks .
13489	Update tasks .
13490	Merge tasks from the server .
13491	Prompts the user for y
13492	Prompt the user for a prompt .
13493	Read configuration file .
13494	Write a configuration file .
13495	Create a new word .
13496	Branch version .
13497	Clone this tag .
13498	Return a new instance with the given label and number .
13499	Parse a string into a Tag object .
13500	Create a tile of the main window .
13501	Update the time of an update .
13502	Add extra context to django .
13503	Create a challenge .
13504	Update this challenge .
13505	Check if this challenge exists .
13506	Get a position by id .
13507	Returns a list of positions .
13508	Create a new position .
13509	Count sloccount .
13510	Run pyflakes .
13511	HTTP exception handler .
13512	Return True if value is a colour .
13513	Calculate Reynolds number .
13514	Calculate Froude number .
13515	Calculates residual resistance coefficient for a residual distribution .
13516	Calculate the dimension .
13517	Compute the resistance of the surface .
13518	Returns the maximum deck area .
13519	Return the power power of the vehicle .
13520	Configure the server .
13521	Send a submission to the exercise .
13522	Make a URL from a slug .
13523	Convert response to json
13524	Join a list of greenlets .
13525	Create an error .
13526	Convert this exception to a message .
13527	Clean patterns .
13528	Print options to stdout
13529	Parse raw data .
13530	Create a new child .
13531	Return a list of all ancestors .
13532	Return a list of all ancestors .
13533	Return the descendents of this node .
13534	Return True if this node can be removed .
13535	Prune the tree .
13536	Remove all descendents from the list .
13537	Check if a child rule is allowed .
13538	Get a location by ID .
13539	Returns a list of all locations .
13540	The chisq_redisq_redisq_red
13541	Create a new challenge .
13542	Update this task .
13543	Create a Task from a server .
13544	Format a string .
13545	Get a user by id .
13546	Returns a list of users .
13547	Set the virtualenv .
13548	Update dst with src .
13549	Installs pip
13550	Retrieve a resource from the API .
13551	Put a resource .
13552	POST a resource
13553	Delete a resource
13554	Create a new shift .
13555	Delete shifts .
13556	Return all comments .
13557	Returns a list of all the images in this object .
13558	Returns the total number of images in this set .
13559	Returns a list of top assets .
13560	A decorator that wraps a function .
13561	Launch a menu .
13562	Called when a new rank is moved .
13563	Repack all items .
13564	Return a list of field names for the given object .
13565	Register error handler .
13566	Plot the data .
13567	Linear interpolation .
13568	Decorator to retrieve the selected course .
13569	Decorator to retrieve the selected exercise .
13570	Decorator to check whether a function exits .
13571	Configure a MongoDB server .
13572	Download all the exercises .
13573	Skips a given course .
13574	Run a command on the exercise .
13575	Select a course
13576	Submits an exercise .
13577	Post a pastebin .
13578	Update the course metadata .
13579	Determines the type of x .
13580	Map a function over a record .
13581	Apply types to a line .
13582	Write a CSV file to a csv file .
13583	Renders a link to an object .
13584	Display an object .
13585	Add a link .
13586	Add an object attribute .
13587	Add a field to the list .
13588	Decorator for methods that require POST .
13589	Decorator for methods that require a POST request .
13590	The sigma_prime_prime function .
13591	Equation of p_p .
13592	Download tags from upstream .
13593	Check if the environment is valid .
13594	Print information about the latest version .
13595	Confirms a new tag .
13596	Return the value of a given key .
13597	Return a list of all files in the directory .
13598	Increment the current factor
13599	Add a node to the list .
13600	Increment a counter .
13601	Print a message to stdout .
13602	Print a warning message .
13603	Print an error message .
13604	Run a command .
13605	Corrects a point in JSON format
13606	Main entry point .
13607	Write an object to a file .
13608	Unpickle data from a file .
13609	Displays a contact .
13610	Load the git config .
13611	Add command line arguments .
13612	Run the worker .
13613	Combine multiple filenames .
13614	Apply an orientation to an image .
13615	Create a scaffold .
13616	Create a new site .
13617	Publish the site .
13618	Return a list of all branches in this repository .
13619	Get current branch
13620	Create a diff between two tags .
13621	Returns a function that returns the first n elements .
13622	Apply a function to each result .
13623	Convert value to unicode .
13624	Convert value to an integer .
13625	Convert a value to a boolean .
13626	Split a string into a list of strings .
13627	Convert value to a Timestamp .
13628	Parse a query into a dictionary .
13629	Put one or more metrics .
13630	Render a resource .
13631	Adapt the result to a resource .
13632	Handle rendering .
13633	Get the handler for the given request .
13634	Parse Accept header .
13635	Split the headers into a list .
13636	Extract content encoding from the request headers .
13637	Decorator to return a function .
13638	Decorator for setting settings .
13639	Bind settings to a module .
13640	Get the version of the TSPINFILE
13641	Send the transaction .
13642	Check if confirmations have been reached .
13643	List all components
13644	Add arguments to the class .
13645	Parse command line arguments .
13646	Convert a string to an underscore name .
13647	Retrieves all fuel prices .
13648	Get all fuel prices for a given station .
13649	Get the prices within a given radius .
13650	Returns a price trends for a given location .
13651	Get the reference data for a given date .
13652	Calls the pre - command
13653	Create a text filter .
13654	Create an integer query .
13655	Match a list of components .
13656	A decorator that returns a resource .
13657	Create a new router .
13658	Add a route .
13659	Decorator to add a route .
13660	Decorator to add a subroute .
13661	Create a temporary file .
13662	Write a temporary file to a temporary file .
13663	Get an item from a json file .
13664	Set an item to a file .
13665	Update an item .
13666	Execute the command .
13667	Execute a command .
13668	Create a temporary S3 bucket .
13669	Check if stdout is available .
13670	Return a list of indices sorted by index .
13671	Strip code from a string .
13672	Initialize build .
13673	Add a file path .
13674	Add a directory path .
13675	Add a path object to the bundle .
13676	Add a prepare prepare handler .
13677	Execute the prepare handlers .
13678	Handles filenumber .
13679	Register a JSON object .
13680	Return a dictionary of translated data .
13681	Return the JSON representation of the object .
13682	Get the JSON representation of the object .
13683	Perform a GET request .
13684	Make a POST request .
13685	Load values from environment variables .
13686	Context manager for embedding data .
13687	Assert that two files are equal .
13688	Generate a diff between two lines .
13689	Add a peer .
13690	remove a peer
13691	Get peer status .
13692	Broadcast a transaction .
13693	Register a service .
13694	Main entry point .
13695	Display debug information .
13696	Parse an integer .
13697	Read a file .
13698	Wait for the process to finish .
13699	Make a seekable object .
13700	Initialize the app .
13701	Called before the request is started .
13702	Called after a request is finished .
13703	Expand words in a given line .
13704	Iterate over the given lines .
13705	Iterate over text blocks .
13706	Iterate over space blocks .
13707	Takes a string and returns a list of words .
13708	Check if an IP address is valid .
13709	Check if the result is a threat .
13710	Check if a result is suspicious .
13711	Invalidate an IP address .
13712	Invalidate the cache .
13713	Run the consumer .
13714	Upload a batch .
13715	Return the next item from the queue .
13716	Get the next item from the queue .
13717	Make a batch request .
13718	Convert a CamelCase URL to an underscore .
13719	Create a tree from a list of endpoints .
13720	Main entry point .
13721	query wql
13722	Log a file .
13723	Write the content to a file .
13724	Send a POST request .
13725	Register credentials .
13726	Set connection parameters .
13727	Sets the DELETE function .
13728	Return the balance of a given address .
13729	Returns the balance of the given address .
13730	Convert config value to boolean
13731	Validates that the value is not None .
13732	Validate config value .
13733	Convert config value to python log level .
13734	Register a range type .
13735	Convert a response to an API error .
13736	Extract the values from a request .
13737	Get the query context .
13738	Real time loop .
13739	Keep the connection alive .
13740	Connect to the websocket .
13741	Decorator for caching a view function .
13742	Return a connection to DynamoDB .
13743	Get the schema
13744	Create the table .
13745	Get the table .
13746	Create a new item .
13747	Get an item from DynamoDB .
13748	Get a counter from DynamoDB .
13749	Create a relationship class .
13750	Decorator to create a relationship .
13751	Handle data .
13752	Add a foreign key constraint .
13753	Ensure path is a list .
13754	Read content from a file .
13755	Write contents to a file .
13756	Copy src to dest
13757	Get the extension of a file .
13758	Split a path into parts .
13759	Create an API URI .
13760	Formats an ISO 8601 - formatted datetime .
13761	Check if the response is valid .
13762	Checks if the cursor is next .
13763	Wrap a color code .
13764	Registers a message .
13765	Insert a value at the specified index .
13766	Parse a string into a list of values .
13767	Add a bundle to this asset .
13768	Collect all the files and prepare them .
13769	Returns the default minifier .
13770	Render an asset .
13771	Collect links from assets .
13772	Default json format .
13773	Initialize log files .
13774	Formats a record into a JSON object .
13775	Include the application .
13776	Get the absolute and relative path of a file .
13777	Adds an enum descriptor .
13778	Retrieves the file descriptor for a symbol .
13779	Finds a message type by full name .
13780	Finds an enum type descriptor by full name .
13781	Finds an extension by fully qualified name .
13782	Converts an enum descriptor to a descriptor .
13783	Creates a FieldDescriptor .
13784	Returns a connection to the database .
13785	Generate a random string .
13786	Raise an AssertionError if field is not a valid type .
13787	Flush the queue .
13788	Open a file .
13789	Configure marv configuration .
13790	Returns a decoder for a message set item .
13791	Return the application name .
13792	Get a function by name .
13793	Add a function .
13794	Iterate over all functions .
13795	Handle a reduce operation .
13796	Handles rereduce functions .
13797	Handle validation errors .
13798	Main entry point .
13799	Write a string to the w file
13800	Generate a unique guid
13801	Revoke a token .
13802	Perform authentication .
13803	Validate a request code .
13804	Generate a random token .
13805	Merges an ordered set into an iterable .
13806	Validate params .
13807	Get the current time .
13808	Main loop .
13809	Get the version of a file .
13810	Creates a descriptor protobuf .
13811	Retrieves the top level type .
13812	Finds a method by name .
13813	Convert a protobuf message to JSON .
13814	Converts a protobuf message into a JSON object .
13815	Convert Struct message to JSON object .
13816	Parses a JSON string .
13817	Convert a field value into a protobuf message .
13818	Converts a value into a message .
13819	Converts a Value message into a Message .
13820	Converts a list value into a message .
13821	Convert a struct message into a Message .
13822	Update the notebook configuration .
13823	End timing .
13824	Convert seconds to a JSON string .
13825	Parse a Duration from a JSON string .
13826	Convert a JSON string into a dictionary .
13827	Get a document from CouchDB .
13828	Read a markdown file .
13829	Remove an item from a collection .
13830	Return the URL of this object .
13831	Make an API call .
13832	Skips a field value .
13833	Parses an integer .
13834	Prints a protobuf message .
13835	Parse or merge a message .
13836	Merges a message field .
13837	Consumes an identifier .
13838	Consumes an integer .
13839	Consumes a float .
13840	Consumes a boolean .
13841	Consumes a single byte string .
13842	Convert ark timestamp to unix timestamp
13843	Close the connection .
13844	Process macros .
13845	Return a unique pathname .
13846	Get the numbered paths of a file .
13847	Custom version of splitext that doesn t perform splitext on directories
13848	Set modification time .
13849	Get the time of a file .
13850	wrap a function that returns a dir making sure it exists
13851	Is the given path?
13852	Age the game .
13853	Main loop .
13854	Create a main thread .
13855	Get text from a given node .
13856	Get account balance
13857	Send a message .
13858	Perform a curl request .
13859	Return the contents of a file .
13860	Return True if the class is a valid date type .
13861	Convert datetime to datetime .
13862	Convert datetime to UTC
13863	Convert a datetime to a timestamp .
13864	Convert a datetime to milliseconds .
13865	Convert datetime to UTC
13866	Convert milliseconds to UTC
13867	Truncate datetime .
13868	Calculate a weekday based on the given date .
13869	Retrieves the native EOL style .
13870	Normalize a path .
13871	Normalize a path .
13872	Normalize a path .
13873	Copies a file .
13874	Copies a file from source_filename to target_filename .
13875	Copies all files from source_dir to target_dir .
13876	Copies the files from the source directory to the target directory .
13877	Copies a directory from source_dir to target_dir .
13878	Deletes a file .
13879	Append contents to a file .
13880	Moves a file .
13881	Moves a directory .
13882	Retrieves the contents of a file .
13883	Retrieves a list of lines from a file .
13884	List files in a directory .
13885	Creates a file .
13886	Replaces old in filename .
13887	Creates a directory .
13888	Deletes a directory .
13889	Lists all network drives .
13890	Creates a symbolic link .
13891	Read a link .
13892	Asserts path is local or local .
13893	Handles the contents of the contents .
13894	Determines if a filename matches a mask .
13895	Find all files in a directory .
13896	Expand a path .
13897	Dump a directory hash to a string .
13898	Generates a random hash .
13899	Pushes a pop item onto the object .
13900	Convert a database string to a SQL query string .
13901	Get a database from a database string .
13902	Ensure a database exists .
13903	Coerce values to a set .
13904	Parse a hub key .
13905	Match part .
13906	Apply default values .
13907	Create a list of commands .
13908	Create subparsers .
13909	Shows the current version .
13910	Decorator to check path action .
13911	Retrieve a new user s API key .
13912	Adds properties to the class .
13913	Unpack any message .
