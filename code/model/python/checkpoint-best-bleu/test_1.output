0	Convert sina XML to a list of URLs .
1	Download a website .
2	Download the Sina website .
3	Return a string with the specified colors .
4	Print text to stderr .
5	Print a message to stdout .
6	Print a wtf message .
7	Detect the OS platform .
8	Download a video by url .
9	Extract info from ckplayer info
10	Get video url from video_id
11	Extract the real part of a m3uTV URL .
12	Convert a string into a canonical form .
13	Download a video from a given URL .
14	download a file
15	Download a video by id
16	Match all patterns in a string .
17	Parse a query parameter .
18	Get content from url .
19	POST data to url
20	Parse a host .
21	Get a room id by room url
22	Helper function to get the title from json content .
23	Function to download a course by course .
24	Download BWK by course part .
25	Check if a task has a task .
26	Get the event buffer .
27	Return a connection object .
28	Get AWS credentials .
29	Get the value of a field .
30	Copy the SQL to the database .
31	Bulk dump a table .
32	Uploads the file to Google Cloud Storage .
33	Return the maximum partition for a table .
34	Get a mysql connection
35	Print the current task state .
36	Restart worker threads .
37	Return a client object .
38	Translate values to target language .
39	Get an instance by name .
40	Creates an instance .
41	Patch an instance .
42	Delete an instance .
43	Get a database .
44	Creates a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Start the proxy .
49	Stop the proxy process .
50	Get the version of the proxy .
51	Create a new connection .
52	Retrieve a connection from the database .
53	Delete the connection from the database .
54	Returns a CloudSqlProxy runner .
55	Get the database hook
56	Clean up the database hook .
57	Reserve a free TCP port .
58	Normalize the job id
59	Extract the error code from a string .
60	Delete all DagRun objects .
61	Delete all task instances .
62	Set the state of the dag .
63	Print performance statistics .
64	Check the status of all tasks .
65	Invoke the lambda function .
66	Create a DataFlowOperator .
67	Creates a directory .
68	Convert string to float if possible .
69	Make a naive datetime aware datetime .
70	Make a naive datetime
71	Create a datetime object .
72	Get the connection to druid broker
73	Return a requests . Session object .
74	Run the given endpoint .
75	Check if the response is valid .
76	Run a request and check the response .
77	Create a new session .
78	Decorator to add a session .
79	Drops the database .
80	Return a pretty - printed exception message .
81	Wrapper around get_records
82	Execute a query and return a Pandas DataFrame .
83	Execute a query .
84	Insert rows into the table .
85	Return a connection to the API .
86	Checks if a collection exists .
87	Create a new collection .
88	Checks if a database exists .
89	Create a new database .
90	Delete a database .
91	Delete a collection .
92	Insert multiple documents into a collection .
93	Delete a document .
94	Get a document by id .
95	Retrieve documents from a collection .
96	Get a function by name .
97	Creates a new function .
98	Update a function .
99	Upload a function zip to a location .
100	Delete a function by name .
101	Return the status of the task .
102	Returns True if the task is met .
103	Return all failure reasons for the given session .
104	Parse S3 config file .
105	Retrieves the credentials for a given region .
106	Return a connection to the database .
107	Flush the buffer .
108	Return the location of a zip file .
109	Return a list of file paths .
110	Construct the task instance for this task .
111	Launch the process .
112	Send the termination message .
113	Exit the DAG processor .
114	Start the file process .
115	The main loop .
116	Main loop .
117	Refresh the DAG directory .
118	Log statistics about the file .
119	Clear missing import errors .
120	Log file processing statistics .
121	Set the file paths .
122	Waits until all processors have finished .
123	Checks to see if file paths are finished .
124	Stop all processes .
125	Create a new SSH client .
126	Create a new transfer job .
127	Get a transfer job
128	List transfer jobs .
129	Update a transfer job .
130	Delete a transfer job .
131	Cancel a transfer operation .
132	Pause a transfer operation .
133	Resumes a transfer operation .
134	Waits until the transfer job is completed .
135	Find all tasks for a task instance .
136	Return the number of slots in the pool .
137	Run a command .
138	Remove an option from a section .
139	Get a configuration section .
140	Allocates the given keys .
141	Begin a transaction .
142	Commit a project .
143	Lookup the given keys .
144	Rolls a transaction .
145	Run a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until the operation is done .
149	Exports the project to a bucket .
150	Import a file from a Storage bucket .
151	Publish a message to a target ARN .
152	Return the hostname of the host .
153	Returns the connection to the language service .
154	Analyze a document .
155	Annotate a document .
156	Classify a document .
157	Get the template field for a full name .
158	Parse a template field .
159	Disposes the connection pool .
160	Prepare classpath .
161	Check if task_id is ready .
162	Detect configuration var .
163	Convert an AlchemyAlchemy object to a dictionary .
164	Split an iterable into chunks .
165	Reduce an iterable into chunks .
166	Chain multiple tasks .
167	Pretty print table .
168	Render a log filename .
169	Return a dataproc connection
170	Wait for an operation to complete .
171	Convert a string or list of dictionaries to a string .
172	Handles the task execution .
173	Run a pigopop
174	Fetches the celery task state .
175	Return the number of tasks per send process .
176	Return the number of tasks per fetch process .
177	Set the value of a variable .
178	Get an ml client .
179	Create a job .
180	Get a job by job id .
181	Wait for a job to complete .
182	Create a version .
183	Set the default version .
184	List versions of a model .
185	Delete a version .
186	Create a model .
187	Get a model by name .
188	Write batch data to DynamoDB .
189	Integrate executors .
190	Get the default executor .
191	Returns the appropriate executor .
192	Called when an error occurs .
193	Return a connection to the database .
194	Trigger a dag .
195	Delete a dag .
196	Get task information .
197	Get all pools .
198	Create a new pool .
199	Delete a pool .
200	Creates or updates a container group .
201	Retrieves the state of an instance .
202	Retrieves the messages for a given resource .
203	Get logs from a resource group .
204	Delete a container group .
205	Checks if a container group exists .
206	Decorator to apply default values .
207	Construct an ingest query .
208	Get a message from the publisher .
209	Find DagRuns .
210	Returns a list of TaskInstance instances for the given state .
211	Get task instance by task_id
212	Get the previous DagRun .
213	Get the previous DagRun .
214	Update the state of this task .
215	Verify the integrity of the task .
216	Execute a jenkins request with the given request .
217	Convert a context to Airflow variables .
218	Trigger the conditionally trigger the action .
219	Send a metric .
220	Query a metric .
221	Return the DAG for the given dag_id .
222	Kill the given jobs .
223	Bag a DAG
224	Collect all of the files in the given directory .
225	Return a report of the dagbag stats .
226	Add a datetime to a datetime
227	Convert a datetime to a datetime
228	Check if the file is a directory .
229	Get a file from the HDFS .
230	Clear all task instances .
231	Return the number of retry attempts .
232	Generate a run command .
233	Return the current task state .
234	Record the task instance as FAILED
235	Refresh the Task instance from the database .
236	Delete XCom data from the database .
237	The key for this job .
238	Determine if this task is done .
239	Calculate the next retry date .
240	Checks if the service is ready to retry .
241	Return True if the task pool is full .
242	Get the DagRun object .
243	Push a value onto the task .
244	Perform an XCom pull operation .
245	Initialize the run context .
246	Close the log file .
247	Get a connection to the server .
248	Start an instance .
249	Set the machine type .
250	Get an instance template .
251	Insert an instance template .
252	Get instance group manager .
253	Update an instance group manager .
254	Waits until an operation is completed .
255	Check if a bucket exists
256	Creates a bucket .
257	Check if a prefix is in a bucket .
258	List prefixes .
259	List all the keys in a bucket .
260	Check to see if a key exists
261	Get an object from S3
262	Get the contents of a key .
263	Retrieve data for a given key .
264	Check if a wildcard key exists .
265	Get a key from S3 .
266	Upload a file to S3 .
267	Load a string from a string .
268	Upload bytes to S3 .
269	Upload a file - like object to S3 .
270	Copy an object to another bucket .
271	Execute the cql query .
272	Convert a user type into a dictionary .
273	Send email .
274	Get a speech client .
275	Recognize audio .
276	Execute the query .
277	Load an entry point .
278	Validate plugin object .
279	Skips the given tasks .
280	Get a connection to Azure
281	Check if a file exists .
282	Upload a file to ADL .
283	Return a list of files in path
284	Execute the query .
285	Unzip a file .
286	Query mssql
287	Decorator for action logging .
288	Build the metrics for a given function .
289	Create a cgroup from a path .
290	Delete a cgroup
291	Parse a host .
292	Perform an API call .
293	Returns a connection to the service
294	Make a query
295	Describe an object .
296	Return a list of available fields for an object .
297	Make an object from the Salesforce
298	Convert a column to a timestamp .
299	Write query results to a file .
300	Return a MongoClient object .
301	Get a MongoDB collection .
302	Replace multiple documents .
303	Checks if a mail has a mail attachment .
304	Retrieve mail attachments by name .
305	Download mail attachments by name .
306	Get attachments by name .
307	Return the file name and payload .
308	Put records into the queue .
309	Get the status of a task .
310	Send an email .
311	Sends an email .
312	Convert value to UTC
313	Checks if a blob exists .
314	Checks if a given container exists .
315	Load a blob from a string .
316	Read a file from a container .
317	Delete a file from a container .
318	Execute MLSD
319	Return ftp connection object .
320	List all files in a directory
321	Retrieve a file from the remote server .
322	Store a file in the remote database .
323	Get the modification time of a file
324	Execute the websocket hook
325	Return a connection object to the service .
326	Checks if a directory exists .
327	Checks if a file exists .
328	List all directories and files in a directory .
329	Create a directory .
330	Create a file from a file .
331	Load a file from a string .
332	Create a file from a stream .
333	Get a storage client .
334	Copy an object to another bucket .
335	Download a file from a bucket .
336	Upload a file to a bucket .
337	Check if a blob exists
338	Check if the object is updated after the given timestamp .
339	Delete an object from a bucket .
340	List blobs in a bucket .
341	Get the file size of an object .
342	Retrieve the crc32c32 checksum of an object .
343	Get the MD5 hash of an object .
344	Create a bucket .
345	Compose objects into a bucket .
346	Determine if the secondary training job has changed .
347	Return the message for secondary training status message .
348	Upload a file to S3 .
349	Configure S3 resources .
350	Check if an S3 URL exists .
351	Return a connection to the bot .
352	Create a training job .
353	Create a new hyperparameter tuning job .
354	Create a new transform job .
355	Create an endpoint .
356	Describe a training job .
357	Check the status of a SageMaker job .
358	Check the status of a training job .
359	Execute the pipeline .
360	Run migrations on the database .
361	Run migrations on the database .
362	Delete an instance .
363	Create an instance .
364	Create a table .
365	Delete a table .
366	Update a cluster .
367	Prepare the CLI to execute the CLI commands .
368	Prepare hive configuration
369	Load a DataFrame from a DataFrame .
370	Load a table from a file .
371	Get the metastore client .
372	Check for a named partition .
373	Check if a table exists
374	Return a connection to the hive server .
375	Get the results of a query .
376	Write the results to a csv file .
377	Get the results for a given query .
378	Return a pandas DataFrame from the results .
379	Returns a connection to the ProductSearchClient .
380	Returns the URL to send to requests .
381	Send a Dinging message .
382	Bind parameters to an operation .
383	Escapes special characters in a string .
384	Cast string field to string
385	Validate that value is of expected type .
386	Return a connection to the BigQuery service .
387	Get the BigQuery service .
388	Checks if a table exists .
389	Create an empty table .
390	Update a table .
391	Cancel the job .
392	Run a table delete .
393	Update a table .
394	Grant access to a dataset .
395	Retrieve a dataset .
396	Get a list of datasets .
397	Insert rows into a table .
398	Execute an operation .
399	Execute an operation .
400	Execute the next query .
401	Execute the query .
402	Make intermediate directories .
403	Create a queue .
404	Send a message to a queue .
405	Run the command .
406	Clean the config file .
407	Main entry point .
408	Build the HTML header .
409	Build the container s container .
410	Builds the js chart
411	Create x axis
412	Create y axis .
413	Return a connection to the database .
414	Decorator for action logging .
415	Decorator for gzipped requests .
416	Get the last DagRun .
417	Create a dagrun .
418	Send a message to the queue .
419	Generate a JSON response .
420	Open a file or zip file .
421	Make a cache key .
422	Returns a VideoIntelligenceService client .
423	Annotate a video .
424	Get API key .
425	Establish a connection to the opsgenie server .
426	Execute an alert
427	Builds an opsgenie payload .
428	Execute OpsGenie .
429	Return the connection to the server
430	Start a query .
431	Get the state of the query execution .
432	Check the status of a query .
433	Return a pysftp connection object .
434	Handles rate limit exceptions .
435	Call zendesk server
436	Get the partitions of a table .
437	Get a table by name
438	Get the location of a table .
439	Get the status of a cluster .
440	Delete a cluster .
441	Describe the cluster snapshots .
442	Restore a cluster from a cluster snapshot .
443	Creates a cluster snapshot .
444	Execute an API call .
445	Create a new job flow
446	Filter files by size .
447	Filter results based on ignored extensions .
448	Execute the pipeline .
449	Get a pool by name .
450	Create a new pool .
451	Delete a pool .
452	Convert a dict to a protobuf .
453	Waits until operation is finished .
454	Get an operation by name .
455	Add a label to the cluster .
456	Create a cluster .
457	Get a cluster by name .
458	Get Discord webhook endpoint .
459	Builds the payload .
460	Execute the webhook .
461	Encrypt plaintext using the given key_name .
462	Import a table .
463	Import a query .
464	Export a table .
465	Get a TextToSpeechClient .
466	Synthesize audio .
467	Write log to S3 .
468	Return a list of init containers .
469	Get the environment variables .
470	Returns a list of worker secrets .
471	Get security context .
472	Get extra links for an operator
473	Refresh this job .
474	Launch a process .
475	Starts the process .
476	Check if the job is done .
477	Exit gracefully .
478	Update import errors .
479	Process task instances .
480	Change the state of the task to be updated .
481	Get the number of tasks in the given states .
482	Change the state of the task_instances .
483	Enqueue task instances with queued tasks .
484	Execute all tasks in a simple dag .
485	Change the state of tasks to execute .
486	Process all tasks in the database .
487	Process a DAG file .
488	Update the counters .
489	Manage the executor state .
490	Returns the DagRun object for the given run date .
491	Returns a dictionary mapping tasks to tasks to their state .
492	Execute the tasks for the given dates .
493	Set all dag runs to failed .
494	Execute the backend .
495	Callback when the task runner is running .
496	Return client object .
497	Get an instance by ID .
498	Apply a function to an instance .
499	Creates an instance .
500	Update an instance .
501	Delete an instance .
502	Retrieves a database .
503	Create a database .
504	Update a database .
505	Delete a database .
506	Invoke this attachment .
507	Prepare additional parameters .
508	Get a connection to the cluster .
509	Check if a table exists .
510	Check if a record exists .
511	Build command to run the driver status command .
512	Submit a Spark application .
513	Process Spark submit log output .
514	Process the driver status log .
515	Returns the task runner .
516	Wait for the task to finish .
517	Execute the mysql command
518	Configure a csv file .
519	Write a local schema file .
520	Return the column type dictionary .
521	Map mysql_type to SQL
522	Execute the Sqoop
523	Decorator to apply a lineage to each inlets .
524	Parse the extra data from the server .
525	Return a list of dates from start_date
526	Scale time units
527	Returns the number of days after n days
528	Initialize a role in the database .
529	Delete a role .
530	Return a list of user s roles .
531	Returns a set of all permissions for the user .
532	Return True if the user has a role .
533	Return True if the given permission has the given permission .
534	Delete faulty permissions .
535	Merge a permission into the database .
536	Update the admin permissions view .
537	Synchronize permission on the given dag_id .
538	Create permissions for all DAGs .
539	Get the Fernet object .
540	Check for partition .
541	Returns an aws catalog hook .
542	Receive a message on the queue .
543	Get a connection to the hdfs server .
544	Get a connection to the namenode server .
545	Check if an HDFS path exists .
546	r Upload a file to HDFS .
547	Get the connection to pinot broker
548	Return the connection URI .
549	Convert a date to a dictionary .
550	Convert a time to a dictionary .
551	Get a redis connection
552	Get a Pandas DataFrame from the database .
553	Execute a SQL query .
554	Set autocommit flag .
555	Insert rows into a table .
556	Serialize a cell .
557	Get the health of the scheduler .
558	Get extra links for a task .
559	Returns a cloudant session
560	Execute the hook .
561	Retrieves the credentials from the API .
562	Create an auth object .
563	Catch http exceptions .
564	Fallback function to default project_id .
565	Return a list of all pending tasks .
566	Prepare the command to be executed .
567	Convert pic to torch .
568	Normalize a tensor .
569	r Resize an image .
570	r Pad an image .
571	Crop an image .
572	Crops an image .
573	Flip an image .
574	Calculate the perspective of an image .
575	Flip an image .
576	Crop an image .
577	Adjust the brightness of an image .
578	Adjust contrast by contrast_factor
579	Adjust the saturation of an image .
580	Adjusts the hue of an image .
581	r Adjust gamma .
582	Rotate an image .
583	Apply affine to an image .
584	Convert an image to grayscale .
585	Save tensor to a file .
586	Find all classes in a directory .
587	Read a single image file .
588	Read an info file .
589	Read matches from matches_dir .
590	Compute the accuracy of the target .
591	Decorator for printing functions to stdout .
592	Download url to root
593	Return a list of all the directories in the given directory .
594	Return a list of all files in the given directory .
595	Download a file from Google Drive .
596	Get parameters from an image .
597	Get parameters for the distortion .
598	Get parameters from an image .
599	Returns a function that computes the parameters of the image .
600	Generate parameters for an image .
601	Download the dataset .
602	Download and extract training images .
603	Download and extract the data from the URL .
604	Return the current theme name .
605	Return a list of completions .
606	Update the current settings .
607	Return a list of all the themes .
608	Parse a search query .
609	Parses a response into an answer
610	A custom gradient function .
611	Construct a normal distribution .
612	Compute the log probability of the joint effects .
613	Benchmark the HMC .
614	Expand a function s docstring .
615	Return the name of a distribution .
616	Build a custom RandomVariable object .
617	Create a random variable from a distribution .
618	Make a random variadic variates .
619	One step prediction .
620	Calculates the predicted time series .
621	Mask x along axis .
622	Asserts that x is finite .
623	Raises an AssertionError if x is not at least rank .
624	Return the size of the event .
625	Evaluate a function on each batch .
626	Convert an identifier to a tensor function .
627	Calculates the size of the params .
628	Get the next interceptor .
629	Decorator to intercept a function .
630	A decorator that yields the output of a function .
631	Returns a toy logistic data .
632	Plot the decision visualization .
633	Build the input pipeline .
634	Check that map_values are valid .
635	Trace the given function .
636	Calls the given function .
637	Call a function and return its gradient .
638	Broadcast structure from from_structure to another .
639	Decorator to apply a log probability function .
640	Perform a leapfrog step .
641	Performs a metropolis HAST sampling step .
642	Calculates the HamiltonianMonteCarlo state .
643	Apply signation to the output .
644	Create a TensorFlowConfig from a dictionary .
645	Convert x to tensor .
646	Creates a scale operator .
647	Creates a random walk function .
648	Creates a random walk function .
649	Expand tensor to event rank .
650	r Compute the lower bound of the distribution .
651	Concatenate logits .
652	Validate arguments .
653	Ensure TensorFlow is installed .
654	Logistic regression .
655	Compute coverage type and labels .
656	Cholesky covariance .
657	Return the standard deviation of x .
658	Variance of variance .
659	Make a positive axis .
660	Squeeze x along axis .
661	Compute the z - axis .
662	Inverse of z .
663	Compute the semi - linear linear regression matrix .
664	The semi - linear linear linear regression noise model .
665	r Sample ahalton sequence .
666	Generate permutations of permutations .
667	Get the indices of the indices .
668	Compute base expansion size .
669	Return a list of primes less than n .
670	Compute machine eps .
671	Hager - Hager algorithm .
672	Helper function to fix step size .
673	Perform a bracket search .
674	A line search after a bracketing .
675	Perform a line search .
676	Prepare arguments for evaluation .
677	Convert a list of values into a printable object .
678	Compute quadrature symmetric Gaussians .
679	Compute softmax quantiles .
680	Checks if the param is valid .
681	Determine the batch event shapes .
682	Interpolate a grid .
683	Interpolate a quadrature .
684	Scale a tensor .
685	Concatenate multiple vectors .
686	Compute log - likelihood matrix .
687	Compute the log - likelihood .
688	Compute the tensor .
689	Extract the log probabilities from the distribution .
690	Marginalized hidden probabilities .
691	Compute posterior marginal marginal marginal values .
692	Provides posterior mode .
693	Choose a random direction based on the current state .
694	Sample next batch .
695	If fn_arg_list is None then raise TypeError .
696	Pad x with right padding .
697	Run one step .
698	Build a tensorflow prior .
699	Builds the factors of the observed time series .
700	Minimize a build_loss_fn .
701	Computes the moments of a masked time series .
702	Compute the initial value of a masked time series .
703	Broadcast batches of distributions .
704	Compute the factored distribution .
705	Compute the sum of multivariate normalizations .
706	Calculate empirical statistics .
707	Expand the trailing dimension of the observed time series .
708	Canonicalize the observed time series .
709	A mixture of posterior draws .
710	Return the range of this range .
711	Create a function that returns a summary statistic .
712	Make a function call signature .
713	Resolve distribution names .
714	Get the required arguments .
715	Computes the KL divergence between two components .
716	Connects the distribution .
717	Resolve the distribution graph .
718	Compute the entropy of the distribution .
719	Check if an argument is in the distribution .
720	Create an image summary .
721	Visualize reconstruction .
722	Visualization of QualitativeAnalysis .
723	Summarize distribution parameters .
724	Summarize the mean and bits .
725	Compute the multivariate normalization .
726	Creates the zero state of the model .
727	Compute the LSTM .
728	Call the convolution function .
729	Generate the decoder of the model .
730	Reconstructs the state of the model .
731	Samples from the static prior distribution .
732	Samples the dynamic prior .
733	Return batch shape .
734	Return batch shape .
735	Make a state space model .
736	Sample from the posterior distribution .
737	Compute the minimum and maximum event dimensions .
738	Return the square matrix size .
739	Arithmetic sort operation .
740	Sort the values along the given axis .
741	Convert x to ndarray .
742	Compute the square root of x .
743	Convert p .
744	Compute the log - likelihood of x .
745	Logical series .
746	Compute the error .
747	Compute the log - likelihood of x .
748	Compute the joint log probability of two texts .
749	Benchmark text messages using HMC .
750	Determines if the given index is univariate .
751	Returns the marginal distribution .
752	Returns the index_points for the given index_points .
753	Create an autoregressive stack .
754	Perform one step .
755	Bootstrap training results .
756	The outer squared difference between x and y .
757	Compute the value and batchjacobian .
758	Prevent the second derivative of x .
759	Apply the distributional transform to x .
760	Splits the covariance into individual marginalizations .
761	Decompose a model into components .
762	Decompose a model by decompositioning the observed time series .
763	Decompose a forecast distribution by components .
764	Convert a dense tensor to a SparseTensor .
765	Decorator for operator operator
766	Return a text representation of a tensor .
767	Sample shape .
768	Returns the sample shape tensor .
769	Sample value .
770	Evaluate the model .
771	Return the numpy array as a numpy array .
772	Concatenate a prior distribution .
773	Create a default template .
774	Uniform unit norm .
775	Compute the log - likelihood of x .
776	Log normalization .
777	Return the common dtype of args_list .
778	Create a summary statistic .
779	Broadcast tensor to target_tensors .
780	PDF at peak .
781	Calculate the effective sample size .
782	Compute the effective sample size .
783	Reduces the posterior distribution of a single state .
784	Return the size of x .
785	Ensure that the argument is a list of states .
786	Hermite Gaussian Gauss - Hermite Gauss - Gauss - Gauss - Hermite Gauss - Hermite Gauss - Hermite Gauss - Gauss - Gauss - Gauss - Gauss - Gauss - Hermite - Gauss - Hermite - Hermite Gauss - Gauss - Gauss - Gauss - Gauss - Gauss - Hermite - Gauss - Gauss - Gauss - Gauss - Gauss - Gauss - Gauss - Gauss - Gauss - Hermite - Gauss - Gauss - Gauss - Gauss - Gauss - Gauss -
787	Compute quantiles for a normal distribution .
788	Merge two maps .
789	Return a copy of this Mapping .
790	Merge two values .
791	Recursively build a deep_tuple
792	Increments the left and right doubles .
793	Find the indices of the best interval .
794	Samples a batch of slices by sampling a batch of slices .
795	Samples with shrinkage .
796	Slice a batch of samples .
797	Decorator to set the value of a model .
798	Make a log joint function .
799	Returns a dictionary of keyword arguments for a function .
800	vg convolution 2D convolution layer .
801	Build a tree of trajectories .
802	Decorator to check if value is None .
803	Determines if two states have no u turn .
804	Leapfrog function .
805	Compute the joint log probability of the current target .
806	Random bloulli variates .
807	Default loc scale function .
808	Default distribution function .
809	Default Multivariate Normal distribution function .
810	Deserialize a Keras function .
811	Serialize a function .
812	Broadcast from from_structure to another .
813	Convert struct to Tensor .
814	Convert args into a tensor .
815	Call a function .
816	Returns a dictionary of attributes for the TensorLike object .
817	Make a mixture prior .
818	Pack images into a single image .
819	Download a file .
820	Create fake input functions .
821	Validate block sizes .
822	Check if the input is broadcast .
823	Multiply a multivariate normal .
824	Bernoulli .
825	Create a normal layer .
826	Create a Poisson distribution .
827	Mala_euler_method .
828	Get drift parts .
829	r Compute log acceptance correction .
830	Calls the volatility function and returns the result .
831	Broadcast the volatility parts of the volatility parts .
832	Make an AR transition matrix .
833	Samples the shape of x .
834	Reshape input to target shape .
835	Calls a function and resizes it .
836	Private function to compute the DTR .
837	Return samples from the joint distribution .
838	Allocates the latent Dirichlet .
839	Creates a Dirichlet model .
840	Given a list of topics return a list of strings .
841	Loads the newsgroups dataset .
842	Create fake input functions .
843	Builds input functions .
844	Minimal optimizer .
845	Adds control_dependencies .
846	Save images to a file .
847	Visualize training images .
848	Load BLOUlli MNIST dataset .
849	Convert dtype to a numpy dtype .
850	Return the base_dtype .
851	Checks if dtype is boolean .
852	Checks if dtype is complex .
853	Return the maximum value of dtype .
854	Name of dtype .
855	Return the size of a tensor .
856	r Asserts that items are of the same type .
857	Asserts that tensors have the same dtype .
858	Minimize an objective function .
859	Nelder - Mead one step .
860	Return a function that accepts an objective function .
861	Return a function that expands an objective function .
862	Returns a function that can be applied to an objective function .
863	Shrink a simple solution to a smaller solution .
864	Replace all dimensions with replacement .
865	Check if simplex is converged .
866	Prepare the arguments .
867	Prepare the objective function with the initial_simplex .
868	Prepare arguments to be passed to the initial vertex function .
869	Evaluate an objective function .
870	Plot weighted weights .
871	Plots the prediction of a heldout prediction .
872	Create dummy data .
873	Get keras configuration .
874	Create an instance from a config dictionary .
875	Matrix multiplication op .
876	Helper function to compute std variance .
877	Assigns log_moving_var to log_value .
878	Ensure x is a columnar .
879	Random rademacher .
880	Random rayleigh .
881	Pick a scalar condition .
882	Computes the log probability for each fiber .
883	Compute the probability for a single fiber .
884	Rotation about x .
885	r Perform batch normalization .
886	Validate BatchNormalization layer .
887	Slice a single parameter .
888	Convert slice parameters into a dictionary .
889	Apply a single step .
890	Apply a slice sequence to the distribution .
891	Create a batch of slices from a distribution .
892	Fit model to model .
893	Returns a function that ensures that the smallest relative norm weights change .
894	Prepare arguments for training .
895	Return the number of columns in x .
896	Prefer a decorator .
897	Copies a docstring to the original_fn .
898	Retrieves a constant value from a Tensor or Tensor .
899	Calculate rank from shape_tensor_fn .
900	Returns a case - insensitive case .
901	Create a scope scope .
902	Compute the standard deviation of the mean and variance .
903	Create a tensor .
904	Creates a diagonal tensor .
905	Return the shapes of a tensor .
906	Checks if the scale is a diagonal .
907	Check that a scalar distribution is valid .
908	Pad input tensor with categorical dimensions .
909	Pick a scalar condition .
910	Moves a dimension from one dimension to another .
911	Assert x is nonnegative .
912	Tests if two dimensions are equal .
913	Get the value of x .
914	Check if dt is known by dt .
915	Return True if dt is known by dt .
916	Return the largest integer of the largest integer type .
917	Return the smallest integer in dt .
918	Checks if dt is an integer or bool .
919	Ensures that categorical_parameters is valid .
920	Calculate the total permutations of the log - likelihood .
921	Rotate x .
922	Pick a tensor .
923	Prefer a static broadcast shape .
924	Generate a new seed .
925	Create a tridiag .
926	Return the size of x .
927	Convert quadrature_grid_and_probs .
928	Get the parent frame arguments .
929	Expand a tensor .
930	Convert a tensor into a tensor .
931	Checks that the rightmost dimensions are valid .
932	Validate a permutation vector .
933	Return the shape of the event .
934	Concatenate two tensors .
935	Return the dimensions of x .
936	Merge a tensor with another .
937	Returns a TensorShape with the given rank at the given rank .
938	Assert that static_target_shape is equal to static_target .
939	Assign sample shape to full_sample_shape .
940	Build a backward pass step .
941	Update the posterior covariance matrix .
942	Build a kalman filter step .
943	Apply linear gaussian update .
944	Kalman transition function .
945	Create a kalman - mean step .
946	Return a function that computes the kalmanov covariance matrix .
947	Create a Kalman - sample step .
948	Propagate mean .
949	Propagate covariance .
950	Backward pass .
951	Samples from the joint distribution .
952	Calculates the posterior marginal posterior and the covariance matrix .
953	Compute joint mean .
954	Compute covariance covariance matrix .
955	Push latent variables to observations .
956	Log normalization .
957	Compute the mode .
958	Rotate the given samples .
959	Sample from 3D .
960	Return a copy of a function .
961	Remove all keys with the given value .
962	Recursively replace any nested dicts .
963	Get samples from the distribution .
964	Return True if x is a namedtuple .
965	Chooses base case .
966	Return a subclass of a class .
967	Safe sum .
968	Convert a function into a tensor .
969	Call fn with gradient and gradients .
970	Iterate over a loop .
971	Run a trace_fn .
972	Takes a setter and returns the result .
973	Decorator to make a getter for a kernel .
974	Enables parameters in a kernel .
975	Replace event shape in input_shape .
976	Replace event_shape in input_tensors .
977	Check shape .
978	True if any of the converged and failed .
979	Get the arguments for initializing the initial state .
980	Perform a line search .
981	Restrict a function along the given axis .
982	Update the position .
983	Check if convergence is converged .
984	Broadcast value to target .
985	Compute the harmonic number .
986	Generate a default exchange function .
987	Extract a field from kernel results .
988	Get the states that have been swapped .
989	Compute variance scaling term .
990	Returns a function that returns the forward log - detector function .
991	Generate a forward transform function .
992	Return an inverse transform function .
993	Apply one step .
994	Like tf .
995	Second step 2 .
996	Secondant step .
997	Inner update function .
998	Update the value_and_gradient function .
999	Binding function .
1000	Binary bisection function .
1001	Binding function .
1002	Determines if two values are finite .
1003	Satisfies the Wolfeau curve .
1004	Compute the squared difference between two values .
1005	A simple step size update policy .
1006	Leapfrog integration .
1007	Compute log acceptance correction .
1008	Perform one step .
1009	Returns the bootstrap results .
1010	Bayesian resnet .
1011	Resnet block .
1012	Create an encoder .
1013	Create a decoder for a topic .
1014	Create a prior distribution .
1015	Samples the chain .
1016	Deep Exponential family .
1017	Create a new learner .
1018	Create a trainable gamma .
1019	Load NIP12 papers into a directory .
1020	Initialize params .
1021	Determines the klass - level kl function for a given type .
1022	Read image from file .
1023	Download all sprites .
1024	Create a character .
1025	Create a sequence of frames .
1026	Create a random sequence .
1027	Create a dataset .
1028	Validate distributions .
1029	Flatten a list of kernels into a list of kernels .
1030	Return a list of multiplicand kernels .
1031	Generate training data .
1032	Count the number of integrations in arr .
1033	Find bins in x and return them .
1034	Plot a histogram along an axis .
1035	Calculate the quantiles of x .
1036	Get the ndims of x .
1037	Applies the keep_dims to each axis .
1038	Make a list of ndims .
1039	Move dimensions to flat end .
1040	Sort tensor .
1041	Create a list of model states for each component .
1042	Calculate amariance .
1043	Kernel function .
1044	Computes the jensen - Shannon approximation .
1045	Compute Pearson pearson .
1046	Squaredhellinger .
1047	Compute the diagonal of the log - likelihood .
1048	Compute the power of the tensor .
1049	Absolute absolute value .
1050	Computes the Leffreys .
1051	Modified GAN .
1052	Calculate dual CSISzar function .
1053	Symmetrized CSISzar function .
1054	Calculate the CSiszarF for a function f .
1055	Helper function for ciszar .
1056	Asserts that x is valid .
1057	Batch gather function .
1058	Broadcast an event with params .
1059	r Compute expectation distribution .
1060	Broadcast an event .
1061	Minimize a value using gradient descent .
1062	Assigns inputs to the inverse Hessian .
1063	Update the inverse Hessian .
1064	Update the inverse Hessian estimator .
1065	Multiplies the given matrices .
1066	Compute the product of t1 and t2 .
1067	Transpose matrices .
1068	Pad the shape of x with zeros .
1069	Compute the sum of the right ndims .
1070	Squared square root of x .
1071	Return the common dtype of arg_list .
1072	Minimize a value using bfs .
1073	Returns the initial state of the optimizer .
1074	Returns the direction of the search direction .
1075	Creates empty queue for an element .
1076	Push onto the queue .
1077	Return True if x == 0 otherwise False .
1078	Return true if x is large enough .
1079	Create uniform correlation matrix .
1080	Compute the correlation matrix .
1081	Calculates the confidence interval for each sample .
1082	Determine the volume of each detector .
1083	Compute Von Mises Series .
1084	Cross - Mises Normal distribution .
1085	One step of one step .
1086	Minimize the objective function .
1087	Get initial parameters .
1088	Find the smallest value in a population .
1089	Check whether the value is converged .
1090	Get the starting population .
1091	Binary crossover operation .
1092	Returns a list of mutants based on mixing_indices .
1093	Generate mixing indices .
1094	Ensure tensor_or_list is a list .
1095	Convert to a tensor .
1096	Soft threshold .
1097	Clip tensor by the given value .
1098	Build training pipeline .
1099	Plot the generated images .
1100	Convert a list of productions into a string .
1101	Call the LSTM function .
1102	Redirected model .
1103	Compute the integral of x .
1104	Compute the integral of x .
1105	Compute the rank of a matrix .
1106	Pin a tensor .
1107	Solve linear equations .
1108	Compute the inverse of a linear matrix .
1109	Constructs the assertions for lower_upper and permutation .
1110	Given a lower_upper and rhs .
1111	Compute the diagonal of a block diagonal .
1112	Check if a matrix is valid .
1113	Gradient of gradient and fim .
1114	r Fit a sparse model .
1115	Generate a list of slices .
1116	Generate a mask .
1117	Creates a dense layer .
1118	Create an input order .
1119	Create a list of degree degrees .
1120	Create a list of masks that overlap the given degrees .
1121	Make a masked initializer .
1122	Connects the neural network .
1123	Call the autoregressive layer .
1124	Draw a sample of samples .
1125	Zero - dimensional multivariate normal diagonal .
1126	Obtains an observation noise function .
1127	Convert parameters to weights .
1128	Find the depth of each node in the graph .
1129	Return the best order of the tree .
1130	Return a function that flattening the chain rule rules .
1131	Connects the given model .
1132	Compute the variational loss .
1133	Optimal posterior distribution .
1134	Returns a function that checks if the given time is the last day of the season .
1135	Builds a matrix that maps effects to residuals .
1136	Builds a temporal transition matrix .
1137	Create a seasonal transition noise .
1138	Calculate the seasonal transition noise .
1139	Checks if the observation data is empty .
1140	Validate observation data .
1141	Add a scheduler to the scheduler .
1142	Sets the given checkpoint trigger .
1143	Sets the gradient clip .
1144	Optimize the layer .
1145	Sets the train summary .
1146	Sets the value summary .
1147	Create an optimizer .
1148	Sets training data .
1149	Sets a summary trigger .
1150	Read training data sets and extract training images .
1151	Download news20 articles from a source directory .
1152	Returns a dictionary with the w2v data .
1153	Compile the optimizer .
1154	Train the model .
1155	Evaluate the BigDLL .
1156	Predict a feature .
1157	Get the MNIST dataset .
1158	Preprocess mnist dataset .
1159	Get the end trigger for the given options .
1160	Validate the optimizer .
1161	Return the value of the configuration file .
1162	Call BigDDL function .
1163	Call a Java function .
1164	Convert an RDD to a Python object .
1165	Convert an object to a Java object .
1166	Get an activation by name .
1167	Create a new DDL object from a ndarray .
1168	Returns the label of the image .
1169	Read image from parquet file .
1170	Write the dataset to disk .
1171	Retrieves an image from the viewer .
1172	Return the image as a ndarray .
1173	Returns the label of the image .
1174	Get the prediction for this image .
1175	Predict the model .
1176	Train an optimizer .
1177	Transform the image to the given dataset .
1178	Save keras definition to disk .
1179	Build keras model .
1180	Predict class from data_rdd
1181	Sets the weights of the model .
1182	Returns the weights of the layer .
1183	Save the tensorflow to a tensorflow file .
1184	Sets the training .
1185	Load a torch .
1186	Load Keras model from json file .
1187	Create a Criterion object .
1188	Load weights from json file .
1189	Load the estimator .
1190	Build keras model .
1191	Get input shape .
1192	Returns the output shape .
1193	Get MNIST dataset .
1194	Read data sets from data_dir
1195	Return the path to the bigDL class .
1196	Determine if Spark is newer than 2 .
1197	Export tensorflow checkpoint data .
1198	Save tensors to target path .
1199	Expand a tensor .
1200	Precompute future symbols .
1201	Simple simple attention layer .
1202	Attention layer .
1203	Compute BLEU score .
1204	Get the log file .
1205	Log an utterance .
1206	Update summary gradients .
1207	Dump weights to tf .
1208	Read data from a JSON file .
1209	Train an EvalModel from a config file .
1210	Interact with an agent .
1211	Convert labels to onehot .
1212	Convert a proba to one - hot labels .
1213	Configure tensorflow session .
1214	Load the model .
1215	Returns the current momentum variable .
1216	Update graph variables .
1217	Calculate f1_macro .
1218	Process a word .
1219	Creates a stacked cnn .
1220	A Bi - RNN .
1221	Constructs an RNN layer .
1222	Creates a stacked highway highway layer .
1223	Embedding layer .
1224	Constructs a CUDNN layer .
1225	Construct a CUDNN compatible GRU .
1226	Constructs a cudnn LSTM .
1227	A legacy LSTM .
1228	Backward inference .
1229	Backward inference .
1230	Substacks the input tensor .
1231	A variational dropout .
1232	Builds the network .
1233	Build word encoder .
1234	Build basic network .
1235	Train model on batch .
1236	Predict on batch data .
1237	Convert a sentence into a numpy ndarray .
1238	Convert a list of tags into a numpy array .
1239	Calculate BLEU score .
1240	Verify SC URL .
1241	Extract certificates from a string .
1242	Verify certificate chain .
1243	Verify the signature .
1244	Verify the certificate chain .
1245	Return the JSON representation of all controls .
1246	Microsoft msbot framework .
1247	The list of telegram controls .
1248	Return a list of all the controls .
1249	Main entry point .
1250	Wrap a function with a default value .
1251	Wrap a Keras backend function .
1252	Calculate the accuracy of two sequences .
1253	Round accuracy of test accuracy .
1254	Initializer .
1255	Read data from a file .
1256	Create a default agent .
1257	Convert a numpy array to one - hot array .
1258	Pretty - print metrics .
1259	Populate the settings directory .
1260	Load the TensorFlow model .
1261	Save the TensorFlow model to disk .
1262	Create an optimizer .
1263	Search for the given word in the trie .
1264	Create a dictionary with the operation costs .
1265	Start the timer .
1266	Handle incoming requests .
1267	Actual action .
1268	Generate the response dictionary .
1269	Process an intent request .
1270	Handles launch request .
1271	Handles unsupported messages .
1272	Pretty print the structure .
1273	Convert ELMo loss to EPSL .
1274	Build a Chainer from a configuration file .
1275	Interactively interact with a model .
1276	Predict on a file .
1277	Read a sentence from a text file .
1278	Return a function from a string .
1279	Decorator to register a metric .
1280	Get a metric by name .
1281	Return the decay type from a string .
1282	Calculate the best value for a loss .
1283	Encode a list of tokens .
1284	Read requirements from requirements file .
1285	Compute the log loss .
1286	Export a weight file to a hub .
1287	Shows the details of a dictionary
1288	Create an ecommerce agent .
1289	Main application .
1290	Download a file from a URL .
1291	Untar a file .
1292	Decompress a URL .
1293	Recursively update an editable dictionary .
1294	Set the MD5 hash of a URL .
1295	Set a query parameter .
1296	Return a representation of the card .
1297	Return the JSON representation of this control .
1298	Extract card action .
1299	Return the JSON representation of the control .
1300	Generate the msbot framework .
1301	Calculate the F1 F1 F1 F1 F1 .
1302	Calculate the recall at each point .
1303	r Check if GPU is available .
1304	Parse a config property .
1305	Parse a config file and return a dictionary of values .
1306	Expand a path .
1307	Create a Component from a dictionary .
1308	Main loop .
1309	Delete a conversation .
1310	Refresh all valid certificates .
1311	Verify a signed request .
1312	Validate the request .
1313	Return a class from a string .
1314	Decorator to register a class .
1315	Get a model by its name .
1316	Get GLM regularization path
1317	Make a GLM model .
1318	Create an H2Ocluster object from a dictionary .
1319	Shutdown the H2O instance .
1320	Determine if the remote server is running .
1321	Show the status of the cloud .
1322	List all jobs .
1323	Returns a DataFrame containing all the time zones .
1324	Fill properties from h2cluster .
1325	The metalearner parameters .
1326	Perform a test on the sandbox .
1327	Retrieve a summary of a frame .
1328	Delete a frame .
1329	Retrieve model builders .
1330	Validate model parameters .
1331	Compute model metrics .
1332	Get model metrics .
1333	Delete a model by key .
1334	Return a table of the data .
1335	Run one or more EC2 instances .
1336	Terminate the specified instances .
1337	Stop the specified instances .
1338	Start one or more instances .
1339	Reboot the specified instances .
1340	Wait for SSH to become available .
1341	Get the full name of a function .
1342	Tries to find a function from a frame .
1343	Returns a string describing the function arguments .
1344	Wrap the given text into a string .
1345	Wait for the job to finish .
1346	Train the model .
1347	Train the model .
1348	Returns a dictionary of parameters as a dictionary .
1349	Signal handler .
1350	Wipe output directory .
1351	Remove rSandbox from parent_dir
1352	Scrape H2O flow from stdout .
1353	Scrape cloud size from stdout .
1354	Terminate the JVM .
1355	Stop all nodes .
1356	Get the IP of the cluster .
1357	Return the port of this node .
1358	Return the RPR of the model .
1359	Determine the size of the model .
1360	H2o mean absolute error .
1361	H2 mean squared error .
1362	Calculate the absolute error between two predictions .
1363	Calculate H2O s explained variance score .
1364	Assert that var is a type of types .
1365	Assert that value is matched by regex
1366	Raises an AssertionError if value is not satisfied .
1367	Retrieves the assert arguments .
1368	Check if var is of vtype
1369	Return a string representation of a type .
1370	Generate source code for a lambda function .
1371	Return True if var is valid .
1372	Checks if the given variable is valid .
1373	Get H2O configuration .
1374	Read the config file .
1375	Generate log files .
1376	Run the given progress function .
1377	Store the model progress .
1378	Recalculate model parameters .
1379	Estimate the completion time for this progress bar .
1380	Guess the next poll interval .
1381	Compute progress at time t .
1382	Compute the time at the given position .
1383	Write text to stdout .
1384	Compute the size of widgets .
1385	Get the size of the terminal .
1386	Set the encoding .
1387	Compute the encoder .
1388	Return a H2O Frame object .
1389	Refresh the current frame .
1390	Return the type of a column .
1391	Retrieve columns by type .
1392	Display a summary of the H2OO .
1393	Describe the frame .
1394	Return the head of the DataFrame .
1395	Multiply a matrix .
1396	List of levels .
1397	Return the number of levels .
1398	Set the level of the DataFrame .
1399	Set the domain levels .
1400	Rename columns .
1401	Set the column names .
1402	Set a column name .
1403	Return True if the given item is in the list .
1404	Return a new H2OoFrame with k_folds .
1405	Stratified k_folds .
1406	Print H2OOS structure .
1407	Return a pandas dataframe as a pandas dataframe .
1408	Remove a column from the table .
1409	Calculate the quantile of the DataFrame .
1410	Concatenate multiple frames .
1411	Bind a DataFrame to a DataFrame .
1412	Create a new row - binded dataframe .
1413	Split data into multiple frames .
1414	Add a groupby to the query .
1415	Return a new H2oFrame with missing values .
1416	Impute the values of a column .
1417	Merge two columns .
1418	Return a new H2O - level expression .
1419	Insert missing values into the dataset .
1420	Compute the variable variance .
1421	Compute the correlation between two DataFrames .
1422	Calculate the distance between two vectors .
1423	Return the factor as a factor .
1424	Split the string according to pattern .
1425	Count the number of rows matching a pattern .
1426	Create a substring from start_index and end_index .
1427	Return a new H2oFrame with the specified set .
1428	Compute the entropy matrix .
1429	Return the number of valid substrings in the table .
1430	Create an H2O table .
1431	Calculate the histogram .
1432	Compute the index of the words of the input words .
1433	Replace all occurrences of pattern with replacement .
1434	Return the current row of the current expression .
1435	Return a list of rows matching the given pattern .
1436	Return a new H2O .
1437	The difference between two frames .
1438	Return a DataFrame with NaNs .
1439	The minute expression .
1440	Return a new H2O .
1441	Generate a random stratified split based on test_frac .
1442	Return a new H2oFrame with cut breaks .
1443	Return the index of the maximum .
1444	Apply a function to the DataFrame .
1445	Parse text into code object .
1446	Parse a code file .
1447	Move the cursor to the next row .
1448	Parse the token stream .
1449	Return the size of the model .
1450	List of cell centers .
1451	The center of each cell .
1452	Connect to a server
1453	Make a request to the API .
1454	Check H2O and H2O .
1455	Import a path and return it .
1456	Upload a file to disk .
1457	Import a CSV file .
1458	Import a Hive table .
1459	Import a SQL table .
1460	Import a SQL table .
1461	Parses a raw data structure into a H2oFrame .
1462	Create a deep copy of the data .
1463	Get a model by its id .
1464	Get a single grid by ID
1465	Get a frame by ID .
1466	Download a model .
1467	Download a DataFrame to a CSV file .
1468	Download H2O logs .
1469	Export a frame to a file .
1470	Convert data into a list .
1471	Run a demo function .
1472	Load a dataset .
1473	Create model metrics .
1474	Upload a key to a file .
1475	Upload a custom metric .
1476	Validate a frame id .
1477	Convert size to human readable form .
1478	Normalize a slice .
1479	Determine whether a slice is normalized .
1480	Parses a dataframe into a pandas dataframe .
1481	Predict csv from input csv file .
1482	Mark a function as deprecated .
1483	Joins the queue .
1484	Perform deepfeatures on each model .
1485	Print a summary of the model .
1486	Display the hyperparameters .
1487	Get the hyperparameters of the model .
1488	Get a dictionary of hyperparameters .
1489	Retrieve the H2OOCs for the current model .
1490	Compute the F1 of each model .
1491	Returns the variance of the model
1492	Project the archetypes to the test data .
1493	Plot the curve .
1494	Translate a CamelCase name to a CamelCase .
1495	Redent the given text .
1496	Extract the run into a dictionary .
1497	Main entry point .
1498	Close H2O session .
1499	Get the session id .
1500	Start logging .
1501	Prepare a payload payload .
1502	Prepare file payload .
1503	Log start transaction .
1504	Log the end of a transaction .
1505	Log a message .
1506	Process a HTTP response .
1507	Print a message to stdout .
1508	Get the automl for a project .
1509	Download a polynomial .
1510	Download the model from the leader .
1511	Fit the model .
1512	Scale the data .
1513	Inverse of X .
1514	Extract a true string from a string .
1515	Finds the name of the node_name in the temp_func_list
1516	Finds git_hash branch
1517	Finds if the build timeout is set
1518	Finds a build failure in the temp_func_list
1519	Find build id in temp_func_list
1520	Extract job name from a URL string .
1521	Grab all the messages from the current test .
1522	Save the test info to a file .
1523	Update the summary file .
1524	Write the content of a file .
1525	Write a Java message .
1526	Load all Java messages to ignore .
1527	Normalize enum constant .
1528	Find the synonyms for a word .
1529	Poll the job .
1530	Convert this Assembly to a Pojo .
1531	Fit the assembly to the given frame .
1532	Find a percentile on a sorted list
1533	Return the default parameters as a dictionary .
1534	Get the actual parameter values .
1535	Run deep features on test data .
1536	Get the scoring history for this model .
1537	Display the current model .
1538	Compute the variable importer
1539	Returns the residuals of the model .
1540	Return the coefficients of the model .
1541	Download a Pojo .
1542	Download the model .
1543	Save model details to h2o .
1544	Checks that the targets have the same length .
1545	List of cross validation models .
1546	Run the GbmradientBoosting model .
1547	A simple deep learning model .
1548	Example of production regression .
1549	Wait for a key press .
1550	Return the data as a pandas DataFrame .
1551	Display the table .
1552	Start the application .
1553	Searches for an h2o . jar . jar
1554	Yield paths for H2O_JAR_PATH .
1555	Return the HIT ratio table .
1556	Create a dict writer .
1557	Convert a path to a python path .
1558	Convert a directory path to a URI .
1559	Parse a source code source .
1560	Generate API documentation for a URI .
1561	Find all available modules .
1562	Write API documentation to outdir .
1563	Write the index to a file .
1564	Convert the table to a list of integers .
1565	Load the json file .
1566	Add a new message .
1567	Update the message dictionary .
1568	Extract a message from a file .
1569	Save the dictionary to a pickle file .
1570	Print all the messages in the config file .
1571	Parse command line arguments .
1572	Print usage information .
1573	Locate all python files in a directory .
1574	Find the spell in a file .
1575	Main entry point .
1576	Apply transformation to data .
1577	Summarize all failed tests .
1578	Extract the print save in the print window .
1579	Plot the ROC curve .
1580	Compute confusion matrix .
1581	Determine if a DeepWater model is available .
1582	Removes test data from the given month to a given month .
1583	Return a dictionary mapping the class names to their class names .
1584	Update the site forward .
1585	Return the data as JSON .
1586	Comment a user .
1587	Get credentials from the SSH server .
1588	Like the given user .
1589	Like liked media with a given hashtag .
1590	Check if user is not bot .
1591	Read a list from a file .
1592	Schedule a schedule .
1593	Defer this message .
1594	Download a resource from a resource group .
1595	Guess service info from a specification path .
1596	Update a power shell command .
1597	Delete application definition .
1598	Creates an application definition .
1599	Returns the URI for the given request .
1600	Returns a Connection object for the given request .
1601	Perform an HTTP request .
1602	Execute script actions .
1603	Checks a front door name .
1604	Purge deleted items from a vault .
1605	Get the authorization server .
1606	Validate the request URI .
1607	Returns a profile object .
1608	Get credentials from Azure CLI .
1609	Resolve a spell query .
1610	Checks the availability of a local service .
1611	Open an HTTP request .
1612	Sets the timeout .
1613	Sets a request header .
1614	Retrieves the response headers .
1615	Send a request to the client .
1616	Returns the status of the request .
1617	Retrieves the status of the request .
1618	Return the response body .
1619	Sets the client certificate .
1620	Send an HTTP request .
1621	Put a request header .
1622	Send the given request body .
1623	Return the response object .
1624	Return a human readable id .
1625	Get serialization name from element name .
1626	Verify a face to a person .
1627	Add a new job .
1628	Get the properties of an entry .
1629	Get all children of a node .
1630	Searches for namespace namespaces in parent .
1631	Convert an XML string into a ServiceBus namespace .
1632	Convert an XML string into a ServiceBusRegion object .
1633	Convert an XML string to a availability response .
1634	Convert an XML string into a Metadata object .
1635	Replace a runbook content .
1636	List the domain recommendations .
1637	Update a kb .
1638	Retrieves a user s member groups .
1639	Build a package from a PR number .
1640	Import data from a resource group .
1641	Publish a runbook .
1642	Renew the lock .
1643	Replace word alterations .
1644	Add a value to a SecretValue resource .
1645	Retrieves the properties of a storage account .
1646	Retrieves the keys for a storage account .
1647	Regenerates the keys for a storage account .
1648	Creates a storage account .
1649	Updates a storage account .
1650	Deletes a storage account .
1651	Checks the service account name availability .
1652	Retrieves the hosting service properties .
1653	Creates a hosted service .
1654	Deletes a hosting service .
1655	Creates a deployment .
1656	Deletes a deployment .
1657	Swaps a deployment .
1658	Changes the deployment configuration .
1659	Updates the deployment status .
1660	Upgrade a deployment .
1661	Walk an upgrade domain .
1662	Reboot a role instance .
1663	Deletes the specified role instances .
1664	Checks the service name availability .
1665	Fetches the certificates for a service .
1666	Retrieves a service certificate .
1667	Adds a service certificate to a service .
1668	Deletes a service certificate .
1669	Retrieves a subscription certificate .
1670	Adds a management certificate .
1671	Deletes a management certificate .
1672	Retrieves the affinity group properties .
1673	Creates a affinity group .
1674	Deletes an affinity group .
1675	Fetches a list of subscription operations .
1676	Creates a reserved IP address .
1677	Deletes a reserved IP address .
1678	Associates a reserved IP address .
1679	Disassociate a reserved IP address .
1680	Retrieves a reserved IP address .
1681	Retrieves a single role .
1682	Creates a virtual machine deployment .
1683	Adds a role to the deployment .
1684	Updates a role .
1685	Deletes a role .
1686	Captures an image .
1687	Starts a new role .
1688	Starts the specified roles .
1689	Restarts a role .
1690	Shutdown a role .
1691	Shutdown the specified roles .
1692	Adds a DNS server .
1693	Updates a DNS server .
1694	Deletes a DNS server .
1695	Fetches a list of resource extensions for a given publisher .
1696	Replicates a VM image .
1697	Replicate a VM image .
1698	Share a virtual machine .
1699	Creates a new VM image .
1700	Deletes a virtual machine image .
1701	List VM images .
1702	Updates a VM image .
1703	Adds an OS image .
1704	Updates an OS image .
1705	Updates an OS image from an image reference .
1706	Deletes an image .
1707	Retrieves a data disk .
1708	Adds a data disk .
1709	Updates a data disk .
1710	Deletes a data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Deletes a disk .
1714	Retrieve the state of a management group .
1715	Build the receiver .
1716	Fetch next batch .
1717	Renew the lock .
1718	Creates or updates an existing virtual machine scale set .
1719	Convert to a single placement group .
1720	Creates a screen text .
1721	Creates a new key .
1722	Import a key .
1723	Update a key .
1724	Set a secret .
1725	Set a certificate issuer .
1726	Create a service instance from a connection string .
1727	Get a subscription for a topic .
1728	List all subscriptions for a given topic .
1729	Send a message to the client .
1730	Returns a Sender instance .
1731	Create a receiver for this entity .
1732	Return a receiver for the deadletter .
1733	Parse an asynchronous operation from an asynchronous operation response .
1734	Perform a GET request .
1735	Perform a PUT request .
1736	Wait for an operation to complete .
1737	Retrieves the status of an operation .
1738	Add the content - type header to the request .
1739	Validate the input package .
1740	Retrieve certificates for a vault .
1741	Retrieves all regions in the service bus .
1742	List all the namespaces .
1743	Get a namespace by name .
1744	Creates a namespace .
1745	Deletes a namespace by name .
1746	Checks the availability of a namespace .
1747	List a topic .
1748	List a notification hub .
1749	List all Relays .
1750	Get the metrics for a given metric .
1751	Get a single metric rollups topic .
1752	Get the metrics rollups for a given metric .
1753	Get a single metric rollups for a given metric .
1754	Create a context manager .
1755	Create a virtualenv with the given packages .
1756	Creates a new server .
1757	Sets the server admin password .
1758	List the quotas for a server .
1759	Gets the event logs for a server .
1760	Creates a new firewall rule .
1761	Updates a firewall rule .
1762	Deletes a firewall rule .
1763	List all Firewall rules for a server .
1764	List all service level objectives .
1765	Creates a database .
1766	Updates a database .
1767	Delete a database .
1768	Retrieve a list of databases .
1769	List all agreements for a domain .
1770	Close the message handler .
1771	Close the receiver .
1772	Get the current session state .
1773	Set the session state .
1774	Receive a deferred message .
1775	Merge an existing reservation .
1776	Validate a bearer token .
1777	Purge an existing table .
1778	Return an error handler .
1779	Creates a queue .
1780	Deletes a queue .
1781	Retrieves a specific queue .
1782	Creates a topic .
1783	Retrieves a specific topic .
1784	Creates a rule .
1785	Retrieves a rule .
1786	List the rules for a topic .
1787	Creates a subscription .
1788	Retrieves a specific subscription .
1789	List all subscriptions for a topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a queue message .
1794	Receive a message from a queue .
1795	Receive a subscription message from a topic .
1796	Creates an event hub .
1797	Updates an event hub .
1798	Retrieves an event hub .
1799	Sends an event to a hub .
1800	Updates the HTTP header .
1801	Get the authorization token .
1802	Check if token is expired
1803	Retrieves an access token from the API .
1804	Updates the path with the query string .
1805	Reset a service profile .
1806	Delete this message .
1807	Unlock the message .
1808	Renew the lock .
1809	Add headers to the request .
1810	Return the batch body as a batch .
1811	Get the health of the cluster .
1812	Retrieves the cluster health information .
1813	Unprovision an application type .
1814	Retrieves information about the repair task list .
1815	Submit a property batch .
1816	Generic error handler .
1817	Start a web site trace operation .
1818	List slot changes for a slot .
1819	Swap a slot .
1820	Retrieve events by type .
1821	Add a new face from a stream .
1822	Handles redirect requests .
1823	Create and start a new migration .
1824	Publish events to a topic .
1825	Move resources from a resource group .
1826	Set the profile .
1827	List query results for a management group .
1828	Create a queue .
1829	Delete a queue .
1830	Create a new topic .
1831	Delete a topic .
1832	Create a subscription .
1833	Parse a connection string .
1834	Get the properties of the queue .
1835	Is this lock expired?
1836	Create a new session .
1837	Create a subscription .
1838	Exports the request rate by the specified parameters .
1839	Process the results from the results queue .
1840	Bulk add tasks to the results queue .
1841	This function is called when the task collection is reached .
1842	Convert a configuration dictionary into a dictionary .
1843	Resets a reset password .
1844	Start an environment .
1845	Create a message from the response body .
1846	Convert an etree element into a Rule object .
1847	Convert an XML Element into a Queue .
1848	Convert an etree element into a Topic object .
1849	Convert an XML Element into Subscription object .
1850	Create a new certificate .
1851	Delete an existing certificate .
1852	Get a client from a CLI profile .
1853	Build a client from a dictionary .
1854	Creates a client from an azure auth file .
1855	Parses an enum results list into an Enumeration object .
1856	Extract properties from an XML element .
1857	Delete a certificate .
1858	Retrieves a Queue client .
1859	List all available queues .
1860	Retrieves a specific topic .
1861	List all topics .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Retrieves a specific Site .
1865	Create a new website .
1866	Delete a website .
1867	Updates a website .
1868	Restart a website .
1869	Retrieves historical usage metrics for a given website .
1870	Retrieves the metric definitions for a website .
1871	Retrieves the XML representation of the publish profile .
1872	Retrieves a publish profile .
1873	Update a registry policy .
1874	Creates a cloud service .
1875	Checks the job collection name .
1876	Retrieves a job collection .
1877	Complete an existing backup .
1878	Cancel scheduled messages .
1879	Send all pending messages .
1880	Reconnect to the sender .
1881	Retrieve a certificate from a publish settings file .
1882	Load cookies from the session .
1883	Returns the terminal width .
1884	Get the cut prefix from a string .
1885	Print a message in place .
1886	Format a file size .
1887	Format the elapsed time .
1888	Create a status line .
1889	Print progress bar .
1890	Generate segment numbers .
1891	Iterate over segments .
1892	Wait for a given time .
1893	Put a segment into the queue .
1894	Put a value into the queue .
1895	Get request parameters .
1896	Extracts a nonce from an HTTP result .
1897	Find vpid on the server .
1898	Parse a JSON string .
1899	Parse XML data .
1900	Parse a query string .
1901	Searches a dictionary by key .
1902	Spawn a command .
1903	Iterate over all the tags in the HTML .
1904	Parse a manifest .
1905	Determine JSON encoding .
1906	Parse a JSON response .
1907	Parse an XML string and return an object .
1908	Parse cookies .
1909	Parse headers .
1910	Parse the request parameters .
1911	Return the message as a string .
1912	Create a new LogRecord .
1913	Login to LiveEdu account
1914	Load a support plugin .
1915	Update the query s query string .
1916	Iterate over the chunks of the file .
1917	Yields all required arguments .
1918	Check file output .
1919	Create an output pipe .
1920	Create an HTTP server .
1921	Iterate over HTTP requests .
1922	Starts streaming streaming .
1923	Output a stream stream .
1924	Open a stream .
1925	Open a stream .
1926	Read data from a stream .
1927	Handle a stream .
1928	Fetch streams from plugin .
1929	Retry one or more streams .
1930	Resolve a stream name by name .
1931	Return a delimited list of valid streams .
1932	Handles a given URL .
1933	Print the loaded plugins .
1934	Authenticate using Twitch .
1935	Load plugins .
1936	Parse command line arguments .
1937	Setup the console .
1938	Sets up the HTTP session .
1939	Load plugins .
1940	Sets up hls - options .
1941	Log current OS versions
1942	Extract stream ID from text .
1943	Extract the video from the given text .
1944	Set an option .
1945	Get an option value .
1946	Set a plugin s value .
1947	Get a plugin s value .
1948	Resolve a URL .
1949	Load a streamlink plugin .
1950	Convert a string into an integer number of seconds .
1951	Validate that string starts with string .
1952	Validate that string ends with string .
1953	Validate that string is contained in value .
1954	Get an attribute from a value .
1955	Apply a function to each item in a dictionary .
1956	Apply a function to each value .
1957	Validate a URL .
1958	Decorator to validate an element .
1959	Find all occurrences of an element .
1960	Find the player s URL .
1961	Parse M3U8 U8U8 .
1962	Determine player name based on command name .
1963	Login to the server .
1964	Extract the stream ID from the given HTML string .
1965	Extract stream_info from html .
1966	Login to login website .
1967	Add a function to the map .
1968	Make an API call .
1969	Start a new session .
1970	Get information about a media .
1971	Create the API .
1972	Compress a string .
1973	Convert a character to a string .
1974	Convert a string to a string .
1975	Read n bytes from the stream .
1976	Return the value of this code .
1977	Return an explanation for this code .
1978	Set the decoding table .
1979	Set the length table .
1980	Print the code to the console .
1981	Read a tuple from the stream .
1982	Return a string describing the explanation .
1983	Return the value at index .
1984	Return the span of the given index .
1985	Return the value at index .
1986	Return the mnemonic for a symbol .
1987	Return the mnemonic .
1988	Compile action table .
1989	Evaluate action .
1990	Make a hexadecimal string from the stream .
1991	Process the stream .
1992	Perform metablock length .
1993	Is uncompressed?
1994	Set block type .
1995	Convert a list of values into an integer .
1996	Read prefix array .
1997	Calculate a monochrome color .
1998	Calculate the polygon of an image .
1999	Convert a DataFrame into an arrow table .
2000	A decorator that patches a function .
2001	Add cartesian coordinates to pmvr .
2002	Add virtual columns to the model .
2003	Return the graphviz representation of the expression .
2004	Compute the counts of the expression .
2005	Apply a function to the DataFrame .
2006	Create a VEX application .
2007	Open a list of files .
2008	Create a table from a SAMP message
2009	Create a Dataset from an astropy table .
2010	Create a DataFrame from one or more arrays .
2011	Convert scalars to numpy arrays .
2012	Create a DataFrame from a Pandas DataFrame .
2013	Read a CSV from a csv file .
2014	Create a VEX server
2015	Generate a Zeldovich file .
2016	Concatenate dfs
2017	Create a column virtual range .
2018	Open a dataset
2019	Evaluate an expression .
2020	Decorator to call a function .
2021	Returns the set of columns that depend on the current selection .
2022	Schedules a task .
2023	Sort the layout .
2024	Get info from a file .
2025	Clears the canvas .
2026	Wait for the last plot to finish .
2027	Open a document
2028	A context manager for writing to a file .
2029	Split arrays into masks and combine them together .
2030	Apply an expression to this RDD .
2031	Compute the first occurrence of an expression .
2032	Calculate the mean of an expression .
2033	Compute the sum of an expression .
2034	Calculate the standard deviation of an expression .
2035	Calculate the covariance of the covariance matrix .
2036	Calculate the minimum value of an expression .
2037	Return the minimum value of the DataFrame .
2038	Calculate the median of an expression .
2039	Plot a widget .
2040	Calculate the number of pixels in the background .
2041	Plot the histogram .
2042	Plot a 3D plot .
2043	Return the dtype of an expression
2044	Get the private directory for this server .
2045	Get the state of the model
2046	Set the table state .
2047	remove virtual meta data
2048	Write the virtual meta data .
2049	Write meta data to a yaml file .
2050	Return True if expressions are contained in expressions_list .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Convert the table to a dictionary .
2055	Return a copy of this DataFrame .
2056	Convert to pandas DataFrame .
2057	Convert the DataFrame to an arrow table .
2058	Convert to an astropy . Table
2059	Add a column .
2060	Renames a column .
2061	Convert cartesian to polar coordinates .
2062	Convert cartesian coordinates to spherical coordinates .
2063	Add virtual columns to polar coordinates .
2064	Add virtual columns to cartesian .
2065	Add a virtual column rotation .
2066	Add virtual columns to cartesian .
2067	Add a cartesian to the plot .
2068	Add a virtual column .
2069	Delete a virtual column .
2070	Add a variable to the table .
2071	Delete a variable .
2072	Return the last n elements .
2073	Display the head and tail of the table .
2074	Describe columns .
2075	Concatenate two sequences .
2076	Set the current row .
2077	Return a list of column names .
2078	Trims all columns in the DataFrame .
2079	Return a new DataFrame with the specified indices .
2080	Extract a subset of the data .
2081	Return samples from the distribution .
2082	Split the array according to the given frac .
2083	Splits the array into chunks .
2084	Sort the Series according to the given criterion .
2085	Return a new DataFrame with modified columns .
2086	Undo the selection .
2087	Redraw a selection
2088	Return whether the selection can be undone .
2089	Selects a boolean expression .
2090	Select rows that are missing .
2091	Return a new DataFrame with missing values .
2092	Selects a rectangle .
2093	Select a bounding box .
2094	Select a circle .
2095	Select an ellipse .
2096	Create a SelectionLasso .
2097	Sets the selection .
2098	Set the selection .
2099	Create a new selection
2100	Finds a valid name .
2101	Return a list of all nodes in the table .
2102	Generates a graphviz representation of the dataframe .
2103	Add a column to the table .
2104	Encode ordinal values .
2105	Return the data for this table .
2106	The length of the array .
2107	Stack DataFrames from another DataFrames .
2108	Concatenate two DataFrames .
2109	Exports the table to an HDF5 file .
2110	Add a new column .
2111	Patch a DataFrame .
2112	Decorator to register a function .
2113	Fill missing values .
2114	Returns the datetime of the dayofweek .
2115	Determine the day of a year .
2116	Return True if x is a leap year .
2117	Return the year of x .
2118	Return the month of x .
2119	Return the month name of the month .
2120	Return the day of x .
2121	Determine the day name of a date .
2122	Return the week of a year .
2123	Determine the day of x .
2124	Return the datetime of x .
2125	Second time series .
2126	Capitalize a string .
2127	Concatenate two strings .
2128	Determine whether a string contains a pattern .
2129	Count the number of occurrences matching a pattern .
2130	Find occurrences of substring .
2131	Get the value at index i .
2132	Find the index of a substring in x .
2133	Convert string to lower case .
2134	Strip a string from a string .
2135	Pad x with padding .
2136	Return a new column .
2137	Find the nearest occurrence of substring .
2138	Find the nearest occurrence of substring in x .
2139	Right - justified string .
2140	Strip a string from a string .
2141	Slice a sequence of strings .
2142	Strip a string from a string .
2143	Return the title of a column .
2144	Convert string to upper case .
2145	Get the autotype of an array .
2146	Convert this object into a numpy recarray .
2147	Write properties to a file .
2148	Write comment to file .
2149	Write a property property .
2150	Iterate properties from a file - like object .
2151	Convert a file - like object into a generator .
2152	Show installed versions
2153	Rename a keyword argument .
2154	Set the fftlib library .
2155	Track the beat .
2156	Estimate the pitch correction .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert a midi to a note .
2161	Convert HZ to MEL
2162	Convert mels to Hz
2163	Calculate FFT frequencies .
2164	Calculates the frequency for a CQT .
2165	Calculate phonon frequencies .
2166	Calculate a weighting based on frequencies .
2167	Calculate time - like timeseries .
2168	Generate samples of data .
2169	Calculate a CQT .
2170	Perform a pseudo - Fourier transform on the data .
2171	An icqt filter .
2172	Compute the FFT filter .
2173	Trims the data stack to n_bins
2174	Compute the response .
2175	Calculate the number of timesample_cutoffs .
2176	Downsampling of a signal .
2177	Calculates the cost of the DW algorithm .
2178	Compute backtracking of DFTs .
2179	One iteration of Viterbi iteration .
2180	Compute the discriminative discriminator function .
2181	Generate uniform transition matrix .
2182	Generate transition loop .
2183	Generate a transition cycle .
2184	Generate a local transition matrix .
2185	Compute the onset envelope .
2186	Compute onset strength .
2187	Determine the onset of an onset .
2188	Estimate onset strength .
2189	r Write times to a csv file .
2190	Write audio data to a WAV file .
2191	Return a colormap .
2192	Plot a waveplot .
2193	Set the current image .
2194	Mesh out the coordinates of the axes .
2195	Check if axes is a matplotlib Axes object .
2196	Scale axes .
2197	Calculate the FFT frequency of fft frequencies .
2198	Calculate the harmonics basis for mel angles
2199	Calculate the frequency of a CQ .
2200	Calculate the coordinates of a chromosome .
2201	Calculate the time of a frame .
2202	Estimate the tuning of a pixel .
2203	Calculate the spectrogram of a spectrogram .
2204	Compute the Hessian of the Hessian .
2205	Compute the harmonic of a signal .
2206	Percussive percussive .
2207	Stretch the time space .
2208	Calculate pitch shift .
2209	Combine an array of intervals .
2210	Return True if signal is non - zero .
2211	Trim data from a signal .
2212	Split data into samples .
2213	Phase oscillator .
2214	Convert amplitude to db .
2215	Compute the spectrogram .
2216	Track beats on percussive component
2217	Decompose a sparse matrix .
2218	Filters a segmented S .
2219	Helper function to compute the spatial filter .
2220	Calculate the lower and upper frequency spectrum of a signal .
2221	Calculate chroma bins for each chromosome .
2222	Convert a float to a float
2223	r Calculate a constant frequency .
2224	r Calculate constant frequency lengths .
2225	Convert CQ to chromosomes .
2226	Calculate the bandwidth of a window .
2227	Get a window of a window .
2228	r Multirate filterbank .
2229	r Calculate the center frequencies and sample frequencies .
2230	Fill x with window_sq .
2231	Calculate the sum of a window .
2232	Apply a diagonal filter to a window .
2233	Compute the spectral centroid of a signal .
2234	Calculate the spectral rolloff .
2235	Compute spectral flatness .
2236	Compute the polynomial coefficients .
2237	Zero crossing rate .
2238	Calculate the chroma spectrogram
2239	r Compute chroma for a CQ file .
2240	Calculate the spectral spectrogram .
2241	Compute the Jaccard distance between two sequences .
2242	Find the nearest match in intervals_to .
2243	Match two intervals .
2244	Match two intervals .
2245	Match two events .
2246	Calculate the salience of a signal .
2247	Interpolate harmonic coefficients .
2248	Calculate the harmonics of the harmonic coefficients .
2249	Symmetric harmonics harmonics
2250	Load audio from audio file .
2251	Load audio from audio file .
2252	Convert audio data to mono .
2253	Resample input to target_sr .
2254	Compute the autocorrelation function .
2255	Calculate the lpc function .
2256	Calculate the click events .
2257	Calculate tone .
2258	Calculate the chirp .
2259	Returns a set of all files in dir_name
2260	Stretch the audio .
2261	Parse command line arguments .
2262	This function is called by the HSS algorithm .
2263	r Compute beat track .
2264	Compute the number of beats in the frame envelope .
2265	Calculate the beat score .
2266	Compute the backlink track for a given period .
2267	Calculate the last beat .
2268	Convert a recurrence matrix into a lag time matrix .
2269	Convert a time series into a recurrence matrix .
2270	Convert a function to a time series .
2271	Subsegment data .
2272	Agglomerative clustering .
2273	Advance the path with a path - increasing window .
2274	Detect onsets of onset times
2275	Generate a single frame .
2276	Validate audio data .
2277	Ensure x is a valid integer .
2278	Pads data to a given size .
2279	Sort an axis by a given axis .
2280	Normalize a vector .
2281	Local maximum of x .
2282	Pick a peak from an array .
2283	Splits rows into sparse matrix .
2284	Roll a sparse matrix .
2285	Convert buffer to float
2286	Convert an index into a slice .
2287	Syncs the data at the given indices .
2288	Create a softmask of X with respect to X_ref .
2289	Return a tiny float .
2290	Write frames to a video file .
2291	Read an image from the buffer .
2292	Get a frame .
2293	Convert frame_dir into frames .
2294	Print the progress bar .
2295	Create a progress bar for the given tasks .
2296	Flip an image .
2297	Rotate an image .
2298	Clip bboxes to img_shape
2299	Scale a bounding box .
2300	Crop an image to bboxes .
2301	Pad an image with padding .
2302	Convert an image to multiple dimensions .
2303	Scale a size .
2304	Resize an image .
2305	Resize an image .
2306	Scale an image .
2307	Register a file handler .
2308	Convert a numerical value to a Priority .
2309	Equivalent to dequantize .
2310	Display an image
2311	Display a list of bounding boxes .
2312	Read a flow from a file .
2313	Write flow data to file .
2314	Compute the dequantize of a flow .
2315	Load a state dictionary from a checkpoint .
2316	Load a checkpoint .
2317	Convert a dictionary of weights to the CPU .
2318	Save a checkpoint to a file .
2319	Initialize the optimizer .
2320	Initialize the logger .
2321	The current learning rate .
2322	Registers a hook .
2323	Run the workflow .
2324	Register training hooks .
2325	Convert a video to another .
2326	Resize a video .
2327	Cut a video .
2328	Concatenate a list of videos into a single file .
2329	Read a prefix from a file .
2330	Read a dictionary from a file .
2331	3x3 convolution with padding
2332	Create an object from a dict .
2333	Read an image from a file .
2334	Read image from bytes .
2335	Write image to file_path .
2336	Convert RGB image to grayscale .
2337	Convert gray to BGR .
2338	Cast an iterable to another type .
2339	Check if a sequence is of expected_type .
2340	Slice a list .
2341	Decorator to check prerequisites .
2342	Calculate the average .
2343	Concatenate a tensor .
2344	Convert a color to a tuple .
2345	Return the current time of a timer .
2346	Starts the timer .
2347	Return the number of seconds since the last call .
2348	Return the amount of time since last check .
2349	Display a flow
2350	Convert flow to RGB .
2351	Make a color wheel .
2352	Compute the accuracy of the target .
2353	Scatter the input tensors .
2354	Scatter inputs and kwargs .
2355	Fetch and return the response .
2356	Return the JSON representation of the object .
2357	Return text as text .
2358	Handle a callback .
2359	Execute multiple requests .
2360	Returns a Request object .
2361	Start the worker .
2362	Normalize a task .
2363	Parse YAML line numbers .
2364	The wheel distribution name .
2365	Returns the basename of the archive .
2366	Add additional requirements .
2367	Convert an egginfo file into a distribution .
2368	Create an Activity object .
2369	Create a message containing suggested actions .
2370	Add an attachment .
2371	Create a list of attachments .
2372	Create an attachment .
2373	Create a trace .
2374	Sets the telemetry client .
2375	Read one or more keys .
2376	Write changes to the store .
2377	Delete the specified keys .
2378	Create an SIS object from the result .
2379	Create a dictionary of attributes .
2380	Sanitize a key .
2381	Create and return db and container .
2382	Get or create a database .
2383	Get or create a container .
2384	Create a Qna event from the query results .
2385	Returns a ConversationReference for the given activity .
2386	Returns the name of the step .
2387	Determines if a channel is supported .
2388	Determines if the channel supports card actions .
2389	Get the channel ID from the turn context .
2390	Return True if the token is a valid token from emulator .
2391	Create a hero card .
2392	Get the parameters of this instruction .
2393	Return a copy of this instance .
2394	Return the inverse of the gate .
2395	Set the control value .
2396	Return a copy of this object .
2397	Convert a string to qasmif
2398	Return a QASP instruction .
2399	Run a circuit .
2400	Perform a pass through the pass_pass method .
2401	Returns a list of all passes in the working_list
2402	Return a dictionary with all the possible flowes .
2403	Factory for the controller .
2404	adds u base
2405	Return the parameters of a single gate .
2406	Compute the rotation matrix of a single gate .
2407	Compute the einsum of the given gate indices .
2408	Calculate the eigenvex product of a gate .
2409	Helper function to create Einsum matrix .
2410	Convert a circuit into DAGCircuit .
2411	fit function to exp
2412	Function to fit an objective function
2413	Plot the coherence function .
2414	Determine the mean and standard deviation .
2415	Plot the RIFF data .
2416	Split a list of runs according to parameters .
2417	Compose the eigenvalue of a 3D unit sphere .
2418	Convert YYZ to ZYZ .
2419	Validate input state .
2420	Trim an image .
2421	Return the span of the gate .
2422	Convert a circuit to an instruction .
2423	Run the Transpiler .
2424	Return a subset of the adjacency matrix .
2425	Create a new Barrier .
2426	Calculate the average of observed data .
2427	Process a bit id .
2428	Process a custom unitary node .
2429	Processes a gate .
2430	Process CNOT expression .
2431	Process a measure node .
2432	Process if node .
2433	Create a DAG op .
2434	Return the duration of the given channels .
2435	Return the start time of a channel .
2436	Return the time of a channel .
2437	Iterate over all instructions in the scheduler .
2438	Check that the value is of the expected type .
2439	Recursively dump additional data
2440	Load additional data
2441	Create a validation schema .
2442	Validate a model .
2443	Decorator to validate a shallow schema .
2444	Return a dict representation of the model .
2445	Load a model from a dictionary .
2446	Compute the Fourier Transform .
2447	Compute a partial trace vector .
2448	Vectorize a density matrix .
2449	De - vectorize a matrix .
2450	Convert a polynomial into a polynomial matrix .
2451	Takes an array and chop it up to epsilon
2452	Compute the outer product of two vectors .
2453	Compute the concurrence of a quaternion .
2454	Compute Shannon entropy of a vector .
2455	Compute Shannon entropy .
2456	Compute mutual information of a state .
2457	Compute the entanglement of a state - vector .
2458	Compute EOF qubit
2459	Flatten a schedule .
2460	Shift a schedule by time .
2461	Insert a child into a schedule .
2462	r Add a child to the parent .
2463	add an u3 gate
2464	Return the status of the backend .
2465	Start the simulation .
2466	Returns the time remaining in the current iteration
2467	Disassemble a QObject into a circuit .
2468	Compute hamming distance between two strings .
2469	Create a quaternion from an axis .
2470	Create a quaternion from an Euler angles .
2471	Normalize the quaternion .
2472	Convert to a 3D matrix .
2473	Convert the euler angles to z z - z z - z z - axis
2474	Calculate the number of elements in the data .
2475	Plot a histogram of data .
2476	Make sure the value is a collection of items .
2477	Check that the index is within the bounds .
2478	Check if a matrix is square .
2479	Check if a matrix is a diagonal .
2480	Return True if op is symmetric .
2481	Check if matrix is a Hermitian matrix .
2482	Determine if a matrix is positive .
2483	Check if a matrix is an identity matrix .
2484	Check if matrix is a unitary .
2485	Convert the input data to a channel .
2486	Convert the input to superop .
2487	Convert the input data to kraits .
2488	Convert input to Chi
2489	Convert the input into a PLM .
2490	Convert data to Stinespring
2491	Convert data to operator .
2492	Convert operator to operator .
2493	Convert input data into operator representation .
2494	Convert input data to choi .
2495	Convert data to superop .
2496	Convert a Kraus matrix into a polynomial .
2497	Convert input data to kraits .
2498	Convert a list of stines to kraus coordinates .
2499	Convert a tensor to a polynomial .
2500	Convert data to stines .
2501	Compute the superop of the Kraus operator .
2502	Convert input data to choi representation .
2503	Convert input data tochi .
2504	Rearvel squares .
2505	Transform data from a Pauli matrix .
2506	Checks input_dim and output_dim .
2507	Hide ticklines and labels .
2508	Set the label convention .
2509	Clears all points .
2510	Add one or more vectors .
2511	Add an annotation .
2512	Render the figure .
2513	Plot front .
2514	Display the plot .
2515	Calculate the two - qubit KAN decomposition .
2516	Return a string representing the top .
2517	The middle part of the layer .
2518	Return the bot s bot .
2519	The length of the sequence .
2520	Return the parameters for a label instruction .
2521	Returns a label for the instruction .
2522	Return a latex representation of the parameter .
2523	Compile a circuit .
2524	Filter deprecation warnings .
2525	Return local hardware information .
2526	Checks if the given hostname is a connection
2527	Check the status of a job .
2528	Create a constant vector .
2529	Calculate the square root of an array .
2530	Calculate the complex triangle .
2531	Calculate the cosine of the given times .
2532	r Fix the gaussian width .
2533	r Creates a Gaussian and returns it .
2534	Gaussian derivative
2535	r Create a square of timeseries .
2536	Default pass manager .
2537	Default pass manager .
2538	Return True if the given register has the given register .
2539	Return a copy of the circuit .
2540	Return the inverse of the circuit .
2541	Append an instruction onto the stack .
2542	Add an instruction .
2543	Add a new register .
2544	Check for duplicate arguments .
2545	Check if qargs are valid
2546	Check that the Cargs are valid .
2547	Check that the circuit registers are compatible .
2548	Returns a string representation of the QR code .
2549	Draw circuit .
2550	The number of gate operations .
2551	The total width of the QR code .
2552	Count the number of ops in this instruction .
2553	The number of connected components .
2554	Bind parameters to a circuit .
2555	Bind a parameter to a value .
2556	Plot a pulse drawer .
2557	Perform a forward n - axis search .
2558	Map free gates to free gates .
2559	Calculate the distance between all qubits .
2560	Calculate the number of gaps in a step .
2561	Copy metadata from source_dag into a DAG .
2562	Transform a QR gate into its equivalent form .
2563	Create a DAGNode from an edge .
2564	Run Transpiler .
2565	Add a physical qubit .
2566	Add an edge to the graph .
2567	Return a subgraph of the given nodes .
2568	List of physical qubits .
2569	Determines if the graph is connected .
2570	Compute the distance matrix .
2571	Calculate the distance between two qubits .
2572	Compute the transpile of a circuit .
2573	Add a cu1 gate .
2574	Inverse the instruction .
2575	Apply q_ifs to each gate .
2576	Change the value of the circuit .
2577	Subscribe to an event .
2578	Dispatch an event .
2579	Unsubscribe a callback .
2580	Publish an event .
2581	Initialize the registers .
2582	Defines the initial gate .
2583	Compute the gates to uncompute the qubits .
2584	Calculate the angles of a single complex .
2585	Multiplexing circuit .
2586	Return True if value is a virtual value .
2587	Return a shallow copy of the layout .
2588	Combine two layouts into an edge map .
2589	Add a toffoli gate .
2590	Insert a schedule into the schedule .
2591	Raise TranspilerAccessError if name is not fenced .
2592	Convert a list of gates into a matrix .
2593	Run Transpiler .
2594	Update layer layout .
2595	Creates a Pauli operator .
2596	r Create a Pauli matrix from a label string .
2597	Initialize from boolean values .
2598	r Root of the Pauli operator .
2599	Convert to an operator .
2600	Generate an instruction .
2601	Update the z - axis .
2602	Update the x .
2603	Insert a Paulis into the tensor .
2604	Append a Paulis .
2605	Delete the given indices .
2606	Generate a boolean mask .
2607	Create a Pauli operator .
2608	Get the outcome of a qubit .
2609	Add a sample_params .
2610	Add a QASM measurement .
2611	Reset a qubit .
2612	Validate the initial state vector .
2613	Initialize the initial state vector .
2614	Get the state vector .
2615	Validate the measurement .
2616	Run a job .
2617	Run a job .
2618	Validate the circuit .
2619	Validate the initial unitary .
2620	Initialize the unitary matrix .
2621	Get unitary .
2622	Run a job .
2623	Validate the circuit .
2624	Return True if obj is a bit value .
2625	Run the transpiler .
2626	Return True if the interval has overlap .
2627	Shift the interval by a given time .
2628	Shift a given time .
2629	Return the start time of a channel .
2630	Return the stop time for the given channels .
2631	Checks if the given timeslots are mergeable .
2632	Merge another TimeslotCollection into a new one .
2633	Shift the timeslot by a given time .
2634	Report the comment on a commit .
2635	Process the data into a dictionary .
2636	Plot the state of the state machine .
2637	Add a RZ gate .
2638	Swap two tiers .
2639	Initialize backend_prop .
2640	Create the program graph .
2641	Select the next edge of the program .
2642	Select the cost of the gate .
2643	Select the best qubit .
2644	Run the program .
2645	Returns a list of instruction instructions .
2646	Inverse of the gate .
2647	Apply q_ifs to each gate .
2648	Change the value of the circuit .
2649	Check if the data is a unitary .
2650	 conjugate operator .
2651	Transpose operator .
2652	Return the power of the operator .
2653	Return the shape of the output .
2654	Convert an Instruction to an Operator .
2655	Swap Mapper layer update .
2656	Separate a bitstring into parts .
2657	Formats a level zero memory .
2658	Formats a level 1 memory array .
2659	Format a list of memory counts into memory .
2660	Format counts into a dictionary .
2661	Format a state vector .
2662	Formats a sparse matrix into a matrix .
2663	Decorator to ensure the job is submitted .
2664	Submit the job .
2665	Return the job status .
2666	Determines if the filter is inclusive .
2667	Plot the bloch .
2668	Get the qubit frequencies for the given channel .
2669	Get the measurement frequencies from the user - supplied config .
2670	Apply the circuit to the given dag .
2671	Plot the qsphere .
2672	Determine the number of k - th k choices .
2673	Compute the lex index of a list .
2674	Plots a bar chart .
2675	Returns a list of all available hardware backends .
2676	The op node .
2677	Sample a constant pulse .
2678	Create a new zero pulse .
2679	Create a SamplePulse .
2680	Create a SamplePulse .
2681	Create a SamplePulse .
2682	Calculate the cosine pulse .
2683	Calculate the sin pulse .
2684	r Sampling .
2685	r Samples of Gaussian derivative .
2686	Create a SamplePulsePulse .
2687	Calculate the distance of the real .
2688	Return a string representation of the QR code .
2689	Instantiate a backend instance .
2690	Renames a new register .
2691	Removes all ops with the given opname .
2692	Add a quantum register .
2693	Add a classical register .
2694	Add a wire .
2695	Check that the condition is valid .
2696	Return all bits in a condition
2697	Add a DAG node .
2698	Apply an operation back to the DAG .
2699	Checks if the given edge map is correct
2700	Check validity of wire_map .
2701	Map condition to wire_map
2702	Extend the given dag .
2703	Compose a DAGCircuit .
2704	Check the validity of a list of wires .
2705	Make the prediction map for a node .
2706	Compute the full prediction map for the input circuit .
2707	Return the topological sort of a multi - graph .
2708	Iterate over the edges of a multi - graph .
2709	Return a list of all nodes of op .
2710	All gate nodes .
2711	Return a list of all nodes with the given names .
2712	The two q gates .
2713	Return all predecessors of a node .
2714	Returns the predecessors of the given node .
2715	Return all ancestors of a node .
2716	Return the successors of a quantum register .
2717	Remove an op node .
2718	Remove all ancestors of a node .
2719	Remove all descendants of a node .
2720	Remove all ancestors of a node .
2721	Remove all descendants of a node .
2722	Returns a DAGCircuit .
2723	Generate serialization layers .
2724	Return the multigraph layers .
2725	Return a set of all runs in the graph .
2726	Iterate over the nodes on the given wire .
2727	Count the number of operations in the topological order .
2728	Summary of the tensor .
2729	Create a tomography basis .
2730	Implements Pauli matrices .
2731	Create a tomography set .
2732	Process a tomography set .
2733	Create tomography circuit .
2734	Generate data from tomography results .
2735	Calculates the marginal counts for the given counts .
2736	Fit the tomography data .
2737	Calculates the Least - squares fitting of the given data .
2738	Projection onto a basis set
2739	Compute the linear inverse of the linear system .
2740	Compute the eigenvalue of the eigenvalue
2741	Calculate Wigner data .
2742	Measure the gate .
2743	Run a text checker .
2744	Monitor the status of a job .
2745	Calculate the euler angles of a unit sphere .
2746	Simplify U and Z gate .
2747	Run the QR code .
2748	Generate a table showing the qubit information .
2749	Display job history .
2750	Plot the job history .
2751	Generate a pulse .
2752	Add a cu3 gate .
2753	Build a Bell circuit .
2754	Compute the transpile of a circuit .
2755	Compute the transpile circuit .
2756	Execute multiple experiments .
2757	The drive channel .
2758	The control channel .
2759	The measure channel .
2760	The acquire channel .
2761	Compute input state .
2762	Assemble one or more experiments .
2763	Unset the Qiskit log .
2764	Plot the Hinton state .
2765	Process the difference between two channels .
2766	Sets the input .
2767	Pop a stack from the stack .
2768	Push a file to the stack .
2769	Run DAG on the given dag .
2770	Returns the bound method for the given instruction .
2771	Convert an acquire instruction into a dictionary .
2772	Convert a frame change instruction to a QObject .
2773	Convert a persistent value to an instruction .
2774	Convert a drive instruction to a QObject .
2775	Convert a snapshot instruction .
2776	Update the annotations of a pulse .
2777	Generate a sampling function .
2778	Filter a list of backends .
2779	Resolve a backend name .
2780	Convert a dag into a QuantumCircuit .
2781	Turn a matrix observable into a dictionary .
2782	Update the symbol .
2783	Verify that the gate is declared .
2784	Verify that the expression is valid .
2785	Verify that the object is a gate or gate .
2786	Verify that the register is correct
2787	Verify that an object is valid .
2788	Find the next column in the input string .
2789	Set debug value .
2790	Parse the given data .
2791	Parse the given data .
2792	Parse the YAML file .
2793	Add a crz gate .
2794	Convert a string into a basis set .
2795	Projection onto the projector .
2796	Calculate the purity of a state .
2797	Run the dag .
2798	Generate HTML for a backend .
2799	Update the status of the backend .
2800	Generates a layout for the jobs pending .
2801	Run the CX .
2802	Get a backend by name .
2803	The shape of the input .
2804	Given a list of bit_labels return a tuple of indices .
2805	Truncate a float .
2806	Generate a latex file .
2807	Calculates the depth of each column in the image .
2808	Calculate the height of the Beamer page .
2809	Load a JSON Schema from a file .
2810	Get a validator .
2811	Load schema and validators .
2812	Validate a JSON dict against a schema .
2813	Helper function to format error messages .
2814	Return the majority of a node .
2815	Unmajority .
2816	Generate a latex source from a circuit .
2817	Create a matplotlib drawer .
2818	Return a random unitary operator .
2819	Return a random density matrix .
2820	Generate a GIBRE matrix .
2821	Random density matrix .
2822	Random density matrix .
2823	Returns a list of call names .
2824	Return the power of this operator .
2825	Compute the subsystem of this subsystem .
2826	Convert an instruction into a SuperOp object .
2827	Run the DAG .
2828	Convert a circuit into a QObject .
2829	Apply the decomposition of the given dag .
2830	Run the gate on the gate .
2831	Defines the gate .
2832	Make sure the value is a collection type .
2833	Check if value is valid .
2834	Set the atol .
2835	Set rtol .
2836	Reshapes the input_dims .
2837	The input dimensions .
2838	Determines the output dimensions .
2839	Return a shallow copy of the dataset .
2840	Returns a new QInstance with the specified number of elements .
2841	Determine the correct dimensions .
2842	Multiply a tensor .
2843	Deserialize value .
2844	Serialize the value .
2845	Check the type of the field .
2846	Compute the fidelity between two states .
2847	Svd decomposition
2848	Return the inverse of this snapshot .
2849	Set the label .
2850	Determines if the QR code is unitary .
2851	Convert to operator .
2852	Convert this circuit into an instruction .
2853	Initialize the transformer .
2854	Sort enum by symbol name .
2855	Patch strptime .
2856	Returns an OrderedDict mapping the given languages .
2857	Return a generator for all the available locales .
2858	Check if a list of tokens are valid .
2859	Split a string into parts .
2860	Parse a date string .
2861	Parse a date string .
2862	Determines if a date string is applicable .
2863	Translates a date string .
2864	Parse a date string .
2865	Generate an AMMO generator .
2866	Convert exception information to network error code .
2867	Convert exception information to HTTP exception .
2868	Read the configuration from the config file .
2869	Compose the phantom configuration .
2870	Get info about all streams
2871	Compose the stepper configuration
2872	Log stdout and stderr .
2873	Expand a time string into an integer .
2874	Read StepperWrapper .
2875	publish the stepper
2876	Generate a StPD file .
2877	Read the cached stepper info .
2878	Write the cached options to disk .
2879	Make STPD file .
2880	Create a Composite .
2881	Return the rps at time t .
2882	Execute a command .
2883	Decodes monitoring data .
2884	Create a list of points for a label
2885	Publish a key .
2886	Count the number of matched codes .
2887	Stop the pool .
2888	Loop through the scheduler .
2889	Initialize logging .
2890	Add user options .
2891	Configure the configuration .
2892	Shutdown the plugin .
2893	Collect data from the queue .
2894	Notify listeners
2895	Get a marker type .
2896	Parse a duration .
2897	Start the agent on the remote host .
2898	Start the remote agent .
2899	Find the JMeter UDP port .
2900	Add JMX components .
2901	Terminate the process .
2902	Read the stats from the given lines .
2903	Create a criterion from a string .
2904	Load monitoring configuration from a file .
2905	Create the startup config file .
2906	Check if the local disk is available
2907	Check if memory is available
2908	Get terminal size .
2909	Get right line from widget output
2910	Truncate the given line array .
2911	Render the left panel .
2912	Render the screen .
2913	Add an info widget .
2914	Return the rectangles for each line .
2915	Return the length of a given line .
2916	Create a load plan .
2917	Returns the level as a string .
2918	Add an info widget
2919	Make a request to the writer .
2920	Load all the plugins .
2921	Return the first plugin of the given class .
2922	Return a list of all plugins of the given class .
2923	Collect a file .
2924	Add an artifact file to the collection .
2925	Create a temporary file .
2926	Load config files .
2927	Write the configuration to disk .
2928	Get all the options from a section .
2929	Find all sections that start with prefix
2930	Decode the stats from a chunk .
2931	Return the info of the phantom .
2932	Prepare the monitoring agent .
2933	Poll for agents .
2934	Send data to all listeners .
2935	Detect telegraf configuration .
2936	Handle the data items in a dict
2937	Decodes the data into a list of results .
2938	Subscribe to a stream .
2939	Start listening for events .
2940	Close the stream .
2941	Perform a single request .
2942	Submit an order .
2943	Get an order by id .
2944	Get a position by symbol
2945	List assets .
2946	Get asset by symbol
2947	Creates a sub - plan .
2948	Validate a dict parameter .
2949	Get a dict parameter from a dict .
2950	Construct an event logger .
2951	Construct a JSON event logger .
2952	Read configuration from a file .
2953	Return the configuration for a repository .
2954	Format a configuration dictionary into a pretty printable string .
2955	Get a pipeline by name .
2956	Get all pipelines .
2957	Get next event from queue .
2958	Execute a pipeline through a pipeline .
2959	Waits for all processes .
2960	Factory to create a field .
2961	Build an ExecutionPlan .
2962	Build a pipeline .
2963	Build a sub - pipeline .
2964	Get a solid pipeline by name .
2965	Construct the list of publish commands .
2966	Set a new release .
2967	Creates a pipeline context definition .
2968	Create an input selector .
2969	Create an output selector schema .
2970	Block the given text .
2971	Download file from S3 .
2972	Upload file to S3
2973	Context manager to ensure a user code error is raised .
2974	Make a directory p .
2975	Creates a context manager for a user code block .
2976	Create a DagsterLog object .
2977	Return True if all steps have been completed .
2978	Return whether the step is skipped .
2979	Return transformed values .
2980	Get the transformed value .
2981	Return the data for a step failure .
2982	A decorator that returns a class that defines a configuration dictionary .
2983	Return True if config value is a valid dataset .
2984	Return True if the given config value is valid .
2985	Execute the core transform .
2986	Decorator to wrap an existing type .
2987	Create a resource definition .
2988	Create an event v2 .
2989	Coalesces the execution steps into the same order .
2990	Get connection parameters .
2991	Create a new connection to the database .
2992	Create a new Cursor .
2993	Closes the database .
2994	Make a model from a model dict .
2995	Convert the model to a list .
2996	Return the form field .
2997	Convert a value into a model .
2998	Apply filters to the queryset .
2999	Compute the nfps .
3000	Compute the nfps .
3001	Compute the best partition for each set of sizes .
3002	Return a list of optimal optimal partitions .
3003	Calculate c and c .
3004	Initialize the slots .
3005	Return the size of the seed .
3006	Serializes the MinHash .
3007	Deserialize a LeanMinHash from a buffer .
3008	Update the hashvalues using the hash function .
3009	Merge the minHash functions into the hash functions .
3010	Create a new MinHash .
3011	Index a set of entries .
3012	Yields all keys matching minhash and size
3013	Calculate the minimum hash of a sample .
3014	Remove a key from the cache .
3015	Update the accumulator .
3016	Compute the number of samples in the regression .
3017	Merge two HyperLogLogs .
3018	Clear the regressor .
3019	Compute the K - K - K - K - K - K - K - K - K - K - K - K - K - K - 1 .
3020	Compute the mean of the predicted data .
3021	Index all the hashes .
3022	Return a list of all the permutations that satisfy minhash .
3023	Close the cache .
3024	Storage for storage .
3025	Unordered storage .
3026	Return the user details .
3027	Add a social login .
3028	Select the most common subset of text .
3029	Parse a scoped_selector .
3030	Parse a statement .
3031	Parse the value .
3032	Advance one line to the next line .
3033	Parse a configurable reference .
3034	Augment an exception with a message .
3035	Convert a string to markdown format .
3036	Run after a create session .
3037	Ensure a function is wrapped in a decorator .
3038	Decorate a function or class .
3039	Format a value .
3040	Clears the configuration .
3041	Bind a binding parameter .
3042	Query the configuration parameter .
3043	Check if a function has a parameter .
3044	Get the argspec for a function .
3045	Get the names of positional parameter names .
3046	Get all positional parameter names .
3047	Get the default values for a function .
3048	Return a new scope .
3049	Decorator to configure a function .
3050	Return a string representation of the operative configuration .
3051	Parse a configuration string .
3052	Register a file reader .
3053	Parse a config file .
3054	Parses config files and binds them to a list of strings .
3055	Parse a configuration value .
3056	Finalize the configuration .
3057	Recursively iterate over a list of values .
3058	Iterate over all config values .
3059	Set a constant .
3060	Create a constant class from an enum .
3061	Return a list of selectors matching a partial selector .
3062	Get all matches for partial_selector .
3063	Return the full selector for a complete selector .
3064	Convert a query into a string .
3065	Parse the Retry - After header .
3066	Validate value .
3067	Return a property as a dictionary .
3068	Set value .
3069	Get a thing by index .
3070	Initialize things .
3071	Set default headers .
3072	Check if the request is allowed .
3073	Get a thing .
3074	Called when a message is received .
3075	Post a thing .
3076	Delete a thing .
3077	Start the server .
3078	Return the action as a dictionary .
3079	Start the action .
3080	Mark the progress .
3081	Return the event as a dict .
3082	Get the IP address .
3083	Return a list of IPv4 addresses .
3084	Set value .
3085	Notify an external update .
3086	Return a thing description .
3087	Set href prefix .
3088	Return the property descriptions as a dictionary .
3089	Returns a list of descriptions describing the action .
3090	Returns a list of the event descriptions for the given event .
3091	Add a property .
3092	Remove a property .
3093	Get the value of a property .
3094	Returns the properties as a dictionary .
3095	Set a property value .
3096	Get an action by name .
3097	Add an event .
3098	Add a available event .
3099	Perform an action .
3100	Remove an action .
3101	Add a available action .
3102	Remove a subscriber .
3103	Add an event subscriber .
3104	Remove an event subscriber .
3105	Notify the property status
3106	Notify the action status .
3107	Notify the event .
3108	Add annotations to the model .
3109	Update the model .
3110	Bulk insert .
3111	Create a new record .
3112	Insert and return a new model .
3113	Build a Postgres insert compiler .
3114	Check if a field is a magical field .
3115	Returns the list of fields to insert into the database .
3116	Called when a model is saved .
3117	Called when a model is deleted .
3118	Create a case where the given fields are not None .
3119	Returns a HStoreValue with the given expression .
3120	Return the SQL statement as SQL .
3121	Create a clone of this table .
3122	Add a join condition .
3123	Checks if a field name is a HStoreField .
3124	Insert values into the table .
3125	Creates a required constraint for a given field .
3126	Rename hstore_required .
3127	Drop a required constraint .
3128	Returns a constraint name for a constraint .
3129	Add the condition to the model .
3130	Create a Command object .
3131	Return the base class .
3132	Create the hstore extension .
3133	Prepare the value for processing
3134	Returns the form of the query .
3135	Return a list of SQL statements to insert into the database .
3136	Rewrite insert action .
3137	Rewrite the insert statement .
3138	Rewrite INSERT statement to SQL
3139	Build conflict target .
3140	Get model field by name .
3141	Formats a field name in the database .
3142	Formats the field value into a string .
3143	Create a unique constraint .
3144	Rename a hash constraint .
3145	Drop a unique constraint .
3146	Generate a unique constraint name .
3147	Iterate over unique keys .
3148	Add a condition .
3149	Return the SQL for this query .
3150	Calculate the Tdist95 confidence level .
3151	Compute the pooled sample variance of samples .
3152	Compute tscore between samples .
3153	Determine whether sample1 is significant .
3154	Sort a list of roots .
3155	Generator for n queens .
3156	Play a board .
3157	Select the next child .
3158	Move a random game .
3159	Remove benchmarks from benchmarks .
3160	Expand benchmarks by name .
3161	Generate a list of strings .
3162	Initialize benchmarks .
3163	Returns the domain of the ellipse .
3164	Fetch messages from a channel .
3165	Parse the posts .
3166	Fetch a user .
3167	Fetch a specific category .
3168	Fetch rss entries at feed .
3169	Setup the command argument parser .
3170	Fetch the given category .
3171	Retrieve bugs for a given date .
3172	Retrieve comments for a bug .
3173	Get the history of a bug .
3174	Retrieve attachments for a bug .
3175	Get the notes for an issue .
3176	Fetch merge requests .
3177	Gets a list of all the notes for a merge .
3178	Get the merge versions of a merge .
3179	Retrieves a list of merged merge items .
3180	Retrieve a merge .
3181	Fetch versions of a merge .
3182	Get the merge version of a merge .
3183	Fetch notes for a given item .
3184	Retrieve an emojis .
3185	Retrieve a list of all the items for a given item .
3186	Calculate the amount of time to reset .
3187	Fetch items from GitLab .
3188	Initialize the rate limit
3189	Setup the command argument parser .
3190	Fetch messages for a given category .
3191	Get the nickname of a metadata item .
3192	Get the number of members of a conversation .
3193	Get channel information .
3194	Fetches information about a user .
3195	Setup the command argument parser .
3196	Get the datetime of a metadata item .
3197	Parse a buglist from a csv file .
3198	Parse the bug details .
3199	Parse the bug activity .
3200	Logout from Bugzilla .
3201	Returns the metadata for the Bugzilla server .
3202	Retrieves a bug list from the server .
3203	Retrieve bug information .
3204	Get the activity of a bug .
3205	Fetch events .
3206	Fetch events from a group .
3207	Fetch all events from a group .
3208	Retrieve comments for a group .
3209	Retrieve RRSVPS for a particular event .
3210	Fetch a question
3211	Fetch comments for a question .
3212	Build a question object from an answer
3213	Fetch questions from the API .
3214	Get HTML question .
3215	Retrieve comments for a post .
3216	Parse a question container .
3217	Parses an answer and returns a list of answers
3218	Parse the number of html pages .
3219	Parses user info .
3220	Fetch reviews for a given category .
3221	Parse reviews into a list of strings
3222	Fetch grit 28 .
3223	Get the server version .
3224	Get the reviews for the last item .
3225	Return the next group item .
3226	Execute a command .
3227	Execute a command from the archive .
3228	Execute a command from remote .
3229	Sets up the command line arguments .
3230	Fetch an issue .
3231	Fetch attachments for an issue .
3232	Fetch messages from an issue .
3233	Fetch activities for an issue .
3234	Fetch user data .
3235	Get a user by name .
3236	Get a specific issue .
3237	Fetch a bug collection .
3238	Returns the URL for the project .
3239	Fetch the items from the API .
3240	Get all subscriptions from groupsio API .
3241	Find the group ID
3242	Perform a GET request .
3243	Setup the command argument parser .
3244	Generate a unique uuid .
3245	Fetch a single backend .
3246	Fetch files from an archive .
3247	Find all backends for a given top_package .
3248	Fetch metadata for a given category .
3249	Fetch metadata from an archive .
3250	Filter classified data .
3251	Parse arguments .
3252	Set the authentication arguments .
3253	Add the arguments to the archive .
3254	Set the output arguments .
3255	Main entry point .
3256	Initialize the archive manager .
3257	Get the datetime of a metadata item .
3258	Parse a mbox file .
3259	Fetch and parse messages from a mailing list .
3260	Copy a mbox to a tempfile
3261	Validate a message .
3262	Convert a dictionary to a dictionary .
3263	Get a message from the file .
3264	Fetch the items from the database .
3265	Fetch commits from the repo .
3266	Parse a git log file .
3267	Set up git path .
3268	Setup the command argument parser .
3269	Parse the stream .
3270	Clone a repository .
3271	Count the number of objects in this repository .
3272	Determine if this repository has a symbolic ref .
3273	Update the Git repository .
3274	Synchronize the repository .
3275	Get the rev - list of all branches .
3276	Get the log of this repository .
3277	Executor for globus show
3278	Fetch a ref from the remote repository .
3279	Get the commits from a Packet .
3280	Update refs .
3281	Find git refs for this repository .
3282	Update a ref
3283	Run a command .
3284	Read the stderr from the proc .
3285	Run a git command .
3286	Fetch a given category .
3287	Fetch items from the API .
3288	Retrieve a list of tweets from the API .
3289	Sets up the command line arguments .
3290	Fetch a specific category .
3291	Fetch the items for a given category .
3292	Parse the hits from Google Search API .
3293	Fetch hits for given keywords .
3294	Get the updated_on_on of a metadata item .
3295	Determine the category of metadata .
3296	Fetch pull requests .
3297	Fetch repo info
3298	Get all the reactions for an issue .
3299	Get the reactions for a comment comment .
3300	Returns a list of all assigned assignments for the issue .
3301	Get the user s reviews for a pull request .
3302	Get hashes of pull commits for a given PR number .
3303	Get the reactions for a pull review comment .
3304	Get a user s information .
3305	Get all the repos for an issue .
3306	Retrieve issues for a given date .
3307	Iterate over pull requests .
3308	Return the repository name .
3309	Fetch the reviews for a given pull .
3310	Fetch commits for a given PR number .
3311	Retrieve the reactions for a pull review comment .
3312	Get a user by login name .
3313	Get the orgs for a given login .
3314	Get the rate limit
3315	Get the rate limit for each token .
3316	Choose the best api token .
3317	Check if the rate limit is reached .
3318	Update the current rate limit .
3319	Initialize the metadata table .
3320	Store an entry in the archive .
3321	Retrieve an entry from the archive .
3322	Create a new archive .
3323	Make a hash of the given uri and headers .
3324	Verify the integrity of the archive .
3325	Load metadata from archive .
3326	Count the number of rows in a table .
3327	Create an archive .
3328	Remove an archive .
3329	Search for archived archives .
3330	Searches for archived archives .
3331	Search for all files in the directory .
3332	Return the file type of a compressed file .
3333	Generate a range of months between two dates .
3334	Convert a message into a dictionary .
3335	Remove illegal characters from XML string .
3336	Convert an XML string into a dictionary .
3337	Parse issues from json .
3338	Retrieve issues for a given date .
3339	Get information about an issue .
3340	Get a user by ID .
3341	Make a request to the API .
3342	Fetch data from the hub .
3343	Fetch data from the repository .
3344	Get the contents of a repository .
3345	Map custom fields to values
3346	Remove custom fields from fields .
3347	Parses issues from a page
3348	Fetch issues from a given URL .
3349	Get all issues from a given date range .
3350	Get comments for an issue .
3351	Retrieves the list of field names .
3352	Fetch a specific category .
3353	Get all jobs from Jenkins .
3354	Get all builds for a given job .
3355	Parse questions from raw_page
3356	Get questions from the API .
3357	Sets up the command line arguments .
3358	Fetch reviews for a given category .
3359	Get the earliest timestamp for the given reviews .
3360	Fetch pages from the API .
3361	Get all pages
3362	Get the most recent changes .
3363	Fetch messages .
3364	Parse a JSON string and yield messages .
3365	Return True if the message matches the given chats .
3366	Retrieve a list of updates .
3367	Fetch the articles of a group .
3368	Add metadata to item .
3369	Parse an article from a string .
3370	Fetch data from a remote server .
3371	Fetch an article
3372	Fetch data from remote .
3373	Fetch data from the archive .
3374	Create an HTTP session .
3375	Sets the rate limit handler .
3376	Waits until rate limit is reached .
3377	Update the rate limit .
3378	Parse supybot log file .
3379	Retrieve the list of archives from the given date .
3380	List all subsybot archives
3381	Parse the stream .
3382	Parse supybot_timestamp .
3383	Parse supybot message .
3384	Fetch topics at the given category .
3385	Parses the topics page into a list of topics .
3386	Get information about a topic .
3387	Post a post .
3388	Fetch all tasks in the given category .
3389	Parse all the tasks in a json response .
3390	Parse all the users into a list of tuples .
3391	Iterate over all tasks in a given date .
3392	Retrieve transactions for a given pids .
3393	Retrieve user information .
3394	Sets a list of phids .
3395	Make a call to the Conduit API .
3396	Generate metadata id from metadata .
3397	Parse the contents of the contents of the contents .
3398	Retrieves the contents of the server .
3399	Get historical content for a given content .
3400	Parses the result .
3401	Returns the URL for the capabilities endpoint .
3402	Read credentials from a given URL .
3403	Read a string from a string .
3404	Parses the result from the results .
3405	Build the base URL .
3406	Retrieves the elements of a complex type .
3407	Construct a GeoJSON Schema from a list of elements .
3408	Generates a description URL for a feature type .
3409	Execute a complex input with complex data
3410	Gets the movie list .
3411	Gets a list of TVTV_list .
3412	Gets a list of movies .
3413	Retrieves the information for a project .
3414	Gets the alternative titles .
3415	Gets the credits for this project .
3416	Gets the external ids for the project .
3417	Gets the keywords .
3418	Retrieve recommendations .
3419	Gets release dates .
3420	Retrieve releases for a project .
3421	Gets the translations for a project .
3422	Gets similar movies .
3423	Gets the reviews for this project .
3424	Gets a list of changes .
3425	Retrieve upcoming requests .
3426	Gets the current playing state .
3427	Retrieve the popular files .
3428	Retrieves the top rated items from the API .
3429	Gets the account states .
3430	Sets the rating .
3431	Gets movie credits .
3432	Gets the TV credits for the authenticated user .
3433	Retrieve information about a credit_id .
3434	Retrieve the TV .
3435	Retrieves information about a project .
3436	List movie_list .
3437	Retrieves the session information .
3438	List movie movies .
3439	Creates a new token .
3440	Validate and validate a token .
3441	Creates a new session .
3442	Creates a new guest session .
3443	Gets the rated movies .
3444	Gets the status of the item .
3445	Create a new list .
3446	Remove an item from the session .
3447	Clears the list .
3448	Gets the content ratings for the specified resource .
3449	Gets similar documents .
3450	Gets the current air .
3451	Retrieve information about a series .
3452	Retrieve credits for a season .
3453	Retrieve external ids for a particular season .
3454	Retrieve information about a particular season .
3455	Retrieve credits for a particular season .
3456	Retrieve external ids .
3457	Sets the attributes to a dictionary
3458	Retrieve a movie .
3459	Retrieve a collection .
3460	Retrieves the TV .
3461	Retrieve a person .
3462	Gets the company s company information .
3463	Gets a keyword .
3464	Retrieve multiple documents .
3465	Normalize a string .
3466	Takes a list of refs and counts the number of ngrams .
3467	Take a reference sequence and return a tuple of n - tuples .
3468	Calculate the erfcc coefficient .
3469	Align two texts .
3470	r Iterate through all descriptors in a module .
3471	Register a JSON object .
3472	r Registers a descriptor .
3473	Print s to stdout .
3474	r Check if a descriptor is a class .
3475	Convert to JSON
3476	The coordinate of this descriptor .
3477	r Calculate the surface area of an atomic system .
3478	r Calculate surface area .
3479	r Create a molecule from a molecule .
3480	Create a descriptor from a JSON object .
3481	r Fill with missing values .
3482	r Drop missing values .
3483	r Returns a dictionary with all the keys and values .
3484	r Return a dictionary as a dict .
3485	r Get the name of the descriptor .
3486	Decorator to log a function call .
3487	A decorator that ensures that the decorated function is called .
3488	Print a progress message .
3489	Print a message to stdout .
3490	Fail a failure .
3491	Get a temporary file .
3492	Set a temporary file .
3493	Delete temp files .
3494	Returns a fixed path .
3495	Returns a list of parameters for the given method .
3496	Merge kwargs into kwargs .
3497	Add command line options .
3498	Terminate the queue .
3499	Add a task .
3500	Stop all worker threads .
3501	Record the number of tasks processed .
3502	Read S3 keys from environment variables
3503	Read S3 keys from command line .
3504	Read S3 keys from config file
3505	Initialize S3 keys .
3506	Connect to S3
3507	List all buckets in S3 .
3508	Recursively walk a directory
3509	Perform a local walk on a local filesystem .
3510	Expand a source .
3511	Upload a single file to S3 .
3512	Upload one or more files .
3513	Create a bucket .
3514	Update the privilege of an object .
3515	Print the contents of the given source .
3516	Download a single file from S3
3517	Get files from source to target .
3518	Copy a single file
3519	Copy files from source to target .
3520	Delete all files from a source .
3521	Return a list of relative paths in a directory .
3522	Sync two files .
3523	Calculate the MD5 hash of a file .
3524	Get the MD5 hash of the file .
3525	Ensure target directory exists .
3526	Check to see if a remote key exists
3527	Match path against filter_path .
3528	Walk an S3 object
3529	Add an object to the result list .
3530	Get the file privilege for a file .
3531	Lookup an object by s3url
3532	Read a chunk from source at the given position .
3533	Upload a file to S3 .
3534	Verify that the file is correct .
3535	Write a file chunk .
3536	Copy object to S3 .
3537	Execute a command .
3538	Validate arguments .
3539	Pretty print a list of objects
3540	List all buckets
3541	Create a new bucket .
3542	Handler for uploading files .
3543	Get a file handler
3544	Handler for cat_files
3545	Dsync dsync
3546	Copy files to S3
3547	Move files to S3
3548	Delete files from S3
3549	Dump data to S3
3550	Total size message .
3551	Match date .
3552	Match time .
3553	Match datetime .
3554	Validate a dictionary value .
3555	Discover the gateway .
3556	Listen for messages .
3557	Read a message from the hub .
3558	Push data to the callback .
3559	Returns the encryption key .
3560	Catch exception handler
3561	Include rollbar .
3562	Ensure a log handler exists .
3563	Returns the request object .
3564	Initialize the Rollbar .
3565	Decorator for lambda functions .
3566	Report a message to Rollbar .
3567	Search for items .
3568	Create a Logger object .
3569	Builds the data for the given request .
3570	Add lambda context data .
3571	Add request data .
3572	Check if a frame is in the set of frames
3573	Recursively build request data .
3574	Build server data .
3575	Build a payload from a dictionary .
3576	Main loop .
3577	Compose the Chinese Chinese Chinese Chinese character .
3578	Decompose a Hangul letter .
3579	Checks if the given string has Hangul code .
3580	Attaches the given word to the given word .
3581	Determines if an exception is inside an exception .
3582	Checks if the given node is inside a lambda .
3583	Get all the elements of a node .
3584	Clobber exception handler .
3585	Check if the node is a super class .
3586	Return True if the node is an error .
3587	Return True if the given node is a default argument .
3588	Determines if a function is a function decorator .
3589	Return whether the given node is an ancestor of the given node .
3590	Return the parent of the given node .
3591	Decorator for checking messages .
3592	Recursively extract fields from a format string .
3593	Get an argument from a call node .
3594	Check if an exception is inherited from stdlib .
3595	Check if an error is of the given type .
3596	Determines if a function is decorated with a property .
3597	Determine if a function is decorated with qnames .
3598	Find and return an exception handler .
3599	Determines if the given node is a import statement .
3600	Return a list of exception handlers for an exception .
3601	Returns True if the given node has an exception handler .
3602	Return True if the class is abstract .
3603	Infer a node .
3604	Return the type of the node .
3605	Checks if the given function is registered in the Singledispatch function .
3606	Is the postponed evaluation mode?
3607	Return the fully qualified names of a module .
3608	Get the absolute name of a module .
3609	Return a pretty representation of the tree definitions .
3610	Make imports graph .
3611	Check for imports .
3612	Check for imports .
3613	Check for incorrect import position .
3614	Records an import statement .
3615	Check that the import stack is correct .
3616	Check for relative import .
3617	Add an imported module .
3618	Check if a module is deprecated .
3619	Check that the preferred module is preferred .
3620	Report external dependencies .
3621	Filters the dependencies graph based on external dependencies .
3622	Return a list of default options .
3623	Insert default options .
3624	Return True if the given attribute is visible .
3625	Get the callbacks for the given node .
3626	Visit a node .
3627	Check that all messages are consistent .
3628	Check function calls .
3629	Check if a datetime is valid .
3630	Check open mode .
3631	Handle a message .
3632	Display all the messages in the given layout .
3633	Get the title of a node .
3634	Set default values .
3635	Show if the given node is a builtin .
3636	Add a class node .
3637	Get all ancestors of a given node .
3638	Get all the nodes associated with the given class .
3639	Extract classes from a class .
3640	Leave the project .
3641	Visitor for import from import from module .
3642	Create a class diagram from a class .
3643	Return a list of diagram diagrams for this project .
3644	Return True if the owner is ignored .
3645	Return a list of names similar to the given attribute .
3646	Return True if no member has no members .
3647	Checks if the given type has a parent of the given type .
3648	Return True if name is a valid variadic value .
3649	Determine if a variable is a context variable .
3650	Iterate over attributes .
3651	Handle assignments .
3652	Check if the function is not callable .
3653	Check for errors .
3654	Iterate over the interfaces on the given node .
3655	Create a project from a list of files .
3656	Generate a package identifier .
3657	A function definition .
3658	Handle assignment names .
3659	Handle assignment attribute types .
3660	Visitor for imports .
3661	Recursively visit a module .
3662	Compute the module name .
3663	Compute the imported module .
3664	Get ANSI color code .
3665	Color a message .
3666	Register the given linter .
3667	Handle a message .
3668	Display the given layout .
3669	Handle a message .
3670	Write a graph .
3671	Write a node .
3672	Write an edge between two nodes .
3673	Check that a new format string is valid .
3674	Process non - raw string tokens .
3675	Number of sections .
3676	Visit a layout section .
3677	Create a default table .
3678	Create a default table .
3679	Add a renamed message .
3680	Register messages from a checker .
3681	Register a message .
3682	Check if a symbol exists .
3683	Raise an InvalidMessageError if the symbol is not duplicate .
3684	Raise an InvalidMessageError if the message ID is not duplicate .
3685	Get the message definitions for a given message id or symbol .
3686	Return a string representation of a message .
3687	Print help message .
3688	List all available messages .
3689	Initialize Pylint builder .
3690	Return the number of CPU cores .
3691	Add messages stats to a report .
3692	Temporarily fix python path .
3693	Load plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disables all reports .
3698	Disable Python 3 .
3699	Returns a list of all checkers .
3700	Returns a sorted list of checker names .
3701	Prepare checkers .
3702	Expand a list of modules .
3703	Set the current module .
3704	Check if an AST node is valid .
3705	Report evaluation .
3706	Handle a help message .
3707	Print the full documentation .
3708	List messages .
3709	List checker groups
3710	Truncates the given text .
3711	Get the module and frame ID from a node .
3712	Safely decode a line .
3713	Determine if a basename is in black list
3714	Register plugins in a directory .
3715	Return a comment from a string .
3716	Format an option value .
3717	Format a section .
3718	Format the given options into a formatted string .
3719	Insert a child at the given index .
3720	Append a child to this node .
3721	The list of parents of this node .
3722	Format the text .
3723	Compute the content of a table .
3724	Compute the content of the layout .
3725	Collect block lines from the given module .
3726	Handle an ignored message .
3727	Register a report .
3728	Make the report sections .
3729	Add stats to self . stats .
3730	Return the name of the setters property .
3731	Get setter property .
3732	Return True if return is something else False .
3733	Return a list of possible exception types .
3734	Process a module .
3735	Process a module .
3736	Process comments .
3737	Determine if a statement is a future import .
3738	Checks if the given statement is in the given branch .
3739	Look up an overridden method by name .
3740	Return a string describing the extra information about the module .
3741	Detects global scope .
3742	Return True if name_node is assigned locally .
3743	Mark a node as consumed .
3744	Visitor for global variables .
3745	Ignore class scope .
3746	Return True if the node is homonym in the upper function scope .
3747	Check for unbalanced targets .
3748	Check metaclasses for metaclasses .
3749	Return a list of all packages in a directory .
3750	install pylint
3751	Run install .
3752	Report the similarity between two stats .
3753	Main function .
3754	Append a stream to the stream .
3755	Compute the similarity matrix for each sample .
3756	Prints the number of similarities in each line .
3757	Find the common between two lines .
3758	Iterate over all similarities in the file .
3759	Iterate over the stripped lines .
3760	Creates a dictionary mapping each line number to line number .
3761	Return True if the definition matches the given call .
3762	Checks whether an attribute is equal to the given attribute .
3763	Return True if two parameters have different values .
3764	Determine if two parameters have different parameters .
3765	Safely infer a call result .
3766	Mark a node as accessed .
3767	Check class definition .
3768	Check that the node is consistent with the MRO .
3769	Make sure that the bases are not inherited .
3770	Check if a function definition is decorated .
3771	Check if a super class is a super class .
3772	Leave a function definition .
3773	Check if a class is in slots .
3774	Visitor for name node .
3775	Check that all members of the given node are accessed .
3776	Check for abstract methods .
3777	Check the signature of a method .
3778	Return True if the given node is a mandatory method .
3779	Return True if the body is a raise .
3780	Check error context .
3781	A function definition .
3782	Display all the reports .
3783	Checks if the given node is a namedtuple .
3784	Return True if the node is an enum class .
3785	Check if a class is a dataclass .
3786	Open the Linter .
3787	Visitor for ClassDefs .
3788	Leave class definition .
3789	Visit if node .
3790	Check if the condition is too many
3791	Check the docstring for spelling errors .
3792	Return a template with the given template .
3793	Checks if the given token is a trailing comma .
3794	Checks if the given node is an elif .
3795	Checks if a simplifiableif node is simplified .
3796	Check if a StopIteration is inside a StopIteration .
3797	Check if an exception is inherited from a StopIteration .
3798	Check if the next iteration is raised .
3799	Check for nested blocks .
3800	Determine the types of an IS instance .
3801	Check to see if merge_isinstance isinstance .
3802	Checks if the given comparison node is valid .
3803	Checks if the given node is an orternary .
3804	Check that the return statements are consistent .
3805	Determine if a return is ended .
3806	Check for loops .
3807	Check if output format is available .
3808	Main entry point .
3809	Write packages to the graph .
3810	Write all classes in diagram .
3811	Set the printer .
3812	Create a VCG printer .
3813	Return True if the file can be emitted .
3814	Return the help string for this checker .
3815	Get environment variables .
3816	Run linter on a file .
3817	Run a python command .
3818	Extract cycles from a list of vertices .
3819	Get source code .
3820	Generate the graph .
3821	Format a section .
3822	Register a message by id .
3823	Disable a message .
3824	Enables or disables a message .
3825	Return the symbol identifier of a message .
3826	Check if a message is enabled .
3827	Add a message .
3828	Prints the full documentation to stdout .
3829	Print the documentation for a checker .
3830	Get the indent length of a line .
3831	Return indentation line .
3832	Return the indentation of a token .
3833	Handle line start .
3834	Return a tuple of valid indentations .
3835	Hanging indentation .
3836	Return a _ContinuationIndent .
3837	Push a token onto the stack .
3838	Add a new line .
3839	Check for parentheses .
3840	Is a type annotation?
3841	Check for equality spacing .
3842	Check if the token is within the given token .
3843	Visit default statement .
3844	Check if multi statement line is a single statement .
3845	Check if the given lines are valid .
3846	Check indentation level .
3847	Determine if a node is in an iterating context .
3848	Return True if the node is a conditional import statement .
3849	Visitor for name .
3850	Add error message .
3851	Report error message .
3852	Visit except handler .
3853	Check raise value .
3854	Find the pylintrc .
3855	Validate a value .
3856	Expand the default value
3857	Match a long option .
3858	Register an option provider .
3859	Set a provider option .
3860	Set global option .
3861	Generate the config file .
3862	Load the global options from the config file .
3863	Load command line options .
3864	Add a help section .
3865	Print help message .
3866	Load default values .
3867	Return the attribute name for an option .
3868	Get the definition of an option .
3869	Iterate over the options grouped by section name .
3870	Check if a function is a method call .
3871	Return True if the node is a complex format string .
3872	Visit logging module .
3873	Visit import from import from module .
3874	Visitor for import statements .
3875	Check if a function call is called .
3876	Check format string .
3877	Determine if a node is in loop .
3878	Get break loop node .
3879	Return True if loop exits False otherwise .
3880	Return a set of property names and property names .
3881	Determines the type of a function .
3882	Create a nice report for the given types .
3883	Determine if a node is redefined by a decorator .
3884	Checks if a call is a single argument .
3885	Check for starred assignments .
3886	Check nonlocal and global variables .
3887	Check if the function is abstract .
3888	Check if an else - on - loop .
3889	Check if a node is in a loop .
3890	Open the linter .
3891	Visit expr .
3892	Visit a lambda function .
3893	Add an assert on failure .
3894	Add duplicate keys .
3895	Check that the node is unreachable .
3896	Check if the given node is in the final body .
3897	Check if the function is a reverse .
3898	Check for assignments .
3899	Check if name is valid .
3900	Check docstring for docstring .
3901	Check that a literal is comparison .
3902	Parse a subgraph .
3903	Parse a subgraph .
3904	Check if a module is too complex .
3905	Add a checker .
3906	Recursively walk the AST .
3907	Add a relationship between two objects .
3908	Get a relationship by from_object and type .
3909	Get all the attributes of a given node .
3910	Return a sorted list of all methods in the node .
3911	Add an object to the diagram .
3912	Return class names .
3913	List of classes .
3914	Retrieve a class by its name .
3915	Return a list of all modules .
3916	Retrieve a module by name .
3917	Get a module by name .
3918	Add from_module to module .
3919	Delete grant .
3920	Query the database .
3921	Get a user by username and password .
3922	Get a single instance by access token or refresh token .
3923	Set a token .
3924	Set a grant .
3925	Get a client by code and code .
3926	Prepare a request .
3927	Initialize the app .
3928	Create an OAuth remote application .
3929	Make a request to the API .
3930	Create an OAuth2 access token .
3931	Handle an OAuth1 access token .
3932	Handle OAuth2 response .
3933	Handles an authorization response .
3934	Decorator for authorized_response
3935	Hash a token .
3936	Create a client with the given token .
3937	Create an OAuth client .
3938	Temporarily override OAuth2 .
3939	Confirm an authorization request .
3940	Decorator to create a request token .
3941	Get client secret .
3942	Get the request token secret .
3943	Get the access token .
3944	Get the default realms for a client .
3945	Get the realms of a request .
3946	Get the redirect uri of the request .
3947	Get the rsa_key for the client .
3948	Validate client key .
3949	Validate a request token .
3950	Validate an access token .
3951	Validate a timestamp and return True if it exists .
3952	Validate redirect_uri .
3953	Validate the requested realms .
3954	Validate a verifier .
3955	Verify the request token .
3956	Verify that the request token is valid .
3957	Save an access token .
3958	Save request token .
3959	Save verifier .
3960	The error URI .
3961	Confirm an authorization request .
3962	Verify a request .
3963	Extract client credentials from a request .
3964	Returns True if the client has an authentication token .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Get the scope of a refresh token .
3968	Confirm scopes for a refresh token .
3969	Return the default redirect uri .
3970	Get the default scopes .
3971	Delete an authorization code .
3972	Save an authorization code .
3973	Save a bearer token .
3974	Validate a bearer token .
3975	Validate client ID
3976	Validate a grant .
3977	Validate grant type .
3978	Validate a refresh token .
3979	Validate response type .
3980	Validate scopes .
3981	Validate a username and password .
3982	Revoke an access token .
3983	Update the request data .
3984	Recursively convert keys to strings
3985	Change the Authorization header .
3986	Register a remote application .
3987	Create a remote application .
3988	Extract the parameters from the request object .
3989	Convert text to bytes .
3990	Decodes a base64 - encoded string .
3991	Create a Response object .
3992	Return a list of cached clients .
3993	Add a remote app .
3994	Add a remote application .
3995	Check if an exception is raised .
3996	Verify that all trials have been completed .
3997	Load private key .
3998	Check if a private key is incorrect .
3999	Check if a private key is wrong
4000	Get the Revoked objects .
4001	Check for duplicate certificates .
4002	Create a certificate .
4003	Create a certificate .
4004	Decorator for require_requires
4005	Load SSL certificates .
4006	Set the password callback .
4007	Set the certificate chain .
4008	Sets the SSL certificate file .
4009	Use an SSL certificate .
4010	Add an extra chain certificate .
4011	Set the private key file .
4012	Sets the private key .
4013	Load client certificates .
4014	Sets SSL verification depth .
4015	Load a temporary DH file .
4016	Sets the cipher list .
4017	Sets the client CA list .
4018	Add a client certificate .
4019	Set a callback function that will be called when the connection is received .
4020	Sets the TLS extension .
4021	Sets the NPN select callback .
4022	Sets the alpn protocols .
4023	Sets the SSL select callback .
4024	Sets the OCSP callback .
4025	Sets an OCSP server callback .
4026	Sets an OCSP client callback .
4027	Sets the SSL context .
4028	Get the server name .
4029	Sets the host name .
4030	Receive data from the socket .
4031	Read data from the socket .
4032	Read data from BIO .
4033	Refreshes the connection .
4034	Shutdown the connection .
4035	Returns a list of cipher objects .
4036	Returns a list of client certificates .
4037	Sets the SSL shutdown mode .
4038	Get a random random seed from the server .
4039	Get a random random random seed .
4040	The master key .
4041	Return a copy of the encryption material .
4042	Get the SSL session .
4043	Returns the name of the cipher .
4044	Returns the current cipher bits .
4045	Returns the current SSL cipher version .
4046	Get the protocol version name .
4047	Get the next protocol message .
4048	Sets the alpn protocols .
4049	Get the ALPN packet .
4050	Create a new memory buffer .
4051	Convert a BIO object into a string .
4052	Set ASN time boundary .
4053	Convert a timestamp to an ASN time object .
4054	Get an elliptic curve by name .
4055	Dump a public key .
4056	Load a public key .
4057	Sign data using EVP .
4058	Verify a signature .
4059	Dump a CRRL into a string .
4060	Return the encryption key .
4061	Generate a public key .
4062	Check if the private key is valid .
4063	Load elliptic curves .
4064	Load elliptic curves .
4065	Convert curve to EC key .
4066	Derive the string representation of the certificate .
4067	Returns a list of component names .
4068	Returns the short name of the certificate .
4069	Returns the data as a string .
4070	Convert the certificate to a cryptography object .
4071	Set the public key .
4072	Returns a PKey object for this request .
4073	Get the subject s subject .
4074	Add extensions to the certificate .
4075	Returns a list of all the extensions .
4076	Verify the certificate .
4077	Convert to a cryptography object .
4078	Set the certificate version .
4079	Returns a PKey object .
4080	Set the public key .
4081	Signs the certificate with the given digest .
4082	Get the signature algorithm .
4083	Returns the digest of the certificate .
4084	Set the serial number .
4085	Returns the serial number .
4086	Calculate the amount of time after a given amount .
4087	Calculates the amount of time after a given amount .
4088	Returns True if the token has expired .
4089	Get the issuer name .
4090	Set the issuer name .
4091	Get the subject name .
4092	Set the subject name .
4093	Add extensions to the certificate .
4094	Return an X509Extension object .
4095	Add a certificate to the store .
4096	Add a crl to the store .
4097	Sets the time of the certificate .
4098	Initialize the store .
4099	Create an X509StoreContextError from the store .
4100	Verify the certificate .
4101	Set the serial number .
4102	Returns the serial number of the certificate .
4103	Set the reason .
4104	Returns the reason reason .
4105	Set the revocation date .
4106	Convert the certificate to a cryptography object .
4107	Retrieves all revoked certificates .
4108	Return the issuer of this certificate .
4109	Sign the certificate with the given digest .
4110	Exports a certificate .
4111	Returns the type name of the object .
4112	Sets the CA certificates .
4113	Export the certificate .
4114	Sign a message with a given digest .
4115	Verify a key .
4116	Encode the SPKI .
4117	Returns the public key .
4118	Sets the public key .
4119	Create an exception from the error queue .
4120	Convert obj to bytes .
4121	Return a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that token .
4122	Return service metadata .
4123	Iterate over all issues in the board .
4124	Get the comments for a card .
4125	Get all boards .
4126	Return a list of lists for the given board .
4127	Get a list of cards .
4128	Get comments for a card .
4129	Returns the URL for the given path .
4130	Retrieve data from GitHub .
4131	Convert a link field to a dictionary .
4132	Get all issues for a given query .
4133	Get pull requests for a given tag .
4134	Aggregate remote issues .
4135	Retrieves a value from the main section .
4136	Return a dictionary of template names .
4137	Validate a service configuration .
4138	Return True if the given issue is included in the config .
4139	Make a table from a grid .
4140	Execute a command and return the result .
4141	Return an integer value as an integer .
4142	Pull a bugwarrior .
4143	Get data from url
4144	Get a collection from the API .
4145	Find a unique UUID for the given keys .
4146	Merges the given field into the local task .
4147	Build uas config overrides .
4148	Parse a sprint string .
4149	Get credentials from the client .
4150	Calculate the scores for multiple sequences .
4151	Calculate p - values for each gene .
4152	Perform fdr correction on a distribution .
4153	Compute the z - score of the data .
4154	Plots a heatmap .
4155	Adjust the y - axis of the axes .
4156	Create an argument parser .
4157	Add subparsers to subparsers .
4158	Add subparsers to subparsers .
4159	Adds a parser to subparsers .
4160	Calculate the enrichment score for each gene .
4161	Creates a ranking tensor .
4162	Calculate the rank of a DataFrame .
4163	Calculate p - value p - value
4164	Compute the significance of a set of enrichment scores .
4165	Returns a pandas DataFrame containing the names and their descriptions .
4166	Retrieve the datasets for a given mart .
4167	Returns a DataFrame describing the dataset s attributes .
4168	Returns a pandas DataFrame with filtered filters
4169	Query the database .
4170	Compute GSEA model .
4171	Simulate a single sample GSEA .
4172	Run prerank on genes .
4173	Run replot plot on a graph .
4174	Sets the number of cores .
4175	Load gene sets .
4176	Retrieve the list of available libraries .
4177	Download and generate gene sets .
4178	Compute heatmatrix
4179	Save results to outputdir
4180	Load gene expression data
4181	Run GSEA .
4182	Run GSEA .
4183	Run each sample permu per mu .
4184	Runs an enrichment score on a dataframe .
4185	Save the enrichment scores to a file .
4186	Parse GSEA results .
4187	Evaluate a set of genes .
4188	Parse gene sets
4189	Parse the gene_list into a list
4190	Sends the given gene list to the given URL .
4191	Check if genes are recognized by Enrichr
4192	Retrieve background genes .
4193	Run the Enrichr API .
4194	Create a cube .
4195	Create an icosphere filter
4196	Build a torus script .
4197	Draw a mesh of a plane s edges .
4198	Create a cube from a script .
4199	Get color values from a color name .
4200	Check if var is a list
4201	Make a list of lists .
4202	write a filter script
4203	Run LS3 loop .
4204	Merge close vertices into the script .
4205	Closes holes in a script
4206	Split vert on non - Manifold faces .
4207	Create a filter for snap - matched borders .
4208	Translates a value to a vector
4209	Rotate a script .
4210	Scale a script .
4211	calc_co_co
4212	convert a cylinder to a cylinder
4213	Build a bend script .
4214	Transform a torus curve into a torus curve .
4215	Convert a latex script to TeX format
4216	Export a mesh to the face .
4217	Generate a uniform mesh resampling filter
4218	Generate a scisson - resolution filter script .
4219	Run voronoi on a single image .
4220	Add all faces to the script .
4221	Add a filter to the filter script .
4222	Add a filter to the script .
4223	Add a function to the script .
4224	Return a cylindrical version of cylindrical
4225	Compute a spherical version of a script .
4226	Join the filter script into the XML .
4227	Rename a layer .
4228	Change the current layer .
4229	Duplicate current layer .
4230	Delete a lower layer .
4231	Handles an error .
4232	start a filter script
4233	Add a layer to the layer stack .
4234	Delete a layer from the stack .
4235	Save filters to a script file .
4236	Run the script .
4237	Main function .
4238	Generate Hausdorff distance
4239	Generate a Poisson disk .
4240	Generate a mesh element .
4241	Generate a clustered vertices .
4242	Applies a flat plane to the script .
4243	Generate a per - triangle filter
4244	Generate a VORonoi filter .
4245	Compute the topological measures .
4246	Parse the ml_log log into a dictionary
4247	Parse Hausdorff distance log file .
4248	Add a function to the script .
4249	Add a filter to the script .
4250	Generate a cyclic rain stream .
4251	Compute the square root of x .
4252	Return the cross product of two vectors .
4253	Multiply scalar values .
4254	Define a new vertex attribute .
4255	Flip faces .
4256	Generate filter for point sets
4257	Run taubin filter
4258	Generate a depth filter
4259	Sort a polyline in a file .
4260	Measure the topology .
4261	Measure the geometry of a file .
4262	Measure the dimension of a file .
4263	Convert filename to lowercase
4264	Patch the request class .
4265	Return the configuration for a set .
4266	Configure uploads .
4267	The configuration for this upload .
4268	Return the URL for a file .
4269	Return the path to a file .
4270	Is the given extension?
4271	Resolve a conflict name .
4272	Extract the Vprof version from a file .
4273	Remove duplicate objects .
4274	Returns the difference between two objects .
4275	Return a sorted list of object counts .
4276	Trace memory usage .
4277	List of code events .
4278	The overhead of each object .
4279	Compute the memory overhead .
4280	Profile the package .
4281	Profile the module .
4282	Profile the function .
4283	Run the profile .
4284	Return a set of all modules in a given package .
4285	Run a function in a separate process .
4286	Determine the type of a run object .
4287	Initialize the module .
4288	Initialize a package .
4289	Initialize the function .
4290	Replace the command line arguments in sys . argv .
4291	Sample a frame .
4292	Insert a stack into the stack .
4293	Recursively fills the sample count
4294	Helper function to format a tree .
4295	Return the call tree .
4296	Return a dictionary describing the package .
4297	Profile the module .
4298	Profile the function .
4299	Transform profiler stats into a sorted list .
4300	Profile the package .
4301	Profile the module .
4302	Profile the function .
4303	Initialize the database .
4304	Show guestbook .
4305	Add a new entry .
4306	Handler for profiler
4307	Start the HTTP server .
4308	Retrieve the contents of the root directory .
4309	Retrieve the content of the file .
4310	Handles GET requests .
4311	Perform a POST request .
4312	Send a response .
4313	Return True if module_path is a standard python directory .
4314	Record a line event .
4315	Return a generator that yields lines without the standard library .
4316	Calculate the heatmap .
4317	Skip all lines in src_code .
4318	Profile heatmap .
4319	Formats a heatmap .
4320	Profile a module .
4321	Profile the function execution .
4322	Run the profiler .
4323	Run a function on the server .
4324	Predict probabilities for X .
4325	Predict log probabilities .
4326	Fit the estimator .
4327	Count the number of documents .
4328	Sort the vocabulary into a dictionary .
4329	Limit the features in a given vocabulary .
4330	Perform transform on X .
4331	Apply the transformation to the data .
4332	Convert to Scikit .
4333	Fit the model .
4334	Predict function .
4335	Compute the linear regression .
4336	Fit the model .
4337	Fit the model .
4338	Compute the score of each step .
4339	Compute the folds for each candidate .
4340	Score the estimator .
4341	Train the K - Means clustering .
4342	Predict on X .
4343	Predict classifier .
4344	Check if rdd is in expected_dtype .
4345	Compute the vocabulary .
4346	Compute the mean and variance of the covariance matrix .
4347	Fit the SVD using SVD
4348	Transform SVD to dense SVD
4349	Convert an iterator into a block of blocks .
4350	Block an iterator into chunks of dtypes .
4351	Create a BlockRDD from an RDD .
4352	Apply a function to each RDD .
4353	The shape of the RDD .
4354	Convert the RDD into a numpy array .
4355	Apply a function to each column .
4356	Return the bit permutation of a bitstring .
4357	Return True if path has root write permissions .
4358	Check the configuration file .
4359	Read configuration from file .
4360	Run a command as a command .
4361	Execute a command .
4362	Execute a command via SSH .
4363	Validate the content - type .
4364	Returns the HTTP headers .
4365	Return the body of the response .
4366	Returns the URL for this device .
4367	Returns the URL for this application .
4368	Convert a packet into text .
4369	Print discovery information .
4370	List MAC IDs .
4371	Execute the device .
4372	Send a confirmation on the device .
4373	Execute a push event .
4374	Execute a device .
4375	Run all devices .
4376	Convert a Transaction object into a Transaction object .
4377	Find the path to the ledger file .
4378	Run the compatibility test .
4379	Get long description from README . md file .
4380	Create a precalculatedTextMeasurer from a json file .
4381	Return the default measurement .
4382	Generate a badge .
4383	Generate all supported Unicode characters .
4384	Generate a sequence of characters .
4385	Calculates the number of characters in the given sequence .
4386	Write a JSON object to a file .
4387	Convolve a 2D image .
4388	Returns the Gaussian kernel .
4389	Convert an image to grayscale
4390	Main function .
4391	Compute the SIM image sigma value
4392	Compute the SSIM
4393	Destroys the container .
4394	Set the code version .
4395	Returns a dictionary with the status of this node .
4396	Print the current status .
4397	Return the node corresponding to the given connection .
4398	Try to bind the node if necessary .
4399	Called when a new connection is received .
4400	Process incoming message .
4401	Retrieve the result of a failure .
4402	Determines if the node should connect to this node .
4403	Connect to the node if necessary .
4404	Called when the connection is received .
4405	Called when a message is received .
4406	Called when a connection is disconnected .
4407	Add a node to the network .
4408	Remove a node from the graph .
4409	Send a message to the given node .
4410	Destroys the server .
4411	Add an item to the list .
4412	Put an item into the heap .
4413	Get an item from the heap .
4414	Attempts a lock .
4415	Determines if the lock is acquired .
4416	Release a lock .
4417	Decorator to check a function .
4418	Decorator for views that require a token .
4419	Set the connections on the server .
4420	Create an Elasticsearch index .
4421	Migrate all indexes .
4422	Strip the metadata from a report .
4423	Saves aggregated reports to Kafka .
4424	Extract XML from an input file .
4425	Parse an aggregate report file .
4426	Convert a report to a CSV file .
4427	Parse a report file .
4428	Return a list of supported capabilities .
4429	Save the results to a file .
4430	Zip the results into a zip file .
4431	Send the results to the DMARC .
4432	Save aggregate reports to Splunk
4433	Save crimes to Splunk .
4434	Decodes a base64 encoded string .
4435	Get the base domain .
4436	Retrieve a DNS address from a DNS address .
4437	Convert human readable timestamp to datetime .
4438	Download a GeoIP address from GeoJSON .
4439	Get information about an IP address .
4440	Convert an email message to an email address .
4441	Convert comma separated string to list .
4442	Parse a report file .
4443	Drain the pool .
4444	Publish a message .
4445	Publish a request .
4446	Publish a message .
4447	Subscribe to a subject .
4448	Remove a subscription from the server .
4449	Send a ping .
4450	Select next server .
4451	Process an error message .
4452	Process an operation error .
4453	Return the command to connect to the server .
4454	Process a single pong .
4455	Process a message .
4456	Process server info .
4457	Process connection info from server .
4458	Flush the queue .
4459	Process the read loop .
4460	Perform coactivation on the dataset .
4461	Decodes a list of images .
4462	Load features from a numpy array .
4463	Load features from images .
4464	Calculate the Pearson correlation coefficient .
4465	Compute dot product .
4466	Return a subset of features .
4467	Get studies by masks .
4468	Get the index of each feature in the dataset .
4469	Classify dataset .
4470	Classifier .
4471	Fit the classifier .
4472	Set class weight .
4473	Fit the cross validation .
4474	Fit a dataset .
4475	Calculate the average of a dataset .
4476	Get random voxels from the dataset .
4477	Get the top words of the model .
4478	Calculate Pearson correlation coefficient
4479	Compute the fractional diameter of a polynomial distribution .
4480	Load activations from a CSV file .
4481	Create the image table .
4482	Return a list ofstudies for the given features .
4483	Add features to the feature table .
4484	Get feature names .
4485	Get the feature counts for each feature .
4486	Load a dataset from a file .
4487	Save the features to a file .
4488	Retrieve the data for the given study .
4489	Get a subset of the data .
4490	Get the names of each column in the dataframe .
4491	Get the ids that have a given threshold .
4492	Searches the features in the table .
4493	Get the ids by applying a given expression .
4494	Convert the DataFrame to a CSR format .
4495	Mark a function as deprecated .
4496	Apply a transformation to a matrix .
4497	Convert an XYZ coordinate to a matrices .
4498	Apply a transformation to a coordinate .
4499	Mask the image .
4500	Get the image mask .
4501	Load images from filenames .
4502	Save a masker to a file .
4503	Set logging level .
4504	Expand an address .
4505	Return a list of tokens .
4506	Parse an address .
4507	Search for duplicate hashes .
4508	Convert a dictionary into an object .
4509	Get the price for a ticker .
4510	Returns a pandas DataFrame for the given tickers .
4511	Get bulk news .
4512	Make an HTTP request .
4513	Get the bearer token information .
4514	Make a request .
4515	Get the tracks for a spotify .
4516	Get information about an artist .
4517	List artist s albums .
4518	Get the top tracks .
4519	List the related artists .
4520	Get a list of artists .
4521	Get a specific category .
4522	Get the playlists for a category .
4523	List all categories .
4524	Get featured playlists .
4525	Retrieve a list of new releases .
4526	Get recommendations .
4527	Get the following artists or users .
4528	Get the albums of the artist .
4529	Get all albums .
4530	Get the total albums for the artist .
4531	Retrieve the related artists .
4532	Get current track .
4533	Get the Player object .
4534	Return a list of devices .
4535	Return the recently played tracks .
4536	Replace tracks .
4537	Reorder tracks .
4538	Create a new playlist .
4539	Get a list of playlists .
4540	Get a list of tracks .
4541	Get all tracks .
4542	Returns an OAuth2 URL .
4543	Get an album .
4544	Get an artist by ID .
4545	Get a track by ID .
4546	Get a user by ID .
4547	Get albums by ids .
4548	Get a list of artists .
4549	Search for songs .
4550	Convert a string to its ID .
4551	Decorator to check if an attribute has an attribute .
4552	Create a new Client from a client .
4553	Create OAuth URL .
4554	Return the attributes of the client .
4555	Return the parameters as a string .
4556	Builds a playlist .
4557	Get all tracks .
4558	Resumes playback .
4559	Transfer a device to the user .
4560	Retrieve a spotify object .
4561	Get the current state of this object .
4562	Convert the data into a short month .
4563	Updates the code URLs .
4564	Check if the current version is greater than the current version .
4565	Determine if branch is a dev version
4566	Checks if the current version is a deprecation .
4567	Backup the configuration file .
4568	Restore the backup .
4569	Determine if a line is to ignore .
4570	Parse options .
4571	Extract base from element .
4572	Convert a string to a list of strings .
4573	Access the request
4574	Return the HTTP status code .
4575	Check validity of a domain .
4576	Check if the given domain is a subdomain .
4577	Check ipv4 syntax .
4578	Is a valid IPv4 range?
4579	Check URL syntax .
4580	Load the current configuration .
4581	Make sure that the user is safe .
4582	Download a file from the server .
4583	Checks if entry_management_url is valid .
4584	Print the header .
4585	This function is called when a file is changed .
4586	Set the domain .
4587	Set to_test .
4588	Color the logo .
4589	Extracts the domain from an extracted domain .
4590	Extract domain from file .
4591	Return a list of file names to test .
4592	Returns the URL of the file .
4593	Switch the current configuration .
4594	Get the expiration date for this function .
4595	Update status file .
4596	Retrieves the structure from PyFunce .
4597	Create a directory .
4598	Delete all uneded files .
4599	Sets the path to the config file .
4600	Load the config file .
4601	Install the production config .
4602	Install the IANA configuration .
4603	Install the PSL configuration .
4604	Install directory structure .
4605	Merge values from upstream configuration .
4606	Load the configuration file .
4607	Split a version string into two digits .
4608	Check the version of local and upstream .
4609	Returns True if the project is a clone of the project .
4610	Fix the index .
4611	Analytic host directory
4612	Output the results to a file .
4613	Display status file .
4614	Determine if the file is not produced .
4615	Extract extensions from a file .
4616	Load the database .
4617	Create a regular expression from an element .
4618	Convert an element into a hierarchical structure .
4619	Load the database .
4620	Return the referer for the given extension .
4621	Iterate over the extensions .
4622	Update the database .
4623	Mine to get to_get
4624	Retrieve the contents of the file .
4625	Save the file to disk .
4626	Add files to the minion .
4627	Remove the file from the cache .
4628	Returns a list of all the mined files .
4629	Process the transaction .
4630	Get file content .
4631	Write content to file .
4632	Write the content of a given record .
4633	Update the expiry date .
4634	Checks if the url is not found
4635	Called when the header is generated .
4636	Construct a tuple of header data .
4637	Return the header .
4638	Construct a dictionary of data .
4639	Return the size of the header .
4640	Color the data .
4641	Write data to JSON
4642	Return the data .
4643	Saves the file to disk .
4644	Calculate the time difference between start and end time .
4645	Formats the execution time .
4646	Return a list of files to delete .
4647	Return the list of databases to delete .
4648	Delete all files in the database .
4649	Generate a hash of the file .
4650	Generate a hash of the data .
4651	Get the hash of the file .
4652	Execute the command .
4653	Remove a key from the dictionary .
4654	Rename a key .
4655	Merge two dictionaries .
4656	Save the main dictionary to a json file .
4657	Save the main dictionary to a yaml file .
4658	Fix path separator .
4659	Write data to the file .
4660	Read the contents of the file .
4661	Return a sorted list of the main list .
4662	Merge two lists .
4663	Return a list of elements that match the pattern .
4664	Match the pattern .
4665	Replace all occurrences in the string .
4666	Count the number of tests .
4667	Calculate the percentage
4668	Log the progress bar .
4669	Check if url is valid
4670	Is the domain valid?
4671	Is this element a subdomain?
4672	Return a SyntaxStatus object .
4673	Reformat historical formating errors
4674	Update the database .
4675	Backup the database .
4676	Return the timestamp of the database .
4677	Return the contents of the database .
4678	Determine if the database is present .
4679	Retrieves the user s database .
4680	Backup the database .
4681	Is the user in the database?
4682	Returns True if the file is older than the time .
4683	Get the expiration date of the file .
4684	Add the token to the database .
4685	Set the permissions for travis
4686	Run Travis on Travis
4687	Lookup the namespaces of the network .
4688	Retrieve a response from a Whois server .
4689	Return the URL status .
4690	Return the referer for the domain .
4691	Return the current object .
4692	Return a generator of all standard paths .
4693	Return a list of all standard package names .
4694	Iterate over unused import line numbers .
4695	Parse unused import module .
4696	Iterate over the line numbers .
4697	Iterate over the undefined name and module names .
4698	Iterate over unused variable numbers .
4699	Iterate over duplicate keys .
4700	Create a mapping of messages to messages .
4701	Check source code .
4702	Extract package name from a line .
4703	Return True if the given line is a multiline import statement .
4704	Determine whether a multiline statement is a multiline statement .
4705	Remove imports from a module .
4706	Break up a line of imports .
4707	Filter source code .
4708	Get a dictionary of messages by line number .
4709	Remove marked star imports from markdown .
4710	Remove duplicate key from a line .
4711	Determine if a dict entry contains a key .
4712	Return True if value is a literal or name .
4713	Generate a list of line numbers from a source file .
4714	Filter out blank lines .
4715	Get the indentation of a given line .
4716	Get the end of a line .
4717	Filter source code .
4718	Split a comma separated string .
4719	Return True if filename is a python file .
4720	Return True if filename matches a pattern .
4721	Find all files in a directory .
4722	Main entry point .
4723	Read the ObtainLeaseResponsePayload from a stream .
4724	Write this object to a stream .
4725	Write the request payload to the given stream .
4726	Read the CancelResponse payload from the input stream .
4727	Create a new Name .
4728	Read Digest File Method
4729	Write this Digest object to a file object .
4730	Create a Digest object .
4731	Read the contents of an application object .
4732	Write the application specific information .
4733	Create application specific information .
4734	Read DerivationParameters from input stream .
4735	Write the DerivationParameters to a file .
4736	Read GetRequestPayload payload .
4737	Write the request payload to the given stream .
4738	Read GetResponsePayload from input stream .
4739	Write the payload to the given stream .
4740	Read signature verification request .
4741	Write the metadata to a file .
4742	Read SignatureVerifyResponse payload .
4743	Process a request .
4744	Build an error response .
4745	Process a template attribute .
4746	Retrieves a list of attributes from a managed object .
4747	Returns the name of a managed object .
4748	Sets attributes on a managed object .
4749	Sets the attribute on the managed object .
4750	Determines if an object is allowed .
4751	Write the decrypted message to the given stream .
4752	Create a new key .
4753	Set a configuration setting .
4754	Load the server configuration .
4755	Process a bind parameter .
4756	Process the result .
4757	Read a LongInteger .
4758	Write a long integer to the stream .
4759	Validate the value .
4760	Read a BigInteger from a stream .
4761	Write a BigInteger to the stream .
4762	Validate the value .
4763	Validate the value .
4764	Read a boolean value from a stream .
4765	Write the boolean value to the stream .
4766	Write this boolean to a stream .
4767	Validate the value .
4768	Read Interval from a stream .
4769	Validate the value .
4770	Return the encryption data .
4771	Set the key wrapping data .
4772	Validate that the value is valid .
4773	Validate that the value is valid .
4774	Validate that the value is valid .
4775	Convert an attribute name to a tag name .
4776	Convert an attribute tag to its name .
4777	Return a bit mask from a list of enumerations .
4778	Return a list of enumerations that match the given bit mask .
4779	Return True if the enumeration is a bitmask .
4780	Read a new KeyPairRequest .
4781	Write the template to the output buffer .
4782	Read the CreateKeyPairResponse payload .
4783	Write the CreateKeyPairResponse to the output buffer .
4784	Read from input buffer .
4785	Write the attribute list to the output buffer .
4786	Read GetAttributeListResponse from input buffer .
4787	Write the response to the output buffer .
4788	Return a list of json files in a directory .
4789	Load policies from the policy directory .
4790	Run the operation monitor .
4791	Get the certificate from the connection .
4792	Retrieves the extended key usage from a certificate .
4793	Returns a list of common names from a certificate .
4794	Get client identity from certificate .
4795	Read request payload .
4796	Write the request payload to the output buffer .
4797	Read response payload .
4798	Write to the output buffer .
4799	Convert an object to a Python object .
4800	Read EncryptedResponsePayload .
4801	Read the DeriveKeyRequest payload .
4802	Write the DeriveKey to the output buffer .
4803	Is this attribute supported?
4804	Is this attribute deprecated?
4805	Checks if an attribute is applicable to the given object type .
4806	Returns whether the attribute is multivalued .
4807	Get a value from the config file .
4808	Read CheckResponsePayload from input stream .
4809	Write this CheckResponse to a stream .
4810	Read the attribute reference .
4811	Write the attribute reference to the output buffer .
4812	Read the attributes from the given stream .
4813	Write the attributes to a file .
4814	Read a nonce .
4815	Write the nonce to the given stream .
4816	Read username and password credential .
4817	Write the credentials to a file .
4818	Read DeviceCredential credential .
4819	Write this MIP packet to a stream .
4820	Read Credential .
4821	Write this credential to a file .
4822	Read MACSignatureKeyInfo .
4823	Write the MAC signature to the given stream .
4824	Read a KeyWrapData object from a stream .
4825	Write the MIP packet .
4826	Read a KeyWrapSpecification .
4827	Write the MIP packet .
4828	Read the extension information from a stream .
4829	Write the extension information .
4830	Create an Extension Information object .
4831	Read this revocation reason from a stream .
4832	Write this revocation reason .
4833	Validate the revocation code .
4834	Reads the object definition .
4835	Write the object definition to the output buffer .
4836	Reads the DefaultsInformation object from the input buffer .
4837	Write the DefaultsInformation structure .
4838	Read RNGParameters from input buffer .
4839	Write the RNG parameters to the output buffer .
4840	Reads the profile information from the input buffer .
4841	Write the profile information to the output buffer .
4842	Write the ValidationInformation structure to the output buffer .
4843	Reads the Capability Information object .
4844	Write the capabilities to the given output buffer .
4845	Stop all connections .
4846	Serve connections .
4847	Read LocateRequest payload .
4848	Writes the MIP to the output buffer .
4849	Read the LocateResponse payload .
4850	Write the response payload to the output buffer .
4851	Create a symmetric key .
4852	Create an asymmetric key pair .
4853	Compute the HMAC - HMAC - SHA - 256 HMAC - SHA - 256 .
4854	Encrypt the given plaintext using the given encryption algorithm .
4855	Encrypt a plaintext using the given encryption mode .
4856	Encrypt plain text using the encryption algorithm .
4857	Decrypts an asymmetric ciphertext using the encryption method .
4858	Generate an RSA key pair .
4859	Derive a key using the derivation algorithm .
4860	Create an RSA private key .
4861	Verify a signature .
4862	Read Sign response payload .
4863	Write the signature data to the stream .
4864	Read a GetUsageAllocationRequest .
4865	Convert protocol version to KMIP version .
4866	Read the protocol version .
4867	Write the protocol version .
4868	Read credentials from input stream .
4869	Write this Authentication object to the given stream .
4870	Read a PollRequest .
4871	Read certificate type from stream .
4872	Write the certificate to a file .
4873	Authenticate using SLUGS .
4874	Read the record from the input stream .
4875	Write the object to the given stream .
4876	Start the connection .
4877	Read the RekeyResponse payload .
4878	Determines if the given profile is supported .
4879	Derive a key from an object .
4880	Retrieve a batch of attributes from the server .
4881	Retrieves a list of attribute names from the server .
4882	Execute a query .
4883	Signs data using a signed request .
4884	Open the proxy .
4885	Close the proxy .
4886	Create a new encryption key .
4887	Creates a new key pair .
4888	Register a managed object .
4889	Create a new rekey .
4890	Derive a key .
4891	Locate a resource .
4892	Checks the validity of a lease .
4893	Retrieves a managed object .
4894	Get the attributes of a Kmipop .
4895	Activate a Kmip device .
4896	Revoke a revocation policy .
4897	Calculate MAC from Kmip .
4898	Builds a CryptographicParameters object .
4899	Builds a EncryptionKeyInfo object .
4900	Build a MACSignatureKey object .
4901	Build a KeyWrappingSpecification object from a dictionary value .
4902	Builds a list of common attributes .
4903	Builds a name attribute .
4904	Read query request payload .
4905	Write the query request payload to the output buffer .
4906	Write the MIP packet to the output buffer .
4907	Read GetAttributesResponse payload .
4908	Write the response payload to the output buffer .
4909	Get a single entry point .
4910	Get all ephemeral group names .
4911	Return a list of all distributions in the given group
4912	Load the object .
4913	Create an EntryPoint object from a string .
4914	Run the server .
4915	Generate project files .
4916	Generate a controller .
4917	Generate an action .
4918	Generate a form .
4919	Generate a model .
4920	Generate a macro .
4921	Make a directory if it exists .
4922	Rewrite project and copy it to dst_file .
4923	Convert a time into a human readable string .
4924	Ensure url is valid .
4925	Encode an object .
4926	Decodes an object into a Python object .
4927	Convert a function into JSON .
4928	Return the absolute URL for the given endpoint .
4929	Load the config .
4930	Register a user in the session .
4931	Return the current user
4932	Create Flask application .
4933	Register jinja .
4934	Register blueprint routes .
4935	Register error handler .
4936	Register pre - render hooks .
4937	Write a DataFrame to a CSV file .
4938	Read a CSV from a CSV file .
4939	Serialize a dataframe .
4940	Deserialize a dataframe .
4941	Update this object from a dataframe .
4942	Update metadata from raw_data .
4943	Returns the URL of the contents of the archive .
4944	Adds a dataframe from a dataframe .
4945	Adds a new data type to this dataset .
4946	Opens the intermediate dataset .
4947	Read the dataset as binary .
4948	Read the dataset as text .
4949	Convert to a pandas DataFrame .
4950	Returns an intermediate dataset for the given port .
4951	Get experiments .
4952	Get datasets for a workspace .
4953	Get a dataset
4954	Publish a function to a workspace .
4955	Publish a service .
4956	Decorator for annotations .
4957	Decorator to annotate a return type .
4958	Attaches a function to a function .
4959	Finds all globals in the given code .
4960	Return a shallow copy of this Pen .
4961	Determine the color of a color .
4962	Draws the canvas .
4963	Calculate the cubic Bernstein extension .
4964	Cubic Bernstein - Bernstein - Bernstein - Bernstein - Bernstein algorithm
4965	Build a list of choices for the sitetree
4966	Return a function that returns a list of command options .
4967	Decorator to register a function as a function .
4968	Compose a dynamic sitetree .
4969	Initialize the cache .
4970	Empty the sitet .
4971	Get an entry from the cache .
4972	Update an entry .
4973	Set a cache entry .
4974	Initialize the cache .
4975	Resolve a tree alias .
4976	Returns True if current app is an admin .
4977	Calculates the depth of a tree item .
4978	Get the current tree item .
4979	Returns the URL for a given sitetree item .
4980	Initialize the sitetree .
4981	Resolve a sitetree attribute .
4982	Get the parent level of the given item .
4983	Generate a menu for a tree .
4984	Check if the given item has access to the current user .
4985	Returns the breadcrumbs for the given tree_alias
4986	Get a sitetree .
4987	Render the children .
4988	Return the children of an item .
4989	Update the has_children property of a tree item
4990	Filter items based on navigation type .
4991	Return the parent item for the given tree_alias .
4992	Clim the tree into the tree .
4993	Resolve a variable name .
4994	Return a sitetree node .
4995	Return a sitetree_children node .
4996	A sitetree_breadcrumbs .
4997	Return a sitetree menu .
4998	Render a sitetree .
4999	Create a template for a tag .
5000	Returns the URL name for a model .
5001	Registers the model admin .
5002	Handles redirect requests .
5003	Redirect to the server .
5004	Redirect the post .
5005	Redirect the user to the correct redirection .
5006	Add the form to the form .
5007	Returns the model object .
5008	Move an item .
5009	Save the item to the tree .
5010	Returns the urls .
5011	Dump the content of the model .
5012	Create a tree model .
5013	Create a new item .
5014	Import a sitetree module .
5015	Returns the model class .
5016	Create a Config object from a mapping .
5017	Create a Config from a Python file .
5018	Load a configuration from a TOML file .
5019	Create a Config from an object .
5020	Create attributes for a Span .
5021	Create http headers for a new span .
5022	Determine the current span .
5023	Start the logging service .
5024	Stop the trace .
5025	Update binary annotations .
5026	Add an annotation .
5027	Override the span name .
5028	Create an endpoint .
5029	Creates a new Endpoint with the given new_service_name .
5030	Return a _V1Span object .
5031	Encode a list of Spans .
5032	Create a protobuf span .
5033	Convert a hexadecimal id to bytes .
5034	Return the proto proto proto .
5035	Convert an endpoint into a zipkin endpoint .
5036	Convert annotations to Zipkin annotations .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an endpoint .
5040	Return a copy of an endpoint with a new service name .
5041	Build an annotation list .
5042	Build binary annotation list .
5043	Create a new span .
5044	Convert a Thrift span to bytes .
5045	Encode a list of Thrift objects .
5046	Detect Span version and encoding .
5047	Convert a list of spans to a list of spans .
5048	Deprecated use Tracer .
5049	Encode a v2_span .
5050	Create a json endpoint .
5051	Encode a Span .
5052	Decodes a list of spans .
5053	Convert a Thrift endpoint into an Endpoint object .
5054	Decodes the thrift annotations .
5055	Convert from thrift binary annotations into a dict .
5056	Decodes a Thrift span .
5057	Convert a trace_id to a string .
5058	Convert an unsigned long integer to lower hex .
5059	Writes a long integer to the stream .
5060	Preprocessor for dates .
5061	Set the transaction code .
5062	Sets the iph_id from the tags .
5063	Set the TNR for a given tag .
5064	Parses the tag data .
5065	Parse a file and return a Transaction object .
5066	Join a string into a single line .
5067	Deserialize a JSON or text .
5068	Log a rate limit .
5069	Make an HTTP request .
5070	Get bot info .
5071	Get bots .
5072	Read a single packet .
5073	Write a message to the output stream .
5074	Close the file .
5075	Decode a compressed string .
5076	Encode a term .
5077	Add a source address .
5078	Send all pending messages to the queue .
5079	Sets the remote serviceHello callback .
5080	cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	search for services given a given TIMEOUT
5083	construct a raw SOAP XML string given a prepared SoapEnvelope object
5084	Discover systems using WS - discovery
5085	Returns the managed item manager .
5086	Return a list of all child relations of a model .
5087	Return all child m2m relations for a given model .
5088	Save the model to the database .
5089	Create a model from a dictionary .
5090	Validate all the forms .
5091	Returns True if all formsets have changed
5092	Return a new Address with valid checksum .
5093	Generate a checksum .
5094	Parse command line arguments .
5095	Create an argument parser .
5096	Prompts the user to enter a seed .
5097	Validate signature fragments .
5098	Get a single key .
5099	Returns the key for the given address .
5100	Create a new key iterator .
5101	Create a Kerl .
5102	Apply a given amount of times to the current state .
5103	Squeeze the given number of bits .
5104	Transform the state to the correct state .
5105	Execute GetDigests command .
5106	Get a list of private keys .
5107	Prepares a multisig transfer command .
5108	Concatenate two lists .
5109	Convert integer to a list of integers .
5110	Add the left and right to the right .
5111	Adds the given carry to the left and right .
5112	Prints the seed .
5113	Executor for find_transactions
5114	Execute GetInputCommand .
5115	Get new addresses .
5116	Executor for get_transfers
5117	Promote a transaction .
5118	Send a replay command .
5119	Send a transfer command .
5120	Send a trytes command .
5121	Resolve an adapter .
5122	Send a request .
5123	Log a message .
5124	Send an HTTP request .
5125	Interpret the response from the server .
5126	Seed a response .
5127	Add a digests digest .
5128	Get the multisig address .
5129	Iterate over the seed generator .
5130	Convert a Digest object to an Address object .
5131	Generate an address from a key_iterator .
5132	Returns a list of Transaction objects for the given adapter .
5133	Iterate over the addresses used by the given seed .
5134	Get all the bundles from a list of transaction hashes .
5135	Return the codec name for the given codec .
5136	Get codec info .
5137	Encode a binary string .
5138	Decode a value .
5139	Generate a list of addresses .
5140	Add a route .
5141	Construct a Transaction from a string .
5142	Return a JSON - compatible representation of this bundle .
5143	Return the signature validation data .
5144	Sets the state of this transaction .
5145	Get all the messages in this transaction .
5146	Return a list of strings as strings .
5147	Return a list of all the transactions in this transaction .
5148	Recursively discover all commands in a package .
5149	Execute the command .
5150	Apply filter to value .
5151	Returns the URL for a job .
5152	Return a list of errors .
5153	Return True if validator is valid False otherwise .
5154	Generator for validators .
5155	Retrieves the signature errors for a bundle .
5156	Returns the error if the group signature is invalid .
5157	Traverse a bundle .
5158	Start the REPL .
5159	Return a random seed .
5160	Computes the digest of the fragment .
5161	Signs all inputs in a bundle using the security level .
5162	Print pretty representation of this object .
5163	Iterate over the given trits .
5164	Squeeze the given tensor using the given offset .
5165	Add a context to an exception .
5166	Get security level .
5167	Increment the legacy tag .
5168	The Tag of this transaction .
5169	Add a transaction to the bundle .
5170	Finalize the bundle .
5171	Sign all the inputs at the given key_generator .
5172	Sign input at start_index .
5173	Create an input transaction .
5174	Convert value to standard unit .
5175	Decompress a G1 compressed point .
5176	Compute the inverse of a prime field .
5177	Create an instance from a json file .
5178	Find all words in the given category .
5179	Find the synonym for a word .
5180	Expand abbreviations .
5181	Splits a description into parts .
5182	List of categories .
5183	Return a new colour .
5184	Plot the component .
5185	Instantiate a DataFrame from a name .
5186	Create a TimeScale object from a given name .
5187	Create a new Color instance .
5188	Create a Color object from an image file .
5189	Create a Legend object from a CSV file .
5190	Convert to csv format
5191	The maximum width of the table .
5192	Return a Decor object for a given component .
5193	Return the value of a given attribute .
5194	Get the color component of the legend .
5195	Plot the data .
5196	Create a Component from a text string .
5197	Return a summary of the component .
5198	Deprecated .
5199	Process a single row .
5200	Parse a CAN string into a dictionary .
5201	Return True if z is strict
5202	Return a list of unique thicknesses .
5203	Construct a list of Intervals from a set of values .
5204	Clean longitudinal data .
5205	Construct a TimeSeries from a PETREL file .
5206	Build a list of intervals from a dictionary .
5207	Create a Striplog from a CSV file .
5208	Create a TimeSeries from an image file .
5209	Create a Striplog from a Log object .
5210	Create a Translation object from a string .
5211	Create Intervals from a CAN file .
5212	Return a shallow copy of the Striplog .
5213	Writes the list to a CSV file .
5214	Convert tolas3 format .
5215	Plot the axes .
5216	Get the data for a given field .
5217	Extract a value from a basis set .
5218	Return a list of items matching the given criteria .
5219	Find all intersections in the triangulation .
5220	Find all gaps in the matrix .
5221	Prune a Striplog .
5222	Return a copy of the strip .
5223	Return a copy of this Polygon .
5224	Return the union of two Striplog objects .
5225	Return a new Striplog with all striplog .
5226	Merge overlapping gaps .
5227	Plot the histogram .
5228	Invert a Striplog .
5229	Crop the list into a new one .
5230	Compute the quality of each test .
5231	Convert hex color name to color name
5232	Get loglike from an image .
5233	Get field name .
5234	Returns a list of all the jobs in the queue .
5235	Parse a JobHCL .
5236	Update a token .
5237	Get all the allocations for a given prefix .
5238	Fail a deployment .
5239	Pause a deployment .
5240	Update deployment health .
5241	Drain a node .
5242	Drain a node .
5243	Set an eligible node .
5244	Retrieve a list of files from the server .
5245	Stream the content of a document .
5246	Stat a file
5247	Join a list of addresses .
5248	Update a list of servers .
5249	Force a node to leave .
5250	Get all the nodes in the network .
5251	Retrieves the evaluation results .
5252	Get a list of namespace namespaces .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Revert a job .
5257	Change the status of a job .
5258	Delete a job .
5259	Get the current configuration .
5260	Delete a peer .
5261	Get all deployments .
5262	Get a random object .
5263	Get mutator .
5264	Get a random polyglot attack .
5265	Randomly fuzz the given object .
5266	safe version of safe_unicode
5267	Run the server .
5268	Stop the server .
5269	Generate a static HTML file .
5270	Start the server .
5271	Mutate an object .
5272	Spawn a command .
5273	Get the output of the process .
5274	Finish the read process .
5275	Close the multiprocessing process .
5276	Start the server .
5277	Execute the given object .
5278	Encode a function as JSON .
5279	Build a random string .
5280	Build the grammar .
5281	Return string representation of q .
5282	Build a random variates .
5283	Build an OptGram .
5284	Builds the definition for this ref .
5285	Build a STAR .
5286	Shutdown the process .
5287	Run the daemon and monitor it .
5288	Start the process .
5289	Generate a random float .
5290	Add a definition to a category .
5291	Add a definition to a cat group .
5292	Generate the grammar .
5293	Recursively fuzz the given element .
5294	Returns the fuzzed string .
5295	Returns a JFFetched instance of this JFFBase .
5296	Decorator for mutate objects .
5297	Signal handler .
5298	Quit the shell .
5299	Handles the pause command .
5300	Resumes the command .
5301	Stop the command .
5302	Handles command restart
5303	Returns a list of Skype events .
5304	Set the mood .
5305	Set avatar .
5306	Get the metadata for a URL .
5307	Get a single contact
5308	Retrieve a single user .
5309	Get the list of bots .
5310	Get a bot by id .
5311	Search for Skype users .
5312	Returns a list of Skype requests .
5313	Create an object from a dictionary .
5314	Merge this object into this one .
5315	Merge an object into the cache .
5316	Make a sync state call .
5317	Read token from token file .
5318	Write token to file .
5319	Verify that the token is valid .
5320	Refresh Skype token .
5321	Retrieves the user ID .
5322	Get a new registration token
5323	Synchronize all the endpoints .
5324	Check if a user is authorized to access the given user .
5325	Takes a token and returns the token
5326	Authenticate to Skype
5327	Configure the messaging service .
5328	Ping the user .
5329	Get the recent chats .
5330	Get chat information .
5331	Create a new chat
5332	Return the ID of a user .
5333	Convert a chat to a chat ID
5334	Iterate over an iterable yielding each item .
5335	Return unicode text no matter
5336	Try to detect the format of a given text .
5337	Parse text and return metadata and content .
5338	Post as a dict for serializing
5339	Load a yaml file
5340	Export metadata to YAML
5341	Turn metadata into JSON
5342	Match pattern .
5343	Return a list of all items .
5344	Return a list of lists with the given index .
5345	Change pattern .
5346	Return the argument list .
5347	Return a list of lists matching the given pattern .
5348	Parses a list of strings into a dictionary .
5349	Convert a dictionary into a regular expression .
5350	Check that the index is valid .
5351	Insert string at index .
5352	Partition a character by character .
5353	Return the number of subspans for the given type .
5354	Shrink all spans .
5355	Insert a new span .
5356	Return the number of nesting levels .
5357	Return the shadow of the span .
5358	Return the shadow of the link shadow .
5359	Return a dictionary containing the number of spans .
5360	Deprecated .
5361	The parameter list .
5362	The parser functions .
5363	The list of Template objects .
5364	The list of WikiLinks .
5365	The comments .
5366	List of external links .
5367	List of sections .
5368	Return a list of Table objects .
5369	r Returns a list of lists .
5370	Returns a list of Tag objects .
5371	Iterate over the subspans of the given type .
5372	Return a list of all the ancestors of the text .
5373	Return the parent of the given type .
5374	Return the mode of a list .
5375	Find an argument by name
5376	Return a normalized name .
5377	Remove duplicate arguments from the command line .
5378	Remove duplicate arguments .
5379	Set an argument .
5380	Get an argument by name .
5381	Return True if the argument has the given name and value .
5382	Delete an argument by name
5383	Convert CRSC code to string .
5384	Search for an ellipsoid
5385	Create a crs object from a URL .
5386	Create a GeoJSON object from a file .
5387	Convert an EPSG code to a CRS object .
5388	Convert an ESRI code into a CRS object .
5389	Create a crs object from an SR code .
5390	Return a crs object from a string .
5391	Write the record data to the file .
5392	Create a VLR instance from a stream .
5393	Parses GeoTiff keys from vlrs .
5394	Parse geotiff key and return a list of GeoTiffKey objects .
5395	Return the signedness for the given type_index .
5396	Return the ID for the extra dimension type .
5397	Create a new Point instance from another point record .
5398	Copies fields from another record from another one .
5399	Add zeros to the array .
5400	The names of all dimensions .
5401	Create an array of zeros .
5402	Create a Point from a stream .
5403	Create a Point from a compressed buffer .
5404	The x - axis of the data .
5405	The y axis of the data .
5406	The z - axis of the z - axis .
5407	Add extra dimensions .
5408	Write the point data to the stream .
5409	Write to a file .
5410	Write to a file .
5411	Build dtypes dtypes dtypes dtypes dtypes dtypes .
5412	Builds dtypes dtypes dtypes dtypes dtypes dtypes .
5413	Convert numpy dtype to point format .
5414	Return the minimum file version for a point format .
5415	Determine if a point format format is compatible with the given file format .
5416	Return a list of vlrs with the given type .
5417	Return a list of vlrs that match the given type .
5418	Read VLR list from data stream .
5419	Return True if all files have the same point format .
5420	Return True if the points have the same dtype .
5421	Check file signature .
5422	Read a header from the stream .
5423	Read VLRL list .
5424	Read the points from the stream .
5425	Read compressed points data .
5426	Reads incoming waveform packet .
5427	Read EVLRS .
5428	Log if the file is not at the end of the stream .
5429	Open alas file .
5430	Read the contents of alas file .
5431	Create alas data object from a header .
5432	Create alas dataset .
5433	Convert a point_format to a file .
5434	Merge a set of locations into a single object .
5435	Write alas file to disk .
5436	Returns the datetime . datetime object .
5437	Set creation date .
5438	The minimum and z - z - axis .
5439	Set min and z_min .
5440	The maximum z - axis .
5441	Set maximum values .
5442	A 2D array of the x - axis scales .
5443	The coordinates of the x - axis .
5444	Read a file version from a file - like object .
5445	Convert old_header to new_version
5446	Unpack the source_array .
5447	Pack an array into an array .
5448	Return a list of all dimensions that have been lost .
5449	Return a dictionary with all sub - fields .
5450	The number of extra bytes in this dimension .
5451	Return True if the dimension has a waveform packet .
5452	Main function for the satel_integra library .
5453	Calculate the checksum of a command .
5454	Print data to stdout .
5455	Verify and return the checksum of the response .
5456	Return a list of set bits .
5457	Generate a query string .
5458	Run the server .
5459	Connect to the server .
5460	Start monitoring .
5461	Disarm the given code .
5462	Clears the alarm .
5463	Turn the output .
5464	Keep keep alive .
5465	Monitor the status .
5466	Close the stream .
5467	Purge the database .
5468	Guess the file type .
5469	Get file ID for given path .
5470	Get a notebook .
5471	Create a notebook model from a record .
5472	Get a directory .
5473	Convert a list of file records into a Python object .
5474	Create a directory model from a record .
5475	Create a file model from a record .
5476	Save a notebook .
5477	Save a file to disk .
5478	Rename a file
5479	Delete a file .
5480	Ensure a user is in the database .
5481	Delete a user .
5482	Create a directory .
5483	Return True if table is in a directory .
5484	Delete a directory .
5485	Determine if a directory exists .
5486	Return a list of files in a given directory .
5487	Return all directories in a directory .
5488	Return a filter for files that match the api_path .
5489	Select files for a given user .
5490	Return the default fields for file creation .
5491	Get a single file from the database .
5492	Get a file from a user .
5493	Get the file ID for a file .
5494	Check if a file exists
5495	Rename a directory .
5496	Save a file .
5497	Generate a list of notebooks .
5498	Delete remote checkpoints .
5499	Generate checkpoint files .
5500	Generate the notebooks for a given table .
5501	Recrypt a row .
5502	Reencrypt the contents of a user .
5503	Derive a single fernet key .
5504	Derive fallback keys from a list of passwords .
5505	Factory function for single - password encryption .
5506	Memoize a single argument .
5507	Get the name of a column .
5508	Convert a row to a dict .
5509	Convert a row to a dictionary .
5510	Create a checkpoint .
5511	Create a remote file .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	List remote checkpoints for a path .
5515	Rename all checkpoints .
5516	Delete all checkpoints in the database .
5517	Purge the database .
5518	Resolve the root manager and return the root manager .
5519	Apply prefix to model .
5520	Decorator to apply a function to a model .
5521	Decorator to apply a kwarg to a model .
5522	Decorator for path_dispatch
5523	Called when manager changes .
5524	Perform a GET request .
5525	Normalize API path .
5526	Splits an API file path into a tuple .
5527	Convert nb to base64 .
5528	Read a base64 encoded file .
5529	Decode unknown bytes from base64 .
5530	Decode a base64 encoded file .
5531	Return a list of all directories in path .
5532	Decorator to raise a 404 error .
5533	Create a user .
5534	Separate the directories and files from a model .
5535	Iterate over all subdirectories .
5536	Iterate over all the files in the given manager .
5537	Iterate over all the files with content .
5538	Reencrypt multiple users .
5539	Reencrypt a single user .
5540	Unencrypt multiple users .
5541	Unencrypt a single user .
5542	Temporarily create a temp file .
5543	Upgrade a database .
5544	Sanitize a block .
5545	Adds an instance to the model .
5546	Load instances for embed_type .
5547	Insert an instance into the block .
5548	Load the embedded embedding data .
5549	Validate data .
5550	The admin page .
5551	Return the JSON representation of this object .
5552	Hide all of the authenticated fields .
5553	Remove fields from the request .
5554	Sets the preview_id and preview_id .
5555	Returns the published queryset .
5556	Returns the queryset .
5557	Returns the attribute s value .
5558	Validate a Widget
5559	Validate a zone .
5560	Validate a UUID
5561	Return the admin permissions .
5562	Modify user s permissions .
5563	Validate author data .
5564	Save a zone .
5565	Return the data as a dictionary .
5566	Prepare data .
5567	Render the template .
5568	Get the settings for this Integration .
5569	Retrieve a callback .
5570	Get the settings for an integration .
5571	Update an integration settings .
5572	Signup .
5573	Return a unicode string with the given contents .
5574	Render a zone .
5575	Save the featured image .
5576	Save a subsection .
5577	Return the file extension .
5578	Returns the URL for the image .
5579	Save the image .
5580	Save a thumbnail .
5581	Return the connection to the database .
5582	Returns a BandwidthStream object for the given fileobj .
5583	Read amount of bytes from the file .
5584	Consume the amount for the given amount .
5585	Schedule the amount of time to consume .
5586	Process a scheduled consumer .
5587	Calculates the projected rate for the given amt .
5588	Record the consumption rate .
5589	Submit a file to a bucket .
5590	Wait for a transfer to finish .
5591	Return a list of callbacks for transfer_type .
5592	Filters a dictionary based on whitelisted_keys .
5593	Decrement the counter .
5594	Finalize the pool .
5595	Determines if a file is a special file .
5596	Acquire a tag .
5597	Release an acquire token .
5598	Adjust the chunk size .
5599	Adds a file - like task to the executor .
5600	Returns an IOWriteTask for the given fileobj .
5601	Return the appropriate download manager class .
5602	Main function .
5603	Write data to file .
5604	Request data from the heap .
5605	Return True if the fileobj is seekable .
5606	Upload a file to a bucket .
5607	Download a file from a bucket .
5608	Copy a source to a bucket .
5609	Delete an item from a bucket .
5610	Shutdown the server .
5611	Cancel a message .
5612	Wait for each transfer to finish .
5613	Read data from a file - like object .
5614	Wrap data into a file object .
5615	Get upload manager class .
5616	Sets the exception .
5617	Set the result .
5618	Set the exception of the future .
5619	Return the result .
5620	Cancels the task .
5621	Submits a task to the given executor .
5622	Add a function to the future .
5623	Add a failure cleanup function .
5624	Called when the task completes .
5625	Submit a task to the executor .
5626	Add a callback function to the future .
5627	Upload a file to S3 .
5628	Download a file from a bucket .
5629	Iterate over all step decorators .
5630	Parse a decorator step .
5631	Refact a step .
5632	Iterate over step decorators .
5633	Return the first step from the decorated function call .
5634	Refact a step .
5635	Select Python parser .
5636	Gets a list of items from the team .
5637	Create a new person .
5638	Update a membership .
5639	Deletes a membership .
5640	Returns the current catfact .
5641	Create a new Webhook
5642	Gets a list of items from the API .
5643	Delete a membership .
5644	Validate a base URL .
5645	Return True if given string is a web URL .
5646	Open a local file .
5647	Check if an object is of acceptable_types .
5648	Create a dictionary from a list of dictionaries .
5649	Check the response status code .
5650	Convert json_data into a dict .
5651	Convert a date string to a string .
5652	Gets a list of items from the API .
5653	Create a new team .
5654	Update a room .
5655	Delete a room .
5656	Gets a list of items from the API .
5657	Dataset creation date .
5658	Get access token .
5659	Create an event .
5660	Update a webhook .
5661	Delete a webhook .
5662	Ensure that the next_url is a valid URL .
5663	Sets the wait_on_rate limit .
5664	Update the headers .
5665	Return the absolute URL of the given URL .
5666	Perform a request .
5667	Perform a GET request .
5668	Get a list of pages from a URL .
5669	Get a list of items from the API .
5670	Make a PUT request .
5671	Perform a DELETE request .
5672	Create a new subscription .
5673	Retrieve a list of items from a room .
5674	Create a new message .
5675	Delete a message .
5676	Create a new contact .
5677	Get a person .
5678	Update a person .
5679	Delete a person .
5680	Retrieves the current user .
5681	Retrieve a list of items from the API .
5682	Retrieve a list of objects from the API .
5683	Create an object .
5684	Update a team .
5685	Delete a team .
5686	Retrieve a list of items from the API .
5687	Serialize data into a tuple .
5688	Get an access token .
5689	The last activity .
5690	Process webhook requests .
5691	Retrieves the NGRK public URL .
5692	Delete webhook with given name
5693	Create a webhook .
5694	Main entry point .
5695	Command line interface .
5696	Read telegram data from the serial port .
5697	Read messages from the queue .
5698	Create a DMR protocol .
5699	Create a DSM reader .
5700	Create a connection to a remote host .
5701	Handle incoming data .
5702	Called when a connection is lost .
5703	Handle a telegram .
5704	Parse telegram data .
5705	Get the version from a file .
5706	Ensure a Python version is a valid Python version .
5707	Return a list of packages in the given directory .
5708	Create a command class .
5709	Returns a Command for the given function .
5710	Run a command .
5711	Make sure targets exist .
5712	Wrap a command into a class .
5713	Create a file handler for a package .
5714	Retrieve data files from the data_specs .
5715	Get package data .
5716	Compile a glob pattern .
5717	Iterate over a path .
5718	Translate a glob pattern .
5719	Join the translated parts .
5720	Translate a glob part into a regular expression .
5721	Truncate a table .
5722	Write a table .
5723	Write indexes to database .
5724	Write triggers to the database .
5725	Write constraints to database .
5726	Write the contents of a table .
5727	Process a row .
5728	Write the indexes to the file .
5729	Write constraints to file .
5730	Write triggers to file .
5731	Return the number of items in the queue .
5732	Enqueue new data into the database .
5733	Start the scheduler .
5734	Builds an extra predicate .
5735	Simple JSON datetime serializer .
5736	Reconnect to the database .
5737	Execute a query .
5738	Return a connection to the database .
5739	Run the benchmark .
5740	Establish a connection to the pool .
5741	Lookup an error by number .
5742	Return the total number of connections .
5743	Handle a connection failure .
5744	Create a simple expression with the given fields .
5745	Create an UPDATE statement .
5746	Connect to the database .
5747	Sets up the database .
5748	Destroys the database .
5749	Start a step .
5750	Stop a step .
5751	Parse the start and stop values
5752	Disconnect from the API .
5753	Reconnect to the server .
5754	Connect to the server .
5755	Called when a new message is received .
5756	Stop timers .
5757	Send ping to the API .
5758	Check pong .
5759	Send an authentication request .
5760	Remove the subscription .
5761	Process a system message .
5762	Handles client info .
5763	Default error handler
5764	Called when data is received .
5765	Unsubscribe from the channel .
5766	Handle authentication data .
5767	Handle a configuration packet .
5768	Update the timestamps of a channel .
5769	Reset the connection .
5770	Retrieve the candles for a given pair .
5771	Set the bitfinex configuration .
5772	Subscribe to a ticker .
5773	Unsubscribe from a tick .
5774	Subscribe to an order book .
5775	Unsubscribe from order book .
5776	Subscribe to raw order book .
5777	Unsubscribe from raw order book .
5778	Subscribe to a trade .
5779	Unsubscribe from a pair .
5780	Subscribe to a broker .
5781	Unsubscribe from a pair .
5782	Authenticate the API .
5783	Cancel an order .
5784	Process a command .
5785	Process a device command .
5786	Process a pika notification .
5787	Create a device type .
5788	Publish an event .
5789	Update a device .
5790	List client status .
5791	List custom bundles
5792	Create a custom bundle
5793	Update a schema
5794	Disconnect from IBM Watson IoT Platform
5795	Called when a connection is received .
5796	Subscribe to device events .
5797	Subscribe to a device status .
5798	Subscribe to device commands .
5799	Publish a command .
5800	Called when an unsupported message is received .
5801	Called when a device is received .
5802	Called when a device status message is received .
5803	Called when app status changes .
5804	Get the last event .
5805	Get all events for a device .
5806	Make an API call .
5807	Initiate a mgmt request .
5808	Get the status of a request .
5809	Close the index .
5810	Returns the number of results in the specified coordinates .
5811	Retrieve the nearest neighbors of the specified coordinates .
5812	Retrieves the bounds of the index .
5813	Delete an index .
5814	Create an index from a stream .
5815	Load a byte array from the page .
5816	Remove an object from the index .
5817	Error checking for Error calls
5818	Load the application .
5819	Initialize Flask application .
5820	Starts the development server .
5821	Convert value into native image format .
5822	Crop the image on a center point .
5823	Process an image .
5824	Process an image .
5825	Process an image .
5826	Convert the data into a python object .
5827	Process placeholder image .
5828	Update PPOI field .
5829	Update PPOI field .
5830	Sets the value of the field .
5831	Sets the form field .
5832	Convert obj to string .
5833	Auto - discover unused images
5834	Unregisters an SizedImage subclass .
5835	Unregisters a Filter subclass .
5836	Returns the URL for the placeholder image .
5837	Build filters and sizes for this field .
5838	Returns the root folder of this image
5839	Returns the root folder of this image .
5840	Returns the path to the uploaded root folder
5841	Delete files from the storage .
5842	Preprocess the image .
5843	Preprocess a GIF image .
5844	Preprocess a JPEG image .
5845	Retrieve an image from the storage .
5846	Saves an image to disk .
5847	Return the PPOI as a string .
5848	Create a resized image .
5849	Render the widget with the given name .
5850	Returns the context for rendering the widget .
5851	Merge attributes from base_attrs .
5852	Given a path_to_image returns a normalized path .
5853	Filters out the path_to_image and returns it .
5854	Validate a list of sizes .
5855	Get the url from an image_instance .
5856	Get rendition key set .
5857	Format an instruction .
5858	Format a function body .
5859	Decodes a bytecode .
5860	Decode a module .
5861	Mark a function as deprecated .
5862	Connect to RabbitMQ .
5863	Close the socket .
5864	Read the result from the reader .
5865	Handler for FastAGI requests .
5866	Parse the result of an AGI code check .
5867	Check an AGI code .
5868	Reset all instances .
5869	Returns a list of all the instances .
5870	Get the metadata for a set .
5871	Get the primary keys of a model .
5872	Deserialize value .
5873	Get an existing instance .
5874	Merge the declared fields .
5875	Deserialize a model .
5876	Split data into keyword arguments .
5877	Delete the table .
5878	Snapshot a database .
5879	List all snapshots .
5880	Restore a snapshot
5881	Delete a snapshot
5882	Renames a snapshot
5883	Replace a snapshot
5884	Updates indexes after each epoch for shuffling
5885	Preprocesses the given text .
5886	Apply a function to data .
5887	Construct a processor for processing text .
5888	Process text .
5889	Process text using parallel processing .
5890	Generate the document length statistics .
5891	Return a pandas DataFrame of token counts .
5892	Map a parameter type name to a list .
5893	Parse a list of interface names and return a dictionary of dicts .
5894	The inverse .
5895	Update the log with rollback .
5896	Return a shallow copy of the model .
5897	Return a shallow copy of the model .
5898	Compares two Mapping objects .
5899	Return an inverted version of an object .
5900	Clears the FSM .
5901	Moves a node to the end of the tree .
5902	Write text to a temporary file .
5903	Returns a list of addresses that match the query .
5904	Merge arguments into config .
5905	Load address books .
5906	Prepare query parameters .
5907	Create a new contact .
5908	Return a list of birthdays .
5909	Return a list of phone numbers .
5910	List vCard objects
5911	Modify a vhard .
5912	Executor for remove_subcommand
5913	Run a source subcommand .
5914	Submits a list of vCard objects to a vCard .
5915	Copy or move a vCard to another address book .
5916	Get action by alias .
5917	Convert a boolean value to a boolean .
5918	Create a new contact .
5919	Create a PrivateKey object from a file .
5920	Create a contact object from a user input .
5921	Create a new contact from an existing contact .
5922	Return a list of the names of a variable .
5923	Add a category .
5924	Parse a type value .
5925	Convert a list to a string
5926	Convert a string to a datetime object .
5927	Compares two ids .
5928	Search for all contacts
5929	Search for names matching a regular expression .
5930	Search for a given uid
5931	Search for the given address book .
5932	Get a dictionary of short ids .
5933	Get the short UUID for a given uid .
5934	Return a generator for VCF files .
5935	Load VCard from VCard .
5936	Get an abook by name .
5937	Return a dictionary of available archs .
5938	Return a dictionary of available archs .
5939	Return an inspect . ArgSpec for the given function .
5940	Dispatch a command .
5941	Prompt user for input .
5942	Encode a value .
5943	Guess the type of keyword arguments .
5944	Add commands to a parser .
5945	Decorator to set a new name .
5946	Decorator to add an argument .
5947	Prompts the user for confirmation .
5948	Return a new Query with new parameters replaced .
5949	Return a new Match object with the given values .
5950	Get the result of the query .
5951	Return the first item in the collection .
5952	Delete records from the database .
5953	Called when an entity is deleted .
5954	Execute a Lua prefix .
5955	Estimate the amount of work for a given index .
5956	Perform a search .
5957	Count the number of items in the database .
5958	Return the connection to an object .
5959	Convert a string to a list of strings .
5960	Refresh the indices of the model .
5961	Clean old index .
5962	Add an object .
5963	Return the value associated with the given key .
5964	Writes data to a linter .
5965	Save the object .
5966	Delete the object .
5967	Retrieve an object by id .
5968	Register a reduce function .
5969	Open a semaphore .
5970	Return the number of CPUs in the system
5971	Send a result back to the result queue .
5972	Process a worker .
5973	Add a pending work item to the queue .
5974	Ensure the executor is running .
5975	Wrap an object into a class .
5976	Start the server .
5977	Duplicate fd .
5978	Return a new executor .
5979	Waits for jobs completion before resizing .
5980	Get the preparation data for a process .
5981	Prepare the process .
5982	Close file descriptors .
5983	Terminate a process .
5984	Terminate a process .
5985	Get the exit codes for all processes .
5986	Format the exit codes .
5987	Main entry point .
5988	Ensure the process is running .
5989	A simple event processor that prints out events .
5990	Run the program .
5991	Interactively interact with the console .
5992	Split a string .
5993	Return a tuple of the frame and line number of frames .
5994	Run hooks on an object .
5995	Delete the stack .
5996	Get an integer from the current frame .
5997	Get an integer value .
5998	Process commands .
5999	queue startfile
6000	Get the next token from start_pos .
6001	Print an error message .
6002	Read command line .
6003	Close the connection .
6004	Disassemble a message .
6005	Disassemble a byte sequence of instructions .
6006	Return a count of the number of frames
6007	Returns the name of the call function .
6008	Print count entries of the stack trace
6009	Lookup a subcmd .
6010	Display a short help message .
6011	Add a subcmd callback .
6012	Run a command .
6013	Start the debugger .
6014	Shows the names of the given category .
6015	Main entry point .
6016	Find the traceback of a traceback frame .
6017	Return a dictionary mapping thread names to thread IDs .
6018	Return an integer .
6019	Get on or off .
6020	Set the value of an object .
6021	Set an integer value .
6022	Run show_on on
6023	Show an integer value .
6024	Show the value of a setting .
6025	Return True if the given line is a def statement .
6026	Return True if the given line is a class definition .
6027	Calls debuggerQuitQuit .
6028	Sets the default background color .
6029	Determine if a color is dark .
6030	Return the signature of a frame .
6031	Return a list of all the formats
6032	Return a list of display names for a given frame .
6033	Return a string describing the number .
6034	Read a single message from the socket .
6035	Print debug information .
6036	Undefined subcommand .
6037	Run a debugger .
6038	print a simple array
6039	Lookup a signal by number .
6040	Lookup a signal by name .
6041	Convert a name to a canonical name .
6042	Set a signal replacement .
6043	Check and adjust the sigandlers .
6044	Print info_signal .
6045	Action handler .
6046	Set print method .
6047	Handle a signal .
6048	Convert a filename to a module name .
6049	Search for a file in the given directories .
6050	Attempt to find a file in the PATH .
6051	All python files caller s dir without the trailing .
6052	Write a message to the output .
6053	Run the program .
6054	Columnize a list of commands .
6055	Run post - mortem .
6056	Close the connection .
6057	Write a message to the transport .
6058	Autocomplete an identifier .
6059	Execute a command
6060	Add frames to ignore_filter .
6061	Determine the location of a file .
6062	Return the filename for the given filename .
6063	Returns True if the tracer is started .
6064	Checks if the given frame is a stop statement
6065	Sets to stop on the next event that occurs in frame .
6066	Print a stack trace .
6067	Main entry point .
6068	Check function name .
6069	remove breakpointbpbp
6070	Remove a breakpoint given its breakpoint number .
6071	Enable or disable all breakpoints .
6072	Enable or disable a breakpoint given its breakpoint number .
6073	Delete breakpoints by filename .
6074	Open a file .
6075	Read a line from the input .
6076	Ask the user for confirmation .
6077	r
6078	r
6079	Convert a query into a future .
6080	Restore the original login .
6081	Load a Python module .
6082	Iterate over documents .
6083	Main function .
6084	Transcode json into a temporary file .
6085	Open a json or csv file .
6086	Normalize the data in a stream .
6087	Convert date_string to datetime
6088	Detect file encoding .
6089	Stream JSON data from a file .
6090	Transcode a file into UTF - 8 .
6091	Open a csv file .
6092	Read a csv file .
6093	Main entry point .
6094	Connect to the given URL .
6095	Save token to disk .
6096	Make an HTTP request .
6097	Make a DELETE request .
6098	Wait for the project to finish .
6099	Get the root url from a given URL .
6100	Save a token to a file .
6101	Make a JSON request .
6102	Make a POST request .
6103	Return a new URL with the given path .
6104	Get the user s default account .
6105	Return the documentation for this service .
6106	Wait for a job to finish .
6107	Perform a GET request .
6108	Print result to stdout .
6109	Read parameters from input file .
6110	Simplify a document .
6111	Create a project using lumi - upload .
6112	Create a project from a JSON file .
6113	Main function .
6114	Upload a stream from a stream .
6115	Upload a file to the server .
6116	Main entry point .
6117	Create a new login token from the given credentials .
6118	Login to requests .
6119	Post login page .
6120	Get data for a resource .
6121	Fetch data for each period .
6122	Load the view .
6123	Initialize the view .
6124	Render the view .
6125	Called when a change event is received .
6126	Update the menu .
6127	Return a list of static files .
6128	Event handler .
6129	Called when a DOM has changed
6130	Create the widget .
6131	Initialize the widget .
6132	Destroy this component .
6133	Add a child to the widget .
6134	Remove a child from this component .
6135	Iterate over all child widgets .
6136	Set widget attribute .
6137	Update the proxy .
6138	Notify about a change
6139	Returns a list of declarations that match the query .
6140	Initialize the object .
6141	Initialize widget .
6142	Set HTML source .
6143	View mode change
6144	View a block change
6145	Update the children .
6146	Read the contents of a file .
6147	Print an error message .
6148	Print error message .
6149	Get product by name .
6150	Create a new session .
6151	Reset the store .
6152	Get all stores by search term .
6153	Sets delivery system .
6154	Get the menu for a given store .
6155	Add item to basket
6156	Adds a pizza to the basket
6157	Adds a side to the basket
6158	Remove an item from the basket .
6159	Sets the payment method .
6160	Process a payment .
6161	Make a GET request .
6162	Make a POST request .
6163	Make an API call .
6164	Add an item to the menu .
6165	Add an exit .
6166	Draws the menu .
6167	Process user input .
6168	Selects the selected item .
6169	Parse the old_menu_data into a CursesMenu .
6170	Sort a DataFrame by a given value .
6171	Group a DataFrame by a given aggregation function .
6172	Convert a string to a datetime
6173	Convert datetime to string
6174	Change date format .
6175	Cast a column to a given type
6176	Rank a DataFrame .
6177	Convert a DataFrame into a pandas DataFrame .
6178	Helper function for _math_operation .
6179	Round the values in a DataFrame .
6180	Change the absolute values of a column .
6181	Pivot dataframe .
6182	Pivot dataframe by value
6183	Group a DataFrame by grouped columns .
6184	Compute the cumulative sum of a column .
6185	Add a missing row to a DataFrame .
6186	Decorator to catch exceptions .
6187	Log a message .
6188	Logs the time of a function .
6189	Decorator to log output shapes .
6190	Renames the given values .
6191	Compute the sum of the values in a DataFrame .
6192	Combine a DataFrame with grouped columns .
6193	Get the value of a function call .
6194	Remove old entries from cachedir .
6195	Roll up a pandas DataFrame .
6196	Get the maximum value of a column .
6197	Get the minimum value of a column .
6198	Fill missing values with given value .
6199	Add an offset to a datetime object .
6200	Add a number of months to a date .
6201	Add a date to a date object .
6202	Parse a date string .
6203	Filter DataFrame by a date range .
6204	Change the percentage of a column .
6205	Core function for ADA family .
6206	Get optimization updates .
6207	Get training parameters .
6208	Update optimization parameters .
6209	Compute the first Glimpse of the image .
6210	Prepare the encoder .
6211	Compute the tensor .
6212	Apply a function to each set .
6213	Vectorize the target .
6214	Print statistics about the training set .
6215	Train the model .
6216	Samples the input .
6217	Compute alignments based on previous values .
6218	Compute the context vector .
6219	Concatenate multiple tensors .
6220	Pad the dataset .
6221	Calculate the rmsprop .
6222	Report the elapsed time .
6223	Compute the cost function .
6224	Run the monitor .
6225	Build loop variables .
6226	Perform a scan step .
6227	Compute the momentum and free parameters
6228	Perform training step .
6229	Skips the current epoch .
6230	Load parameters from a file .
6231	Train the model .
6232	Run a training step .
6233	Run a valid step .
6234	Print a message to stdout .
6235	Get the current dataset .
6236	Apply a function to the tensor .
6237	Log the current parameters
6238	Compute the variance of a tensor .
6239	Create a list of variables from a dataset .
6240	Create a shared variable .
6241	Stack encoders .
6242	Stack a list of decoders .
6243	Compute the encoder .
6244	Decodes the input using the decoding function .
6245	Create 2D Gaussian .
6246	Register a layer .
6247	Measure the mean of each layer .
6248	Return a list of all parameters .
6249	Setup the input tensor .
6250	Compute and return the result .
6251	Save model parameters to disk .
6252	Load parameters from a file .
6253	Print information about the network .
6254	Register new parameters .
6255	Register updates .
6256	Register new training updates .
6257	Register one or more monitors .
6258	Compute the square root of a tensor .
6259	Save elt to pickle
6260	Load an element from a file - like object .
6261	Load model parameters .
6262	Create request elements .
6263	Decode a user s state .
6264	Parses the credentials .
6265	Remove client_id from request_type .
6266	Login to AWS .
6267	Normalize a dictionary .
6268	Convert a list of items into a dictionary .
6269	Parse a query string .
6270	Resolve provider class
6271	Create a cookie .
6272	Save the current session .
6273	Get the cookie value .
6274	Return the data as a dictionary .
6275	Calculate the HMAC signature .
6276	Serialize the value .
6277	Returns True if this key is valid .
6278	Checks if the lock expires .
6279	Serialize credentials .
6280	Return True if content is a binary string .
6281	Return the content of the response .
6282	Create OAuth elements .
6283	Access the user s email address .
6284	A decorator that ensures that the user is logged in .
6285	Login to OpenID server .
6286	Generate a session key .
6287	Sets a session value .
6288	Generate a random CSRF .
6289	Log a message .
6290	Return True if http status is in the given category .
6291	Split a URL into parts .
6292	Decorator to enable cross - origin .
6293	Set CORS headers .
6294	Returns a dict of CORS_OPTIONS_OPTIONS .
6295	Convert obj to str
6296	Ensure inst is iterable .
6297	Return True if two floats are almost equal .
6298	Mark a function as deprecated .
6299	Deserialize a string into a AudioSegment object .
6300	Create an AudioSegment object from a file .
6301	Create an AudioSegment object from a numpy array .
6302	Execute a shell command .
6303	Filter a WAV file .
6304	Compute the Fourier transform .
6305	Generate frames from the stream .
6306	Normalize the SPL of the audio segment .
6307	Return a new AudioSegment with the same data .
6308	Resample the stream .
6309	Serialize the state to a pickle file .
6310	Calculate the spectrogram .
6311	Given a list of candidate offsets return the earliest offset .
6312	Determine the nearest offset_front_idx .
6313	Returns the offset_front_id of the nearest onset_front .
6314	Matches the OffsetFront front ID to an Offset .
6315	Given an onset and onset_front and offset_front and offset_fronts return a list of tuples corresponding to those components .
6316	Update the segmentation mask .
6317	Get the index of a front .
6318	Return a set of front ids for each front .
6319	Return the offsets corresponding to the given offsets .
6320	Remove overlapping segments from the front .
6321	Remove front rows that are smaller than size .
6322	Given a list of front and a list of front ids return a dictionary of breaks that match the given threshold .
6323	Merge adjacent segments .
6324	Split masks into masks .
6325	Downsampling of a mask .
6326	Perform an ANTsA task .
6327	Bandpass filter
6328	Lowpass filter .
6329	Convert list to tf . input .
6330	Expand the given data set and return the modified dataset .
6331	Tests whether two elements are equal .
6332	Group the audit Ranks into a list of scores .
6333	Load the confusion matrix from an audit file .
6334	Convert a list of responses to tf . Tensor .
6335	Update pip_index_url from environment variables .
6336	Autodetect files .
6337	Return a list of StreamInfo objects for all streams .
6338	Get a list of streams by property value .
6339	Resolve streams by predicate .
6340	Handles an error .
6341	Push a sample to the stream .
6342	Push a chunk to the stream .
6343	Get the stream info .
6344	Open the stream .
6345	Change the time correction of the object .
6346	Return the child element with the given name .
6347	Return the next sibling of the next sibling .
6348	Return the previous sibling of the previous sibling .
6349	Sets the name .
6350	Sets the value .
6351	Append a child to this element .
6352	Prepend a child to the current element .
6353	Return a copy of the element .
6354	Return an XMLElement of an element .
6355	Remove a child from an element .
6356	Retrieve the results of the resolver .
6357	Display a word pair .
6358	Autocomplete a query string .
6359	Compute the ngrams from the given token .
6360	Iterate over a given pipe .
6361	Iterate over an iterable of chunks .
6362	Make a fuzzy fuzzy word from a string .
6363	make a fuzzy word
6364	index a word
6365	Extract the results from the results .
6366	Print help for a command .
6367	Display the database information .
6368	Get a DBKEY
6369	Compute the geohash of a given latitude and longitude .
6370	Get a single item
6371	Index a document .
6372	\ Returns the score of a word .
6373	Compare two strings .
6374	Send a request to the server .
6375	Iterate over a list of requests .
6376	Convert an array into a Bits object .
6377	Convert armrs to bitsT .
6378	Convert a slice to a Slice .
6379	Find all files matching a pattern .
6380	Test if an iterable is in the given iterable .
6381	Apply a function to each item in items .
6382	Logical shift left
6383	Return the log2 of x .
6384	Return True if num is a pow2 .
6385	c - like case of switch statement
6386	Registers default statements .
6387	Register the vcd .
6388	Called when the simulation is called .
6389	Log a change .
6390	Render a HDL process .
6391	Auto - add agents to the unit .
6392	Return the associated clk .
6393	Yield successive elements from iterable .
6394	Group a collection by a function .
6395	Flatten an iterable .
6396	Merges the ifContainer with ifStm ifStm .
6397	Remove signals from netlist .
6398	Checks if the proc is too simple .
6399	Merges two processes .
6400	Takes a list of processes and merges them into one .
6401	Called when a write request is received .
6402	Serialize a unit to a Rtl file .
6403	Returns the name for processing and mark outputs .
6404	Remove all drivers of a given signal from a list of statements .
6405	Register a signal .
6406	Synthesize the HDL instruction .
6407	Returns the maximum stmId for the given stm .
6408	Returns the maximum number of statements in a proc .
6409	Write data to the simulation .
6410	Change the direction of the master .
6411	Load declarations .
6412	Return a list of signals for this interface .
6413	Returns the physical name of this entity .
6414	Return the bit length of this struct .
6415	Return the sensitivity of an operation .
6416	Evaluate an operator .
6417	Convert this operator to another type .
6418	Re - interpret the bits in hStructT .
6419	Compute the total number of words between start and end .
6420	Iterate over the parts of the multithmplist .
6421	Pretty print interface information .
6422	Generates frames from a TransTmpl template .
6423	Iterate over the parts of this word .
6424	Packs the data into a single word .
6425	Clean meta data for all signals .
6426	Find enclosure for all outputs .
6427	Discover the sensitivity sequence .
6428	Get RTL context .
6429	Called when the reduce statement is reduced .
6430	Merge two statements .
6431	Return True if two statements are merged .
6432	Merges a list of statements into a single list .
6433	Merge two lists of statements .
6434	Reduce a list of statements to a reduced list .
6435	Called when the parent model has changed .
6436	Sets the parentStm of this statement .
6437	Add the stements to the target list .
6438	Destroys this statement .
6439	Registers a register .
6440	Generate a signature for a given type .
6441	Cleans up the entity .
6442	Recursively iterate over HStructFields .
6443	Unpack an HStruct into a HStruct .
6444	Convert this operator to a signed value .
6445	Add a sensitivity to the system .
6446	Evaluate conditions .
6447	Connect a port to a subSimUnit .
6448	Create a new value updater .
6449	Create an array update function .
6450	Create a Vector instance from val .
6451	Register a HWProcess object .
6452	Evaluate a parameter .
6453	Set the value of the parameter .
6454	Construct HStruct from an interface map .
6455	Remove all resources from the memory .
6456	Determine the index of the active value .
6457	Convert a Python object to a value .
6458	Cast a signal to another type .
6459	Re - interpret the value of the signal .
6460	Recursively walk the parameters of an interface .
6461	Return a list of all connected components connected to a packed pointer .
6462	Concatenate an interface into a signature .
6463	Convert a rom into a list of HW processes .
6464	Convert this object to an Rtl .
6465	Registers an interface in the interface .
6466	Try to reduce and return the result if the value is less than or equal .
6467	Try to reduce a value to a scalar .
6468	Returns the base name scope .
6469	Decorator for serialization decision .
6470	Return HDL type for given type .
6471	Return a HDL representation of the IfContainer .
6472	Return the base condition of a condition .
6473	Return a SimBitsT .
6474	Get a constant name .
6475	Cuts off all drivers of this signal .
6476	Load from an array .
6477	Load a transpose from a HDL struct .
6478	load from hdtype
6479	The width of the item .
6480	Recursively walk the structure at offset .
6481	Replaces the value with the given width .
6482	Merge the contents of another statement with another one .
6483	Get an indented indent number .
6484	Raise IntfLvlConfConfConflict if property name is not available .
6485	Register a parameter .
6486	Updates the parameters of this ParamDeclrCollector .
6487	Register a unit .
6488	Registers an interface .
6489	Register an array .
6490	Return the first driver .
6491	Evaluate the operands .
6492	Create an operator with the given operands .
6493	Return a new context with the given indent .
6494	Try to connect a unit .
6495	Propagate clk .
6496	Propagate CLK and RSTN .
6497	Propagate clk and rst .
6498	Propagate rstn to rst n .
6499	Propagate rst to rst
6500	Iterate over the bits in a signal .
6501	Serialize the ExcludeEval to the parent .
6502	Serialize a parent unit into an entity .
6503	Serialize the parents of the parent unit .
6504	Get the full name of the object .
6505	Make an association for each object .
6506	Prepare a unit for a unit .
6507	Convert a unit into a SimModel .
6508	Reconstruct signals to the model .
6509	Simulate the unit VCD and output files .
6510	Initialize onT write callback .
6511	Connect this port to a signal .
6512	Register a signal .
6513	Connect this signer to the destination .
6514	Return the receiver s identifier .
6515	Determines if a signal is dependent on a signal .
6516	Add a process .
6517	Add a proc to the scheduler .
6518	Schedules the combUpdateDone event .
6519	Schedules apply values .
6520	Resolve conflict strategy .
6521	Run combine processes .
6522	Iterate over the sequence processors .
6523	Applies the values to the scheduler .
6524	Return the value of a sig .
6525	Write a value to the simulation .
6526	Add a new process .
6527	Simulate a unit .
6528	Create an op function .
6529	Convert a list of statements into an IF statement .
6530	Create a HWProcess object for the given process .
6531	Calculate the Hamming distance between two strings .
6532	Calculate average hash of image .
6533	Calculate the distance between two images .
6534	Setup the Vizio device .
6535	Update the power state .
6536	Mutes the volume .
6537	Increase the volume .
6538	Decreases the volume down .
6539	Set the volume level .
6540	Reset the board .
6541	Return the piece at the given square .
6542	Remove piece at the given square .
6543	Set the piece at the given square .
6544	Determine if a move isicide or not .
6545	Checks if the board is aicide .
6546	Is game over?
6547	Checks if the game is a checkmate .
6548	Determine if the transformation is a 4fold repetition .
6549	Pop a move from the stack .
6550	Return a string representation of the piece .
6551	Push a move .
6552	Calculate the Zobrist hash of the board .
6553	The piece type of the piece .
6554	Create a Color instance from a string .
6555	Return the string representation of the piece .
6556	Create a SQUARE from a string .
6557	Parse the data into a list of commits .
6558	Parse a git commit
6559	Load config from command line .
6560	Run a command from a command line .
6561	Add command line options .
6562	Load a configuration file .
6563	Generate a yaml file .
6564	Generates a markdown file .
6565	Cast value .
6566	Return a list of dates between the first_date and last_date .
6567	Parse a date string .
6568	Load a file from a file .
6569	Set missing rates to None
6570	Compute missing rates for a given currency .
6571	Get the rate for a given currency .
6572	Convert amount to another currency
6573	Split an iterable into n elements .
6574	Interpolate frames .
6575	Read a single record .
6576	Write a record to the file .
6577	Map words from start to end .
6578	Return the comments as a string .
6579	Add an array .
6580	Close the DAF file .
6581	Compute the position of a trajectory .
6582	Close the DAF file .
6583	Load PCK PCK data .
6584	Compute the segment between tdb and tdb .
6585	Check for logging calls .
6586	Check if the op is within a logging statement .
6587	Check if the current value is a dict .
6588	Check for joined strings .
6589	Check if the current keyword is in the whitelist .
6590	Add exception handler name .
6591	Detect logging level .
6592	Get exception handler name .
6593	Get the ID of the value .
6594	Return True if node is a bare exception .
6595	Check exception info .
6596	Delete the file if it exists .
6597	Add a file widget to the database .
6598	Render the PDF content .
6599	Render a PDF template .
6600	Return a quoted version of a string .
6601	Configure Mongodb options .
6602	Convert string to underscore .
6603	Auto - index the collection .
6604	Parse a file into a list of prices .
6605	Load the contents of a file .
6606	Parse a line into a PriceModel .
6607	Translate a symbol .
6608	Load all symbols from the database .
6609	Get the session
6610	Add a price .
6611	Import prices from a CSV file
6612	Get the latest price for a symbol
6613	List all prices for a given date .
6614	Download prices .
6615	Delete old price entries .
6616	Return the default session .
6617	Add a new symbol .
6618	List all symbol maps .
6619	Get a symbol by its identifier .
6620	Read lines from a CSV file .
6621	Convert an entity to a PriceModel .
6622	Convert a PriceModel to a Price object .
6623	Read the configuration file .
6624	Return the path to the config file .
6625	Create user config file
6626	Get the config path .
6627	Get the contents of the config file .
6628	Set an option .
6629	Get the value of an option .
6630	Save the current configuration to a file .
6631	Parse a symbol .
6632	Add a price to the market .
6633	Add a price entity to the database .
6634	Download the price for a symbol .
6635	DAL session .
6636	Get prices for a given date and currency .
6637	Get prices for a given date .
6638	Removes all prices from the system .
6639	Delete all prices for a security symbol .
6640	Download the price for a symbol .
6641	Returns a list of securities for the given currency .
6642	Return a partial state .
6643	Update bound_args
6644	Recursively descend the tree .
6645	Decorator to handle multiple calls .
6646	Fail if the student parts have the same length .
6647	Check that the AST is equal to the given code .
6648	Test if the student code contains text .
6649	Test if a package has an import of the given package .
6650	Test whether the student output contains text .
6651	Check that the function has printout .
6652	Fail if the console has an error .
6653	Test if the student has been chosen .
6654	Check function call .
6655	Retrieves the result from a process .
6656	Return a new AST with the given solution .
6657	Check if an instance is an instance of the system .
6658	Return a copy of self .
6659	Create a child state
6660	Get an instance of the parser .
6661	Test if the target is a context loop .
6662	Check that the state has context with the given names .
6663	Check that the student part exists .
6664	Check the existence of a part .
6665	Checks the arguments for the given name .
6666	Check a function call .
6667	Compute the true anomaly .
6668	Initialize an ldap3 app .
6669	Initialize LDAP configuration
6670	Add a ldap3 server .
6671	Remove a connection from the stack .
6672	Destroys the connection .
6673	Authenticate using LDAP .
6674	Authenticate using LDAP .
6675	Authenticate using a search method .
6676	Get all groups for a given user .
6677	Get user info .
6678	Get user info for given username .
6679	Get an object from the LDAP server .
6680	Return a connection object .
6681	Create a new connection .
6682	Create a connection to the LDAP server .
6683	Destroys a connection .
6684	Search for containers .
6685	Search for labels .
6686	Search for repositories .
6687	Search for all archives in a collection .
6688	Shows the client .
6689	Announce a command .
6690	Update the secrets
6691	Update headers .
6692	Require client secrets .
6693	Download the given URL to a temporary file .
6694	Stream the given url into a stream .
6695	Update the authorization token .
6696	Get or create a folder .
6697	Read a response from the server .
6698	Get bucket .
6699	Update the secrets
6700	Initialize the client .
6701	Loads the secrets from the server .
6702	Get the logs for a given name .
6703	List all logs in the bucket .
6704	Create folder at endpoint_id
6705	Initialize the transfer client .
6706	Search for all Containers
6707	Show the status of the backend .
6708	Add a backend variable .
6709	remove a variable
6710	Activate the SREGIS service .
6711	Delete a backend .
6712	Update the base base
6713	Create a basic authentication header .
6714	Generate a signature from payload and secret .
6715	Generate a header signature .
6716	Call a DELETE request .
6717	Execute a HEAD request .
6718	Paginate a GET request .
6719	Verify the certificate
6720	Remove an image from the registry .
6721	Return a dictionary with the version information .
6722	Get install requirements .
6723	Get the singularity version .
6724	Check if software is installed
6725	Return the absolute path of the installdir
6726	Return thumbnail image .
6727	Run a command .
6728	Get the metadata for an image
6729	Update the current account
6730	Prints the output of an API call .
6731	Kill all running commands
6732	List logs for a container .
6733	Returns a list of all collections in the account
6734	Updates the swift connection
6735	Update the credentials
6736	Get a Sregistry client
6737	Start an IPython notebook .
6738	Get manifest data for a given repo .
6739	Get manifest from repo_name
6740	Get the download cache location .
6741	Extract environment variables from the docker container .
6742	Update the base url
6743	Update the security token .
6744	Get the metadata for this job .
6745	Get client settings .
6746	Get and update a setting .
6747	Update a setting .
6748	Generate an authorization request .
6749	List builders .
6750	Load templates by name
6751	Get the IP address of a network
6752	Run the build command .
6753	List all the containers in the bucket .
6754	List all the containers in the bucket .
6755	Main entry point .
6756	Main entry point .
6757	Initialize the database
6758	Get the build template .
6759	Search for shared endpoints
6760	List the endpoint names .
6761	List file contents .
6762	Share the image with the given query .
6763	Read the client secrets file .
6764	Retrieves the storage services .
6765	Delete an object from a bucket .
6766	Delete an object
6767	Destroy an instance .
6768	Get all subparsers for the given parser .
6769	Generate a random noun string .
6770	Get a temporary directory .
6771	Extract a tar archive .
6772	Extract a tarball from the given path .
6773	Get a hash of a file .
6774	Read a file .
6775	Read a JSON file .
6776	Clean up a list of files
6777	Push an image to S3 .
6778	Get or create a collection by name .
6779	Get a collection by name .
6780	Get a container by name
6781	List all docker images .
6782	Inspect a container
6783	Rename an image
6784	Move an image
6785	Remove an image
6786	Add an image to the registry .
6787	Push an image to the registry .
6788	Parse a recipe from a recipe .
6789	Find a single recipe in the manifest .
6790	Create a tarball from a list of files .
6791	Run build .
6792	Update the metadata of a Blob Blob Blob Blob Blob Blob Service
6793	Format a container name .
6794	Determines if the output stream should be colored .
6795	Return True if the given level is an error .
6796	Write a message to the stream .
6797	Add a table to the table .
6798	Push a container to a container
6799	Get a template by name
6800	Get a manifest from a repository
6801	Get a build template
6802	Update the secrets
6803	Build a repr for a class .
6804	Convert s3 errors into an error .
6805	Create a new proxy proxy .
6806	Returns the URL for a gravatar .
6807	Returns the URL for a gravatar .
6808	Check if a gravatar has a gravatar .
6809	Returns the URL for a gravatar profile .
6810	Generate chimera blocks .
6811	Compute the chimera block quaternion .
6812	Enumerate resonance smiles .
6813	Enumerate a molecule .
6814	Normalize mol .
6815	Apply transformation to molecule .
6816	Convert a molecule into a canonical atom .
6817	Validate smiles
6818	Disconnect atoms from a molecule .
6819	Standardize smiles .
6820	Enumerate Tautomers from smiles .
6821	Calculate the Tautomer s canonicalization .
6822	Standardize mol .
6823	Return the Tautomer of a mol .
6824	Return the parent fragment of a molecule .
6825	Return a copy of mol .
6826	Set isotopes parent atom to zero .
6827	Return the charge of a molecule .
6828	Return the parent of a molecule .
6829	Main entry point .
6830	Remove fragments from the molecule .
6831	Choose the largest fragment in mol .
6832	Integrate an IVP .
6833	Get the stats for a given organization .
6834	Get all members of the organization .
6835	Get all teams of the organization .
6836	Get all the repos .
6837	Count the number of contributors in a repository .
6838	Get the number of pull requests .
6839	Get all issues from a repo .
6840	Get the readme for a given repo
6841	Get license for a given repo
6842	Get all the commits for a repository .
6843	Write a json file to disk .
6844	Write totals to file .
6845	Write the languages file .
6846	Make sure the directory exists .
6847	Removes a date from the csv file
6848	Return a list of all organizations .
6849	Create an enterprise session .
6850	Check API limits .
6851	Connect to GitHub .
6852	Query for repositories .
6853	Get the organization .
6854	Write the trajectories to a file .
6855	Create a Project from a Gitlab repository object .
6856	Create a Project from a DOE code record .
6857	Convert a license to a Python object .
6858	Get the traffic .
6859	Retrieve a list of releases from the API .
6860	Retrieve a list of referrers from a URL .
6861	Retrieve data from a service .
6862	Write json data to a json file .
6863	Write data to a file .
6864	Checks the data_to_check to see if it exists
6865	Write the data to a file .
6866	Write the referrers to a file .
6867	Process a JSON file .
6868	Fetch all records from a given URL .
6869	Process a JSON file .
6870	Login to GitHub .
6871	Get the members of the org .
6872	Write logins to file
6873	Connect to a stashy session .
6874	Connect to Gitlab .
6875	Query for projects .
6876	Convert a git repo to SLOC
6877	Calculates the number of labor hours per month .
6878	Removes null values from dictionary
6879	Read a GQL query file .
6880	Query GitHub from GitHub .
6881	Submit a GraphQL query .
6882	Waits until the given time stamp is available .
6883	Counts the number of retry times .
6884	Load data from a file .
6885	Save the data to a file .
6886	Create a TFS connection
6887	Create a TFS project analysis client .
6888	Connect to TFS Enterprise .
6889	Create a Git client .
6890	Create TFS Git CI client .
6891	Retrieve Git Repos for a project .
6892	Retrieves all Tfvc branches in a collection .
6893	Get the total number of commits from GitHub .
6894	Calculates total number of commits based on start_commits .
6895	Write the report to a CSV file .
6896	Configure backends .
6897	Get a metric interface
6898	Record timing information .
6899	Temporarily add a timing stat .
6900	Decorator for timer functions .
6901	Generate a tag .
6902	Log timing information .
6903	Log a histogram .
6904	Perform a rollup .
6905	Enumerate a set of members .
6906	Convert database value to enum .
6907	Convert value to python type
6908	Convert value to enum name .
6909	Recursively resolve a path .
6910	Projects a list of usls onto a dictionary of terms .
6911	Return the mean of the histogram .
6912	Mark the rate .
6913	Return the mean rate of the simulation .
6914	Mark the previous value .
6915	Serialize a metric .
6916	Serialize a metric .
6917	Format a metric string .
6918	Send a metric to the client .
6919	Get an option from a section .
6920	Ensure data is UTF - 8 .
6921	Get or set an option .
6922	Returns a mapping of ledger codes to GUIDs .
6923	Get a list of all divisions .
6924	Map exact_inv_numbers to foreign_invoice_numbers
6925	Solve a grid using sudoku .
6926	Creates a view handler .
6927	Create a form view .
6928	A decorator that creates a method view .
6929	Creates an API view .
6930	Creates a view for the given injector .
6931	Creates a model view set .
6932	Create a stream from a file descriptor .
6933	Called when the file descriptor is ready .
6934	Close the connection .
6935	Called when the connection lost .
6936	Add a watch .
6937	Remove a watch .
6938	Register a watch for the given path .
6939	Setup the socket .
6940	Read an event from the stream .
6941	Trigger a touch event .
6942	Update self . _interval
6943	Update self . _interval .
6944	Close all connections .
6945	Checks if all connections are starred .
6946	Connect to the given host and port .
6947	Query lookupd .
6948	Set the max_in_flight value .
6949	Log up a message .
6950	Register a callback .
6951	Remove a listener .
6952	Trigger an event .
6953	Publish a message to a topic .
6954	Set the feature transform mode .
6955	Compute the prediction function .
6956	Calculate theta of the sun .
6957	Parse a log file .
6958	Remove duplicates .
6959	Merge default adapters .
6960	Run trimmomatic .
6961	Parse a depth file .
6962	Main entry point .
6963	Set the template path .
6964	Set the name of the main channel names .
6965	Get user channel information .
6966	Render a Jinja2 template .
6967	Render the template .
6968	Set the channel names .
6969	Update the main loop .
6970	Set the secondary channel for a source .
6971	Update the attributes of the component .
6972	Set the compiler channels .
6973	Set raw inputs using raw input dict
6974	Set secondary inputs .
6975	Set extra inputs .
6976	Extract coverage from a header string .
6977	Parse assembly file .
6978	Calculate GC content for a given sequence .
6979	Filter contigs based on comparisons .
6980	Returns the assembly length of the assembly .
6981	Write the filtered assembly into a file .
6982	Write the assembly report to a file .
6983	Remove inner loops from text .
6984	Ensure that the inner fork_string is valid .
6985	Run sanity checks on a pipeline .
6986	Parse a pipeline .
6987	Determine the source of a source in the pipeline .
6988	Parse a lane from a string .
6989	Establish linear connection between processes .
6990	Establish a fork of a connection between source and sink .
6991	Add unique identifiers to a pipeline .
6992	Remove unique identifiers from pipeline links .
6993	Check if required files are open .
6994	Convert a header string into a dictionary .
6995	Convert a human - readable string into a float .
6996	Convert a size string into a float
6997	Parse the log file .
6998	Clear inspect info .
6999	Update the barrier status .
7000	Retrieve a log from a file .
7001	Assert resource warnings .
7002	Update process statistics .
7003	Parse log file .
7004	Update the logging configuration .
7005	Display the view .
7006	Updates the top line
7007	Updates the left of the screen .
7008	Get the last n lines from the log file .
7009	Prepare static info for the pipeline .
7010	Reads a dot DAG file into a dictionary .
7011	Returns the MD5 hash of the run .
7012	Get the path to the nextflow command .
7013	Splits the assembly into a single file .
7014	Parse pipeline status data .
7015	Run brewsendo .
7016	Find a recipe by name .
7017	List all available recipes .
7018	Validate a pipeline string .
7019	Build the pipeline .
7020	Build the pipeline .
7021	Define a pipeline string .
7022	Run automatic pipeline .
7023	Returns a component string .
7024	Write a report to a report file .
7025	Parse log files .
7026	Fix the names of the contig names in the ASSE file .
7027	Remove temporary files .
7028	Parse a list of files .
7029	Parse a log file .
7030	Iterate over a set of filters .
7031	Get the ID from a contig string
7032	Returns the plot data as a dictionary
7033	Write the report data to a json file .
7034	Main function for the assembly .
7035	Parse assembly file .
7036	Get summary statistics .
7037	Get the labels for each contig .
7038	Calculates GC properties
7039	Calculate the GC slope for each contigs
7040	Run skesa .
7041	Generate json report from sample data .
7042	Determine the index of a targeted list .
7043	Extract nucleotide ranges from the input file .
7044	Calculate the optimal truncation of two samples .
7045	Retrieve summary information from a summary file .
7046	Check the health of a summary file .
7047	parse bowtie log
7048	Parse a process name .
7049	Add a dependency .
7050	Search for a template tree based on template .
7051	Build the header .
7052	Build the footer .
7053	Set the channels for all processes .
7054	Sets the initial process
7055	Set secondary channels
7056	Set the status channels .
7057	Convert a resource dictionary into a string .
7058	Return a string representing the container configuration .
7059	Returns a string representation of the parameters .
7060	Returns a string with the merged parameters .
7061	Returns the manifest string .
7062	Sets the configuration variables .
7063	Write the DAG to disk .
7064	Render the pipeline .
7065	Write configuration files .
7066	Export params to stdout .
7067	Export directives to stdout .
7068	Fetch docker tags from the process .
7069	Build the configuration file .
7070	Set kmer range .
7071	Main function for spades . py
7072	Generate a report id .
7073	Update the trace watch queue .
7074	Update the log watch .
7075	Send a live report .
7076	Initialize the report .
7077	Close the connection to the server .
7078	Convert a FASP adapter fasta file into a tab - delimited file .
7079	Run fastqc .
7080	Write the results to the output file .
7081	Run MuTak MuTak .
7082	Build the software version file .
7083	Read the results from the MuTak output .
7084	Print a message to stdout .
7085	Parses a dictionary into a dictionary .
7086	Process processes .
7087	Guess the file type of a file .
7088	Get the range of qual_str
7089	Return a list of valid encodings .
7090	Parse the coverage table .
7091	Filter assembly file based on minimum coverage .
7092	Filter bam file based on coverage info .
7093	Calculate minimum assembly coverage .
7094	Get the assembly size from an assembly file .
7095	Parse assembly mapping file .
7096	Convert CamelCase to CamelCase
7097	Return a mapping of component classes to process classes .
7098	Process a newick file .
7099	Perform a quickhull algorithm .
7100	Map wm to data
7101	Apply median filter
7102	Compute the k - n - th Gaussian kernel .
7103	Compute the SSM
7104	Compute the NCCs of X and G .
7105	Gaussian filter .
7106	Compute the euclidean distance
7107	Circular shift matrix
7108	Compute embedding space .
7109	Helper function to plot the plotting function .
7110	Plot boundary boundaries .
7111	Plot the labels of each label .
7112	Plot a single track .
7113	Plot a tree .
7114	Get feature segments .
7115	Compute the 2D Fourier transform for each feature .
7116	Compute the similarity of each feature .
7117	Fit the model .
7118	Calculate the scatter plot .
7119	Read the references from an audio file .
7120	Find an estimation .
7121	Save estimations .
7122	Returns a list of all algorithms that are bound to the boundary type .
7123	Generate a configuration dictionary .
7124	Return a sorted list of dataset files .
7125	Read the boundaries from a jamfile .
7126	Get the duration of a feature file .
7127	Writes the given times and labels to a file .
7128	Get the dataset file path
7129	Align a segmentation to a song .
7130	Estimate the beats .
7131	Read the annotations from the JAMS file .
7132	Compute beats sync features .
7133	Read features from file .
7134	Write the features to a json file .
7135	Returns a list of parameter names .
7136	Compute framesync timesync times .
7137	The frame timeseries .
7138	Compute the features .
7139	Select a feature from a file .
7140	Preprocess the algorithm .
7141	Synchronize the labels and labels .
7142	Main function .
7143	Print the results .
7144	Compute GTF results .
7145	Compute the information gain for an annotation .
7146	Process a track .
7147	Returns the name of the results file .
7148	Process a track .
7149	Add a configuration variable .
7150	Compute features for a given file .
7151	Process a feature file .
7152	Gaussian cost function
7153	Lognormalize f .
7154	Normalize f .
7155	Normalize X .
7156	Returns a numpy array of time frames .
7157	Remove empty segments .
7158	Simplify audio clicks .
7159	Calculate the cluster labels .
7160	Process segmentation level .
7161	Align the boundaries of two hierarchies .
7162	Compute the distance between nodes .
7163	Estimate the k - means knee for each sample .
7164	Get a subset of data .
7165	Run k - means clustering .
7166	Compute the bicomposition of the covariance matrix .
7167	Return the magnitude of a vector .
7168	Convert a JSON file into a numpy array .
7169	Convert a json file into a numpy array .
7170	Convert a json string into a numpy array .
7171	Convert a json file into a numpy array .
7172	Compute the 2D Fourier transform .
7173	Compute the n - dimensional labels of the network .
7174	Filter activation matrix .
7175	Determine the boundaries module .
7176	Get the label module for the given algorithms .
7177	Run hierarchical segmentation .
7178	Run a flat file .
7179	Run algorithms on audio files .
7180	Process a track .
7181	Process audio file .
7182	Update the beta matrix .
7183	Main entry point .
7184	Decorator for coroutine functions .
7185	Create an accumulator .
7186	Add a task to the queue .
7187	Iterate over the given iterable .
7188	Send lines from stdin .
7189	Decorator to create a push url .
7190	Translates the given phrase using Google Translate .
7191	Return translation table .
7192	Print a translation table .
7193	Remove nodes from the network .
7194	Save a network to a pandas HDF5 file .
7195	Construct a Network from an HDF5 file .
7196	Set a variable in the network .
7197	Aggregate hazard variables .
7198	Get the node ids for a given point .
7199	Plot a scatter plot .
7200	Set the polynomial pois .
7201	Find nearest pois .
7202	Return the low connectivity nodes .
7203	Process a single node .
7204	Make an osm query
7205	Builds a node query .
7206	Build a DataFrame from OSM data .
7207	Return True if value is a regular expression .
7208	Compare the value with the given expectation .
7209	Wrap a function to return the result .
7210	Compare expr against expr
7211	Trigger a list of methods .
7212	Return True if the request matches the given request .
7213	Get a matcher by name .
7214	Initialize a matcher .
7215	Set the message body .
7216	Set the response body .
7217	Set the value of a key .
7218	Append functions to target list .
7219	Trigger a request .
7220	Sets URL .
7221	Sets the headers .
7222	Matches one or more headers .
7223	Matches the given headers .
7224	Set the Content - Type header .
7225	Set query parameters .
7226	Sets the body of the request .
7227	Sets the JSON data .
7228	Sets the xml string .
7229	Read the content of a file .
7230	Persist the object .
7231	Set the error .
7232	Create a new response object .
7233	Match a request .
7234	Activate the engine .
7235	Sets the mock engine .
7236	Enable or disable a network .
7237	Create a mock
7238	Remove a mock .
7239	Activate the mock engine .
7240	Disable the mock .
7241	Determines if the request should be used .
7242	Match a request .
7243	Return a shallow copy of this request .
7244	Activate an engine .
7245	Context manager to temporarily change the engine .
7246	Add an interceptor to the engine .
7247	Remove an interceptor by name .
7248	Retrieves a setting .
7249	Return the decrypted SQL .
7250	Add the value to the model .
7251	Get a placeholder .
7252	Return a decryptedCol object .
7253	Returns a placeholder for the given value .
7254	Takes a list of yaml keys and returns a dictionary with keys and values .
7255	Compute the base regression .
7256	The covariance matrix .
7257	Recursively iterate over the leaves of the tree .
7258	Calculates the probabilities for each branch .
7259	Propagates the covariance matrix .
7260	The explained variance of the tree .
7261	Compute the regression model .
7262	Find the best root of the tree .
7263	set Tc values
7264	Calculate the number of branches in the tree .
7265	Compute the cost of the given node .
7266	Assign branch lengths to the tree .
7267	Optimize the transcent time scale
7268	Convert a profile into a sequence .
7269	Normalize a profile .
7270	Setter for GTR
7271	Set GTR model .
7272	Set the sequence length .
7273	Assign sequences to nodes .
7274	Prepare the tree .
7275	Calculate internal nodes .
7276	Calculate the distance between all leaf nodes .
7277	Reconstruct the ancestral sequences
7278	Returns the mutation matrix for a given node .
7279	Return expanded sequence .
7280	Create the Fitch profiles .
7281	Return the state of the leaf .
7282	Find the intersection of two arrays .
7283	Returns the sequence LH for a given position .
7284	Calculate the ancestral likelihood .
7285	Convert node length to GTR .
7286	Optimize branch length
7287	Run branch length optimization .
7288	Calculate optimal length of a node .
7289	Optimize the sequence and branch length .
7290	Reconstruct an alignment from the tree .
7291	Compute the Q - matrix .
7292	Factory function for creating a new GTR instance .
7293	Calculate standard model .
7294	Check the diagonal of the GTR rate matrix .
7295	Compute the probabilistic probability of a given sequence .
7296	Compute optimal T - T .
7297	Calculate the optimal T - T - compressed T - compressed T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - > T - T - T - T - T - T - T - T - T - T - T - T - T - T - > T - T - T - T - T - T - T - T - T - T - T - T - T - T - T - > T -
7298	Probability Probability Probability
7299	Evolve the profile at the given time t .
7300	Returns the log - likelihood of a sequence .
7301	Set branch length mode .
7302	Filter the clock model .
7303	Plot root to tip .
7304	Recursively resolve polytomies .
7305	Print the log - likelihood .
7306	add a coalescent prior to the tree
7307	Find the best root position of the tree .
7308	Asserts the given tree .
7309	Create GTR model .
7310	Read a VCF file .
7311	Infer ancestral sequences .
7312	Calculate FWHM .
7313	Create a new distribution with a given weight .
7314	Multiply a distribution .
7315	Assign dates to the tree
7316	Create a TreeRegression object .
7317	Maximum likelihood tree .
7318	Compute the likelihood of the tree .
7319	Convert dates to datetime
7320	Calculates the date uncertainty due to the given time .
7321	Returns the maximum posterior region of the marginal distribution .
7322	Find the minimum value of an interpolation object .
7323	Calculate the median interpolation of an interp object .
7324	Convert a datetime to a date .
7325	Create a DataFrame from a clock model .
7326	Connect to guacd server
7327	Close the connection .
7328	Receive instructions from the client .
7329	Send data to the client .
7330	Send an instruction .
7331	Establish a handshake .
7332	Ensure a unicode string is utf - 8
7333	Load an instruction from an instruction .
7334	Encode an argument .
7335	Encode instruction .
7336	Returns the URL for the class .
7337	Returns the URL for this instance .
7338	Returns the URL for the class .
7339	Download the file .
7340	Retrieve the parent job object .
7341	Ask user for credentials .
7342	Login to Solve .
7343	Display user information .
7344	Print user information .
7345	Return a new QuerySet with filtered filters .
7346	Return a new RangeSet with the specified range .
7347	Return a new RangeSet with a new chromosome .
7348	Retrieve a list of facets .
7349	Process a list of filters .
7350	Return the next item from the buffer .
7351	Execute a query .
7352	Create a new dataset .
7353	Entry point for Solve .
7354	Download a folder from a remote path
7355	Construct an instance from a dictionary .
7356	Logout the user .
7357	Make an HTTP request .
7358	Retrieve a child object .
7359	Cancels the task .
7360	Parse SNPs .
7361	Convert a row to a dictionary .
7362	Get credentials from Netrc
7363	Save the configuration to a file .
7364	Format a value .
7365	Normalize tabular data .
7366	Return a string which represents a row of data cells .
7367	Return a string which represents a horizontal line .
7368	Prefix every cell in a row with an HTML alignment attribute .
7369	Format a table into a table .
7370	Migrate this dataset to another .
7371	Validate a full path .
7372	Uploads the contents of a folder .
7373	Validate Vault path .
7374	Validate API host .
7375	Add a manifest to the manifest .
7376	Iterate over records .
7377	Evaluate the expression .
7378	Set the format name .
7379	Register a new output formatter .
7380	Format the given data .
7381	Wrapper for tabulate .
7382	Get user config directory .
7383	r Return a list of system configuration directories .
7384	Read the default config file .
7385	Read configuration files .
7386	Absolute path to user config file .
7387	Return a list of system configuration files .
7388	Return a list of all files in the archive .
7389	Write the default config file .
7390	Read config files .
7391	Truncate a string .
7392	Replace all occurrences of replace .
7393	Call multiple commands in a sequence .
7394	Apply options to a command .
7395	Apply an option to a command .
7396	Initialize options .
7397	Run the pep8radius command .
7398	Run the command .
7399	Truncate a list of strings .
7400	Format a list of numbers .
7401	Format a row .
7402	Generate a vertical table from data .
7403	Generate a table of data .
7404	Render a template .
7405	Checks if the type is a number .
7406	Checks if the type is a boolean
7407	Return True if the type is a binary type .
7408	Generate a KCS11 key .
7409	Generate a public keypair .
7410	Find objects matching template template .
7411	Insert an image into the image .
7412	Export gene panels .
7413	Returns the first weekday of the given weekday .
7414	Repeat a day .
7415	Reverse a repeat .
7416	helper function for _bweekly_count
7417	Handle a single event .
7418	Generate a list of variant objects .
7419	Export verified variants to CSV .
7420	Convert a VariantCollection into a Markdown document .
7421	Update a user .
7422	List variant variants .
7423	Retrieve a variant .
7424	Retrieve a variant .
7425	Verify a variant .
7426	View for aclinvar .
7427	Retrieve cancer variants .
7428	View a variant .
7429	View an evaluation .
7430	Return the acmg for the given criteria .
7431	Upload a panel .
7432	Download verified files .
7433	Return a dictionary mapping gene name to gene IDs .
7434	Add incompleteenrance info to genes .
7435	Add gene information .
7436	Send request to MME .
7437	Retrieve MME nodes from MME .
7438	Get the coordinates of a chrom and position
7439	Determine the sub - category of a variant .
7440	Calculate the length of a variant .
7441	Determine the end of a variant .
7442	Parse the coordinates of a variant .
7443	Parse a Cytoscape file .
7444	Create a panel .
7445	Update a panel .
7446	Export a panel .
7447	Edit a gene .
7448	Save a delivery report .
7449	Return a dict of HPO terms .
7450	List all users .
7451	Build a phenotype object
7452	Get information about a gene .
7453	Convert a query into a list of terms .
7454	List institute information .
7455	List all transcripts .
7456	Displays a given day .
7457	Retrieve variants from the database .
7458	Retrieve a list of variants from the database .
7459	Return a variant object .
7460	Add a variant .
7461	Parse a variant from the store .
7462	Returns the export header for variants .
7463	Get variant information .
7464	Get the prediction data for each gene .
7465	Add variants to a variant case .
7466	Find bam file in bam file .
7467	Get the observations for a particular variant .
7468	Parse a GATK gene object .
7469	Convert a transcript to a string .
7470	Return the end position of a variant .
7471	Returns the frequency of the variant .
7472	Convert CLINSig object to human readable string
7473	Generate a URL to link a variant .
7474	Generate a link to the cosmic_ids .
7475	Generate a link to a variant .
7476	Generate URL for a variant .
7477	Return the human readable representation of a variant .
7478	Return the expected inheritance of a variant .
7479	Get all callers for a variant .
7480	Get cancer variants .
7481	Return a dict with information about a particular variant .
7482	Get the information for a clinvar submission .
7483	Return a variant object for a variant .
7484	Submit a variant .
7485	Convert an ACMGMG analysis object into a dictionary .
7486	Upload HGNC symbol files to the database .
7487	Generate a verified variant file .
7488	Export all genes in a BED format .
7489	Parse a CLNSig .
7490	Parse a compound_info into a list of compounds .
7491	List all genes .
7492	Build an individual object from a dict
7493	Deploy variant variants .
7494	Get information about a case .
7495	List the collection names .
7496	Institute an institute .
7497	Update institute institute .
7498	Get a file handle .
7499	Get net net .
7500	Get the next and prev and prev .
7501	Make sure the year is valid .
7502	Determine the day of a date .
7503	Parse case data .
7504	Parse and parse ped information .
7505	Parse a single individual .
7506	Parse individual samples .
7507	Parse a case .
7508	Parse a ped file .
7509	Build an evaluation object .
7510	Generate a report for heterogeneity variants .
7511	Determine whether pv is a patho .
7512	Determine whether a path is likely to be a likely pathogenic .
7513	Determine if two bs are likely to be the same .
7514	Parse ACMG terms .
7515	Add gene information to a variant .
7516	Fetch variants from a case .
7517	Retrieve variants for a particular experiment .
7518	Retrieve a single variant .
7519	Retrieve gene variant variants .
7520	Return a list of individuals verified by institute_id .
7521	Returns a list of causalies for the institute .
7522	Returns a list of all the strains in the given case .
7523	Return the causal variants of a variant .
7524	Delete variants for a case .
7525	Return variants that overlap a variant .
7526	Returns all variants that are evaluated in the case .
7527	Retrieve a variant VCF file .
7528	Retrieve variants for a sample .
7529	Return a MongoDB client .
7530	Return a list of objects from a list of variant_ids .
7531	Generate header for CLINVAR submission .
7532	Generate a list of CSV lines for aclar submission .
7533	Load transcripts .
7534	Create a panel .
7535	Build an exon .
7536	Delete a panel .
7537	Delete all indexes .
7538	Delete a user .
7539	Delete genes collection .
7540	Drops all exons .
7541	Delete a case .
7542	Get individual individuals .
7543	Parse MatchMaker matches .
7544	Show the cases .
7545	Load a LoginUser object from the store .
7546	View function .
7547	Builds an institute object from the given parameters .
7548	Delete an event .
7549	Create an event .
7550	Fetch comments for a particular variant .
7551	Retrieve events for a user .
7552	Add a phenotype .
7553	Remove a phenotype term from the institute .
7554	Create a comment on a variant .
7555	Parse individual genotypes .
7556	Check that the coordinates are within the correct coordinates .
7557	Get HPO terms .
7558	Export transcripts .
7559	Load all exons
7560	Load a region into a region .
7561	Return all the events for a given month .
7562	Return a queryset of the models that are live at a given time .
7563	Parse requirements from requirements file
7564	Get an existing gene .
7565	Update a gene panel .
7566	build a new panel
7567	Export a panel object .
7568	Return information about an archive .
7569	Migrate a scenario to the database .
7570	Migrate a case .
7571	Run research on a case .
7572	Load HGNC genes .
7573	List HPO terms .
7574	Create a Flask application .
7575	Configure extensions .
7576	Register blueprints .
7577	Configure coverage .
7578	Get all aliases for a symbol
7579	Build a panel object .
7580	Export verified variants .
7581	Export variants .
7582	Returns a VCF entry for a VCF variant .
7583	Start a mongodb server .
7584	Generate an MD5 key for a list of arguments .
7585	Initialize the app .
7586	Sets up the database .
7587	Update the index .
7588	Sets up the database .
7589	Run Scout setup demo .
7590	Sets up the database .
7591	Get institute information .
7592	Parse a list of genetic models .
7593	List the panel panels .
7594	Add institute to the database .
7595	Update the institute .
7596	Retrieve institute by ID .
7597	Match date .
7598	Parse a date string .
7599	Export gene IDs .
7600	Parse a rank score entry into a float .
7601	Create a new user .
7602	Check connection to MongoDB .
7603	Initialize the app .
7604	Load a delivery report from the database .
7605	Add a user to the database .
7606	Run pileup .
7607	Load the exons from the given lines .
7608	Update compound compounds .
7609	Add gene links .
7610	List HGNC identifiers .
7611	Parse hgnc line .
7612	Parse hgnc genes .
7613	Retrieve an open clinvar submission for a given user and institute .
7614	Update aclinvar submission .
7615	Returns the ID of the clinvar submission .
7616	Add variants and case data .
7617	Update the status of a clinvar submission .
7618	Retrieve all clinvar submissions for a user .
7619	Delete aclin object .
7620	Convert a case to a list of unique identifiers .
7621	Parse OTP output from OTP output .
7622	List all genes .
7623	List a gene .
7624	Return a list of genes .
7625	Check if panels exist
7626	Load clinical SNV variants .
7627	Load a scout .
7628	Decorator to render a template .
7629	Get institute and case information .
7630	Return institute of the given login user .
7631	Get HNC ID from gene info .
7632	Update a gene panel .
7633	Load all diseases .
7634	Load the hpo disease terms .
7635	Parse the frequencies from a variant .
7636	Extract the frequency from a variant .
7637	Parse variant frequencies .
7638	List users .
7639	Build hgnc gene
7640	Load a panel from a panel .
7641	Load the MIM panel from the database .
7642	Compares the mim_panel and returns a list of genes that are not in the new_panel .
7643	Update mime version for new genes .
7644	Add a panel to the database .
7645	Retrieve a panel by ID .
7646	Delete a panel .
7647	Retrieve a gene panel .
7648	Retrieve gene panels .
7649	Convert a gene to a panel name .
7650	Update a panel .
7651	Add pending action to panel .
7652	Apply all pending genes to a panel .
7653	Retrieve clinical symbols associated with a case .
7654	List cases .
7655	Emit a record .
7656	Load all indexes .
7657	Update indexes .
7658	Drops all indexes .
7659	Build a variant query .
7660	Build a MongoDB query .
7661	Build clinsig query
7662	Add genomic coordinates to the query .
7663	Add panel and genes - related parameters .
7664	Drops the database .
7665	Parse a panel from a CSV file .
7666	Build clns signature from clns info
7667	Load one or more genes into the HNC database .
7668	Load multiple transcripts into the database .
7669	Load multiple transcripts into the database .
7670	Retrieve a gene by its identifier .
7671	Get HGN ID for a given symbol .
7672	Get all genes with a given symbol .
7673	Return all genes in the genome .
7674	Returns the number of genes in the database .
7675	Drops the hgnc_gene collection .
7676	Drops the transcripts collection .
7677	Drops the exons collection .
7678	Get all transcripts for a build .
7679	Build hgnc symbol
7680	Get gene by symbol
7681	Get all genes by alias
7682	Get all ensembl genes .
7683	Return the HGNC symbol associated with an HGNC alias .
7684	Add hgnc id to the gene .
7685	Build a dictionary of coding intervals .
7686	Update the omim gene panel .
7687	Get the cases for a given institute .
7688	Get information about a case .
7689	View the matchmaker .
7690	Match match .
7691	Delete a matchmaker .
7692	Display a case report .
7693	Generate a PDF report .
7694	Displays diagnostic for a case .
7695	Add phenotype information .
7696	Handles phenotypes .
7697	Delete events .
7698	Update the status of a case .
7699	Assign a case .
7700	List HPO terms .
7701	Mark a variant as validation .
7702	Mark a variant as causal .
7703	Retrieve delivery report .
7704	Share the case with the given institute .
7705	Re - run a simulation .
7706	Show the research for a given institute .
7707	Convert a VCF file into an attachment .
7708	Executor for multiqc .
7709	Return a list of cases .
7710	Generate the case report .
7711	Retrieve the coverage report contents .
7712	Retrieve all clinvar submissions for a given user .
7713	Export the MT files into a latex file .
7714	Update the case s synopsis .
7715	Return a list of heterozygous diseases .
7716	Convert a VCF to a Ctosure object .
7717	Returns the details for a multiqc connection .
7718	Returns a list of all sanger items that are not evaluated in the database .
7719	Add a new MME .
7720	Delete MME
7721	Retrieve matches for MME .
7722	Perform a match on the MME .
7723	Update genes .
7724	Parse the callers for a variant .
7725	Build a transcript
7726	Load institute into database .
7727	Parse the CADD entry .
7728	Create a case object .
7729	Update a variant .
7730	Update the variant rank for a particular variant .
7731	Updates the variant compounds for a variant .
7732	Update compound compounds .
7733	Update variant variants .
7734	Updates variants for a case .
7735	Load a variant from the database .
7736	Insert a variant into the database .
7737	Load variants into the database .
7738	Assign to a case .
7739	Share a case with a collaborator .
7740	diagnose a case .
7741	Marks the checked status of a case .
7742	Verify that a variant is correct .
7743	Return the Sanger sanger order .
7744	Validate a variant .
7745	Marks a variant as causal .
7746	Update a dississ variant .
7747	Update the ACCMG for a variant .
7748	Parse variant ids .
7749	Parse a simple id into a simple id
7750	Generate a document id for a variant .
7751	Convert a panel to HGNC IDs .
7752	Convert a variant object into a variant ID .
7753	Returns the number of cases in institute .
7754	Update gene list based on HGNC identifiers .
7755	Fetch a case .
7756	Delete a case .
7757	Add a case to the case collection .
7758	Replace a case .
7759	Update the case id for a case object .
7760	Submit an evaluation .
7761	Get evaluation results for a variant
7762	Parse the transcripts into a dictionary .
7763	Parse the ensembl gene_id into a dictionary .
7764	Parses the transcripts from the EKB API .
7765	Parse an ENsembl line .
7766	Parse ensembl genes from a file .
7767	Parse ensembl exon exon
7768	Parse ensembl_exon_info .
7769	Initialize a logger .
7770	Parse an omim line .
7771	Parse MIM MIM MIME file .
7772	Extract phenotype phenotypes from genemap2 .
7773	Main gene map .
7774	Convert string to int or float
7775	Formats a calendar table .
7776	Format a day .
7777	Format the month name .
7778	Populate the popover .
7779	Parse panel information .
7780	Parse a gene info .
7781	Parse gene_lines .
7782	Parse a gene panel .
7783	List diseases .
7784	Drop HPO terms .
7785	List all the users .
7786	Parse the conservations .
7787	Parse a variant s conservation information .
7788	Get general case information .
7789	Gets a list of case groups for a given adapter .
7790	Returns a HttpResponse containing the given context .
7791	Get the year and month from the request .
7792	Check for cancelled events .
7793	Fetch a hpo term .
7794	Search HPO terms .
7795	Retrieve a disease term .
7796	Fetch disease terms for a gene .
7797	Load a disease term into the database .
7798	Generate a list of gene names .
7799	Read an HDF5 file .
7800	Sets the frequencies for each channel .
7801	Sets the time axis for the time axis .
7802	Read filterbank file .
7803	Compute the lst position of the segment .
7804	Empty the DC bin .
7805	Print info about the image
7806	Calculate the extent
7807	Plot the waterfall .
7808	Plot the time series .
7809	Write the filter to a file .
7810	Calibrate band pass .
7811	Convert a numpy array to the mean
7812	Apply MGR algorithm .
7813	Calibrate the waterfall coefficients for the given cross - section .
7814	Calculate fracpols from a string .
7815	Convert a string into a waterfall .
7816	Find the closest value in xarray .
7817	Rebin an array .
7818	Unpack the given data .
7819	Calculate the difference between waterfall and waterfall .
7820	Plot the Stokes Diode Diode Diode .
7821	Plot a calibrated diode .
7822	Plot gain offsets .
7823	Open a file .
7824	Sets up the selection range .
7825	Calculate the size of the selection
7826	Calculate the shape of the signal .
7827	Calculate the start and end indices for each channel .
7828	Calculate the frequencies for each channel .
7829	Populate the timestamps .
7830	Populate the frequencies for each channel .
7831	Calculate the number of channels in the header .
7832	Calculate the number of blobs
7833	Checks if the array is heavy .
7834	Read data from the file .
7835	Read all data from the file .
7836	Read a single row from the file .
7837	Read data from the container .
7838	Update the header .
7839	Print info about the file .
7840	Write the header to a file .
7841	Write to HDF5 file .
7842	Write data to HDF5 file .
7843	Determine the dimensions of a chunk .
7844	Determine the chunk dimensions .
7845	Grab the data and return it .
7846	Command line tool .
7847	Read first header .
7848	Find the number of data blocks .
7849	Print summary statistics .
7850	Plot a histogram of data .
7851	Generate filterbank header .
7852	Find the size of the header .
7853	Command line tool .
7854	Command line tool .
7855	Perform a folded frequency spectrum on the data .
7856	Integrate the waterfall calculation .
7857	Calculate and return the fluxes
7858	Calculate the center frequency of a frequency domain .
7859	Calculate f_ratio and f_off .
7860	Calculate the diode flux using the diode spec .
7861	Calculate the tsys spectra .
7862	Calibrate fluxes .
7863	Return the index of the header of a file .
7864	Determine whether a file is a filterbank .
7865	Replace a string with a new value .
7866	Generate a signature string .
7867	Convert angle to sigproc .
7868	Calculate the number ofints in a file .
7869	Return a dict representation of this exception .
7870	Create a sub - command parser .
7871	Create a sub - command parser .
7872	Remove comments from text .
7873	Add default name .
7874	Parse a record from a record .
7875	Parse a JSON zone file .
7876	Parse a zone file .
7877	Quote a field in the data .
7878	Parses an Avro schema into an AvroSchema object .
7879	Convert a list of classes into a Python package .
7880	Return the source code for a class .
7881	Disable automatic auto store .
7882	Dump record in json - encodable object format
7883	Load a record from a JSON dict .
7884	Load a JSON record from a string .
7885	Add a record to the schema .
7886	Get a record by name .
7887	Return a dict representation of this object .
7888	Decorator to add a class to the class .
7889	Create a new record from a class .
7890	Generate a dictionary representation of a record .
7891	Get the root schema of a record .
7892	A generator that yields a generator yielding each line in the file .
7893	Write output to output stream .
7894	Push the front of a dict onto an OrderedDict .
7895	Returns a SearchResult object .
7896	Returns a SearchResult object
7897	Return a list of all entities in this resource .
7898	Extract an entity from an href .
7899	Given a quote return the corresponding quote .
7900	Escape a filter .
7901	Generates an elementary rotation matrix .
7902	Construct the covariance matrix .
7903	Calculate the Vrad Error Sky Error Sky
7904	Calculate the standard error and standard error .
7905	GMagnitude error
7906	Return the magnitude error of the magnitude error .
7907	Make a matplotlib plot
7908	Calculate the average number of transits in beta .
7909	Return the angular distance between two vectors .
7910	Transform cartesian coordinates .
7911	Transform sky coordinates to spherical coordinates .
7912	Transform the covariance matrix .
7913	Compute the error scaling factor for an observable .
7914	Make a matplotlib plot
7915	Make a matplotlib plot
7916	Apply a function to a value .
7917	Wrap a function with a help message .
7918	Convert value to unicode
7919	Apply a function to each item .
7920	Exclude elements that satisfy a given function .
7921	Return a new Collection filtered by the given function .
7922	Return a new Collection without consuming items from the collection .
7923	Return a new Collection with the elements removed from the collection .
7924	Return a new Collection with the same length .
7925	Find a matching element .
7926	Return the path to the system .
7927	Iterate over groups .
7928	Parse a regdescriptor .
7929	Convert an event into a string .
7930	Given a list of events return a list of all runs .
7931	Print the results to a file .
7932	Print a summary of the results .
7933	Print the results to a file .
7934	Clean the given code .
7935	Round to nearest base .
7936	Block a list of indices into blocks .
7937	Calculate cache access .
7938	Calculate cycles per cacheline .
7939	Analyze the kernel .
7940	Run the IAC analysis .
7941	Strip and uncomment from an ASM lines .
7942	Strip unreferenced labels from assembly lines .
7943	Select the best block .
7944	Chooses the pointer increment .
7945	Return the user selected blocks in assembly file .
7946	Insert markers at start_line and end_line .
7947	Interpolate assembly .
7948	Main entry point .
7949	Simulate the kernel .
7950	Generate an iterable of integers .
7951	Get the last modified datetime .
7952	Validate arguments .
7953	Main entry point .
7954	Main entry point .
7955	Create a symbol .
7956	Transform multidim to 1d array .
7957	Transform multidim to 1d ref .
7958	Recursively find the type of an AST .
7959	Convert a function into an iterable .
7960	Check that datatypes are valid .
7961	Set a constant .
7962	Substitute constants .
7963	Return a dictionary of array sizes .
7964	Calculate relative offset .
7965	Remove duplicate accesses .
7966	Return the length of each iteration .
7967	Get the current loop stack .
7968	Return a list of all possible symbols .
7969	Compile sympy accesses .
7970	Compute the relative distances between each variable .
7971	Convert global iterator to indices .
7972	Iterate over the global iterator .
7973	Convert a set of indices into a global iterator .
7974	Returns an iterator over the global iteration .
7975	Print kernel info .
7976	Print information about the variables .
7977	Print constants info to stdout .
7978	Print the kernel code .
7979	Convert a math expression to a symbol .
7980	Get the offset of an array .
7981	Get the basename of an array .
7982	Return the index type of the loop .
7983	Builds constant declarations .
7984	Return array declarations .
7985	Get the list of loops in the kernel .
7986	Builds the array declaration from the array declaration .
7987	Searches for inner_most .
7988	Builds array initialization variables .
7989	Build dummy calls .
7990	Builds a kernel function declaration .
7991	Build scalar declarations .
7992	Get the kernel code .
7993	Build a kernel call .
7994	Get the code from the main file .
7995	Run the IACAnalysis on the kernel .
7996	Build the executable .
7997	Convert string to sympy .
7998	Returns a unique identifier .
7999	Get the last modified datetime .
8000	Returns a CacheSimulator for the given memory group .
8001	Calculate the bandwidth of the kernel .
8002	Return the compiler and flags .
8003	Parse a perfctr event .
8004	Enforces no overlap .
8005	Return the path to the header file .
8006	Align an iteration to the cluster .
8007	Returns the number of loads in the machine .
8008	Returns the number of hits in the memory .
8009	Returns the number of misses in the memory .
8010	Returns the number of stores in the machine .
8011	Returns the number of evicts in the machine .
8012	Get information about the memory hierarchy .
8013	Temporarily change an environment variable .
8014	Configure the argument group .
8015	Print the results to a file .
8016	Parse the README . md file .
8017	Schedules the worker .
8018	Build the item for the given course data .
8019	Records a purchase in Sailthru .
8020	Get course data from Sailthru .
8021	Retrieves course content from the Catalog API .
8022	Update the unenroll list from Sailthru .
8023	Send a course refund notification .
8024	Send an offer assignment notification .
8025	Get the logger configuration .
8026	Attempt to retry the request .
8027	Fulfill an order .
8028	Returns a SailthruClient .
8029	Get an item from the cache .
8030	Set a cache value .
8031	Retrieves a configuration setting .
8032	Get the filename of the overrides file .
8033	Get the value of a dictionary by version .
8034	Return the Eplus version .
8035	Return a dictionary of FileInfo objects .
8036	Populates this Dev object from JSON data .
8037	Returns a list of all external files .
8038	Set default values .
8039	Prepare the extensible fields .
8040	Returns the name of the extended field .
8041	Return a mapping of short_refs to short_refs .
8042	Retrieves a value from the table .
8043	Update the value at index .
8044	Update the device .
8045	Set default values .
8046	Add fields to the record .
8047	Pop an item off the stack .
8048	Insert value at index .
8049	Delete this record .
8050	Register a record hook .
8051	Register a link .
8052	Create a regular expression .
8053	Return the duration of a given time .
8054	Serialize the event .
8055	Make an HTTP request to the server .
8056	Return a list of all the available services .
8057	Create a directory if it doesn t exist .
8058	Configure a service .
8059	Register a CA .
8060	Set recording state .
8061	Update the status of an event .
8062	Update the status of the agent .
8063	Return the path to the configuration file .
8064	Update the configuration file .
8065	Check if the server is running .
8066	Initialize logging .
8067	Home directory .
8068	Serve an image .
8069	Run multiple modules .
8070	Parses an IC calendar string into a list of events .
8071	Get the current schedule
8072	A control loop .
8073	Run the control loop .
8074	Make an error response .
8075	Make a JSON response .
8076	Get the internal state of the service .
8077	List upcoming events .
8078	Show an event .
8079	Delete an event .
8080	Modify an event .
8081	Extract parameters from a workflow configuration string .
8082	Ingest an event .
8083	Start capture .
8084	Returns a Fragment object .
8085	List of resources .
8086	Return a dict representation of this resource .
8087	Create a Fragment object from a dict .
8088	Add content .
8089	Add a text resource .
8090	Add a fragment to the fragment .
8091	Initialize the JavaScript library .
8092	Returns a string with the given placement .
8093	Convert a resource to HTML .
8094	Handles GET requests .
8095	Render a standalone HTML response .
8096	Render the HTML fragment .
8097	Calculate p - values for p - values
8098	Convert values to one dimension .
8099	Given an error table and an error table find the pvalue and qvalue .
8100	Fast chromatogram hypothesis .
8101	Calculate error table .
8102	Compute summary table of error table .
8103	Compute error statistics .
8104	Calculates the cutoff statistic based on the given parameters .
8105	Score a classifier .
8106	Infer predictions from a file .
8107	Infer a peptide .
8108	Infer proteins from protein data .
8109	Subsample an OSSW file .
8110	Reduce infile to outfile
8111	Backpropagate an owr file to outfile .
8112	Filter filenames in the given file .
8113	Get a group by ID .
8114	Create a group .
8115	Delete a group .
8116	Retrieve the members of a group .
8117	Update a group s members .
8118	Get the effective member count .
8119	Checks if the given group is effective .
8120	Modify Sphinx configuration file
8121	Create a dataset .
8122	Decrypt the contents of a file .
8123	Get stdin .
8124	Get stdout from stdout .
8125	Get stdout from stdout .
8126	Get the debug command .
8127	Context manager that yields stdin .
8128	Context manager to yield stdout .
8129	Context manager to yield stderr .
8130	Context manager for executing the debug command .
8131	Delete an account .
8132	Empty a container .
8133	Decorator to handle stdout .
8134	Decorator for stderr .
8135	Write an error message to a file .
8136	Print the help to the given file .
8137	Print usage to file .
8138	Print version information .
8139	Send a request .
8140	Create an account .
8141	Delete account .
8142	Upload a container .
8143	Returns the head of an object .
8144	Get an object from a container .
8145	Put an object into a container .
8146	Post an object to a container .
8147	Resolve an option .
8148	Return a copy of this CLIContext .
8149	Write headers to file .
8150	Handles authentication .
8151	Generate a temporary URL .
8152	Ensure value is a string .
8153	List a container .
8154	Get a client .
8155	Encrypt data from stdin .
8156	Decrypt data using AES256 CBC CBC CBC .
8157	Upload a directory structure .
8158	Update an account .
8159	Put a container .
8160	Get the manifest body .
8161	Create a container .
8162	Get a tempurl .
8163	Display information about a transition .
8164	Print help for a command .
8165	Check if the buffer is empty .
8166	Encrypt data using AES256 .
8167	Get the status of a repository .
8168	Get a pull request .
8169	Returns a list of pull requests .
8170	Write your forwards methods here .
8171	Return a list of SliderItem objects .
8172	Render a hero s SliderItem .
8173	Acquire the number of read threads .
8174	Release the number of readers .
8175	Acquire the write lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get a task by id .
8179	Return a list of all tasks .
8180	Convert the object to a dictionary .
8181	Create a Task from a dictionary .
8182	Execute a perceval job .
8183	Initialize the archive manager .
8184	Execute the job .
8185	Execute the backend .
8186	Create an index .
8187	Create a mapping in Elasticsearch .
8188	Generate a JSON encoder for the given data .
8189	Iterate over the items .
8190	Add a task to the scheduler .
8191	Cancel a task .
8192	Iterate over all stored items .
8193	Validate task arguments .
8194	Parse archive arguments .
8195	Perform a single job .
8196	Schedules a job .
8197	Cancel a task .
8198	Listen for events .
8199	Listen for jobs .
8200	Schedule the scheduler .
8201	Schedules a task .
8202	Cancel a task .
8203	Handle a successful job .
8204	Log a failed job .
8205	Builds the job arguments .
8206	Get the secret value .
8207	Register a view .
8208	Register a view .
8209	If request_name is not set the version .
8210	Returns the name of the view .
8211	Get the version string .
8212	Resolve alias to alias .
8213	Resolve an engine configuration .
8214	Parse a database path .
8215	Parse a database configuration from a URL .
8216	Parse a database URL .
8217	Create a new user .
8218	List users .
8219	Create a new password .
8220	Add a view_name to the root view .
8221	Parse a boolean value .
8222	Parse an integer value .
8223	Return a parser for setting type .
8224	Get settings from environment variables .
8225	Create a ModelDict from a model .
8226	Encode a base64 - encoded string .
8227	Create field from field_info .
8228	Create a validator .
8229	Compute the cartesian product of a dictionary .
8230	Finds all points in the given parameters .
8231	Change logging keyword arguments .
8232	Decorator to specify a simple logging configuration .
8233	Create directories for a log config file .
8234	Return a list of strings
8235	Rename a log file .
8236	Set the logger .
8237	Extract replacements from a trajectory .
8238	Print the progress bar .
8239	Check and replace command line arguments .
8240	Convert parser to StringIO
8241	Find multiple interpolation options .
8242	Find the Multiproc_dict from a dictionary .
8243	Check the logging configuration .
8244	Parses the log file .
8245	Convert a log file into a dictionary .
8246	Configure logging handlers .
8247	Finalize the tool .
8248	Start the stdout .
8249	Write the given buffer to stdout .
8250	Compare results .
8251	Compare two parameters .
8252	Decorator to run a function in a separate thread .
8253	Mark a function as deprecated .
8254	Decorator to specify whether two arguments are mutually exclusive .
8255	Decorator for deprecated keyword arguments .
8256	Decorator to retry a function .
8257	A class decorator .
8258	Add parameters to the traj .
8259	Run the network .
8260	Euler - euler algorithm
8261	Add model parameters .
8262	Compute the difference between two values .
8263	Create a storage service .
8264	Create a storage service .
8265	Add model parameters .
8266	Compute the difference between two values .
8267	Compact an hdf5 file .
8268	Checks if all parameters in a group are in the group .
8269	Build a dictionary of model equations .
8270	Pre - build model .
8271	Build model .
8272	Build the model .
8273	Pre - build the network .
8274	Build the network .
8275	Add calibration parameters .
8276	Compute factor factor based on spike data .
8277	Compute mean factor for each neuron .
8278	Compute the mean fano factor for each subrun .
8279	Add monitors to the network .
8280	Add monitors to the network .
8281	Create the output folder .
8282	Plot result .
8283	Print the visualization of the current trajectories .
8284	Perform the analysis analysis .
8285	Get the batch number .
8286	Iterate over the given batch .
8287	NNTreeNodeVars .
8288	The function node .
8289	Rename the full name .
8290	Set the details .
8291	Convert a node to a message .
8292	Remove a sub - tree from a node .
8293	Delete a node .
8294	Removes a node from the tree .
8295	Remove the given node from the given tree .
8296	Translate a short name into a tuple .
8297	Add prefix to the root node .
8298	Determine the type of a node .
8299	Add a generic type .
8300	Add a node to the tree .
8301	Create a link under the given object .
8302	Checks the validity of the named names .
8303	Helper to create a group .
8304	Helper function to create any parameter or result .
8305	Sets the details for the given root node .
8306	Iterate over the nodes of a given node .
8307	Create an iterator for the child nodes .
8308	Recursively traverse a BFS tree .
8309	Perform a fast search .
8310	Search for a node by key .
8311	Backward search .
8312	Children of the node .
8313	Add a group from the storage .
8314	Add a leaf from storage .
8315	Return a list of directory data .
8316	Return the debug tree .
8317	Return the root of this node .
8318	Add a group .
8319	Add a link .
8320	Remove a link from the network .
8321	Add a leaf .
8322	Remove a child .
8323	Remove a child from this group .
8324	Determines if an item contains an item .
8325	Get the value of a file .
8326	Return the children .
8327	Get the groups
8328	Return a copy of the leaves .
8329	Return a copy of the links .
8330	Store a child .
8331	Store the current trajectory .
8332	Load a child .
8333	Load a single trajectory .
8334	Add a parameter group .
8335	Add a parameter .
8336	Add a result group .
8337	Add a result group .
8338	Add a derived parameter group .
8339	Add a derived parameter .
8340	Add a config group .
8341	Add a configuration group .
8342	Evaluate the fitness of each individual .
8343	Add config variables for a commit .
8344	Make a git commit and commit it .
8345	Recursively flattens a dictionary .
8346	Takes a dictionary and returns a nested dictionary .
8347	Display a progress bar .
8348	Get the argumentspec of a function .
8349	Get the kwargs that match func .
8350	Formats a timestamp
8351	Connect to a TCP port .
8352	Ensure a directory exists .
8353	Reset the index to the initial state .
8354	Get the remaining time in seconds .
8355	Return a copy of self .
8356	Remove an annotation .
8357	Return a string representation of the annotation .
8358	Make a result from a result .
8359	Make a shared result from a result .
8360	Create a shared variable .
8361	Store data for this trajectory .
8362	Get the data node .
8363	Return whether the item supports the given item .
8364	Create a shared shared data .
8365	Manage multiprocessing results .
8366	Releases a lock .
8367	Send a shutdown signal .
8368	Finalize the socket .
8369	Start the client .
8370	Send a REP request to the server .
8371	Acquire the lock .
8372	Listen for requests .
8373	Put data into the queue .
8374	Detect the fork .
8375	Handle a data message .
8376	Main loop .
8377	Receive data from the queue .
8378	Receive data from the socket .
8379	Stores the lock .
8380	Store a message .
8381	Store a list of trajectory references .
8382	Decorator to parse the configuration .
8383	Get a section from the parser .
8384	Collect the configuration from the storage .
8385	Interpret config file .
8386	Add the parameters from the config file .
8387	Convert a rule number to a numpy array .
8388	Make initial state .
8389	Plot a pattern .
8390	Calculate the cellular automaton pattern .
8391	Run the cellular automposition .
8392	Signal update .
8393	Return the overview group .
8394	Load the given message .
8395	Store a message .
8396	Load multiple items .
8397	Check hdf5 attributes .
8398	Store multiple items in an iterable .
8399	Close the file .
8400	Extracts information from keyword arguments .
8401	Backup the trajectory .
8402	Read a row from a table .
8403	Prepare the merge of a trajectory .
8404	Load metadata from a trajectory .
8405	Load a sub - branch .
8406	Check that the current Python version is correct .
8407	Fill the run table with the given traj .
8408	Load the explorations table .
8409	Store the explorations table .
8410	Make overview tables .
8411	Stores the given trajectory .
8412	Store a sub - branch on the tree .
8413	Create a leaf .
8414	Load all nodes from the given parent trajectory .
8415	Store nodes in the HDF5 group .
8416	Helper for _all_or_store .
8417	Get or create a table if it exists .
8418	Get a node by name
8419	Sets all attributes to the given ptitem .
8420	Recall native types .
8421	Add or modify a row .
8422	Insert values into a row .
8423	Extract data from an item .
8424	Truncate string to max_length
8425	Helper function to create a group .
8426	Helper function to create group if it exists .
8427	Store attributes of an item in an HDF5 file .
8428	Load the annotations from an item .
8429	Store a group on disk .
8430	Private method to update a load group .
8431	Load annotations from a traj node .
8432	Extract missing flags .
8433	Add summary entry .
8434	Add metadata table to HDF5 .
8435	Create HDF5 group from a dictionary .
8436	Store a parameter on disk .
8437	Write data to HDF5 .
8438	Write a shared table .
8439	Write a dictionary into a pytable .
8440	Write data to pandas data .
8441	Write data into an HDF5 array .
8442	Write data into an HDF5 file .
8443	Delete link .
8444	Return the result or group if delete_only is True .
8445	Write data into a pytable .
8446	Make a description from a pandas dataframe
8447	Get the value of a table column .
8448	Get the length of each string in a list of strings .
8449	Load data into a dictionary .
8450	Load a PRM file into a dictionary .
8451	Load shared data from shared_node .
8452	Read an HDF5 table .
8453	Read an HDF5 file .
8454	Load a trajectory .
8455	Make a set name .
8456	Set property values .
8457	Add dynamic imports .
8458	Set the name of the run .
8459	Iterate over the trajectories .
8460	Shrink the trajectory .
8461	Set a parameter .
8462	Add a parameter .
8463	Lock the experiment .
8464	Retrieve a value from the run .
8465	Determine if a run is completed .
8466	Remove the expansion from disk .
8467	Copy a node from another node .
8468	Explores the trajectory .
8469	Update run information .
8470	Add a single run info .
8471	Lock all parameters .
8472	Lock the derived parameters .
8473	Finalize the process .
8474	Loads the skeleton data
8475	Call f_load .
8476	Backup the trajectory .
8477	Make the reverse wildcards .
8478	Merge multiple trajectories into the current one .
8479	Merge a single run into a single run .
8480	Rename a full name .
8481	Merges derived_parameters into self . _derived_parameters .
8482	Merge links from another trajectory .
8483	Merge config from another trajectory .
8484	Merge two trajectories .
8485	Merge results from another trajectory .
8486	Migrate the trajectory .
8487	Store the trajectory .
8488	Restore default values .
8489	Sets the parameter access to the given index .
8490	Make a single run .
8491	Returns a list of run names .
8492	Get the run information .
8493	Iterate over the elements matching a predicate .
8494	Starts a run .
8495	Finalize the run .
8496	Set the start time of the simulation .
8497	Set the status of the run .
8498	Return an instance of the class .
8499	Return a modified item dictionary .
8500	Finalize the run .
8501	Get the config dictionary .
8502	Return the results as a dictionary .
8503	Store a single item in the storage .
8504	Load a single item from disk .
8505	Remove a single item from the network .
8506	Delete links from an iterator .
8507	Remove all children .
8508	Delete one or more items from the trajectory .
8509	Calls pool_pool .
8510	Frozen pool .
8511	Configure pool .
8512	Configure frozen pool .
8513	Process a single run .
8514	Configure SCOOP data .
8515	Configure a single run .
8516	Configure logging system .
8517	Configure niceness
8518	Called when a single run is running .
8519	Start a single run .
8520	Wrap the logging handler .
8521	Load a class by fully qualified name .
8522	Create a class by name .
8523	Returns the length of the parameter .
8524	Return the value as a string .
8525	Compare two values .
8526	Get the range .
8527	Explorer the parameter .
8528	Expand the parameter range .
8529	Check that the data is of the same type .
8530	Store the contents of the object .
8531	Load parameter from disk .
8532	Load an array parameter from a dictionary .
8533	Return True if the values are identical .
8534	Return True if the given data is a supported matrix .
8535	Serialize a sparse matrix .
8536	Build the names for a particular name .
8537	Reconstruct a sparse matrix
8538	Load a parameter from a dictionary .
8539	Stores the object s data .
8540	Load a parameter from a pickle file .
8541	Translate a key to a valid value .
8542	Return a string representation of the object s values .
8543	Convert to a dictionary .
8544	Set the value of the variable .
8545	Get a value from the result .
8546	Set a single item .
8547	Return whether the item supports the sparse parameter .
8548	Store the data in a dictionary .
8549	Load data from a dictionary .
8550	Set a single entry .
8551	Store the result .
8552	Load values from a pickle file .
8553	Merge all files in a folder .
8554	Upload a file to the remote server .
8555	Download a file .
8556	Create a session .
8557	Merge trajectories .
8558	Start all the jobs
8559	Multiply two reals .
8560	Run Euler integration .
8561	Postprocessor postprocessing .
8562	Add parameters to the trajectory .
8563	Add exploration of I and tau_ref
8564	Execute pre - run pre - run on a network
8565	Execute a network run
8566	Extract subruns from a trajectory .
8567	Execute a network run
8568	Add the parameters of a trajectory .
8569	Prepare the network .
8570	Run the network .
8571	Run the network .
8572	Generate a filename for a given trajectory .
8573	Return the next item .
8574	Merge all trajectories in a folder .
8575	Handles SIGINT .
8576	Load a configuration from a file .
8577	Request PIN .
8578	Request the access token from ECobee .
8579	Refresh the access token .
8580	Get the thermostats .
8581	Write the credentials to the config file .
8582	Set HVAC mode .
8583	Set the fan min on time .
8584	Set the hold temperature .
8585	Set the hold for a thermostat .
8586	Delete a vacation .
8587	Resumes a program .
8588	Send a message to the thermostat .
8589	Set thermostat .
8590	Generate a random delay .
8591	Generate a resend .
8592	Generate a timeout for a lease .
8593	Generate a new renewing time .
8594	Return a dictionary of FSM attributes .
8595	Reset attributes .
8596	Get the timeout for the given state and function .
8597	Set a timeout .
8598	Send a discovery packet .
8599	Select one offer .
8600	Send a request .
8601	set the timeouts
8602	Process ack packet .
8603	Check if a NUC is received from the client .
8604	Initalize the device .
8605	Set the BOUND state .
8606	RENEWING
8607	Change the current state of the lease .
8608	End the lease .
8609	Raise an error .
8610	Called when the connection is reached .
8611	Raise a REQUESTING .
8612	Raises RENEWING .
8613	Raise a REBINDING . REBINDING or REBINDING .
8614	Receive an offer .
8615	Process an ACK request .
8616	Process a NAK request .
8617	Called when an ACK is received .
8618	Receive a NAK .
8619	Called when an ACK is received .
8620	Called when a NAK is received .
8621	Renew the lease .
8622	Set the value of a query .
8623	Return a new QuerySet with the given name and value .
8624	Return a copy of the query with the given name removed .
8625	Get the status of the nagios server .
8626	Create the output of the program .
8627	Main entry point .
8628	Validate a message .
8629	Read a TdMS file and return a list of tuples .
8630	Add the transformation to the data .
8631	Convert tdms file to fcs
8632	Compare two files .
8633	Create a patch
8634	Delete the next patch .
8635	Delete a patch .
8636	Determine if a file is in the patch .
8637	Backup a file .
8638	Add a file to the database .
8639	Run the command .
8640	Create the directory .
8641	Copy this directory to another directory .
8642	Link a file .
8643	Copies the file to the destination .
8644	Return the directory of the file .
8645	Backup a file .
8646	Refresh the current index .
8647	Unapply a patch .
8648	Unapply a patch .
8649	Unapply all patches .
8650	Apply a patch to the series .
8651	Apply the next patch to the series .
8652	Apply all patches .
8653	Read the series file .
8654	Save the series to disk .
8655	Add a patch .
8656	Insert patches into the patch .
8657	Add patches .
8658	Remove a patch
8659	Return a list of patches after the given patch .
8660	Return a list of patches before the given patch .
8661	Return a list of patches that match the given patch .
8662	Replace a patch .
8663	Create the directory .
8664	Check the version of python -quilt meta - data .
8665	Add the arguments to the parser .
8666	Add command line arguments to a parser .
8667	Add a subparser to the subparsers .
8668	Set the arguments for the subparsers .
8669	Add subparsers to the parser .
8670	Check if filename is in patch
8671	Check if a file is in the next patches .
8672	Revert a file .
8673	Import a patch .
8674	Import patches .
8675	Add a way .
8676	Iterate over the missing nodes .
8677	Add a node .
8678	Build a route from a relation .
8679	Create a long name from a relation .
8680	Get the agency ID .
8681	Process the RST relations .
8682	Add a relation .
8683	Create dummy data .
8684	Given a list of agencies return an Agency object .
8685	Generate dummy trips for each trip .
8686	Write the data to a zip file .
8687	Write the compressed data to the given destination .
8688	Build agency object .
8689	Extract stops from a relation .
8690	Build a shape from a relation .
8691	Returns a list of supported versions .
8692	Send an APDU .
8693	Authenticate a list of devices .
8694	Register a new facet .
8695	Authenticate a U2F .
8696	Register a U2F device .
8697	Convert unicode to str
8698	Wrap a function with an error function .
8699	Wrap a class with an error decorator .
8700	Return True if the filepath matches the pattern .
8701	Convert an email address into a string .
8702	Return the entry corresponding to an entry .
8703	Convert markdown to reST .
8704	Serve a configuration file .
8705	Records an error in the stack .
8706	Convert url to ImageIO
8707	Create an Image from a string .
8708	Validate an image .
8709	Check if image is bigger than size .
8710	Check that the width is big enough .
8711	Check that the given height is big enough .
8712	Parses a category and returns it .
8713	Parse the value of a field .
8714	Get all the items from the source .
8715	Save an error .
8716	Parses the source and updates the instance attributes .
8717	Parse an item into a dictionary .
8718	Get an instance of the model .
8719	Save an item .
8720	Download a file from a URL .
8721	Load the configuration from a file .
8722	Return a dict of the items in the CSV file .
8723	Enable or disable network access .
8724	Run a command runner .
8725	Add files to the container .
8726	Add a file to the sandbox .
8727	Get all enrollments for a given course .
8728	Gets all enrollments for a particular site .
8729	Get all enrollments for a section .
8730	Gets all enrollments for a particular section .
8731	Get all enrollments for a given regid .
8732	Enrolls a user .
8733	Get all roles in an Account .
8734	Gets a list of all roles in an Account .
8735	Gets the effective course roles in an Account
8736	Get a single role .
8737	Gets a role by Id
8738	Retrieve a course .
8739	Retrieve a course by Id
8740	Get all courses in an account .
8741	Gets the courses in the given sis_account .
8742	Get the published courses in an Account .
8743	Gets the published courses in the given SIS Account .
8744	Get all courses for a given regid
8745	Create a course .
8746	Update sis_course_id .
8747	Get activity by id and term .
8748	Get grades by the given account and term .
8749	Get the statistics for a particular term and term .
8750	Get an activity by sis_course_id
8751	Get all assignments by sis_course_id
8752	Get student summaries by sis_course_id
8753	Returns the student activity for the given ssis_id and sis_course_id
8754	Retrieves the student messaging for the given SIS user .
8755	Gets all external tools in an account .
8756	Get external tools in a course .
8757	Create an external tool .
8758	Update an external tool .
8759	Delete an external tool .
8760	Check if an object is set .
8761	Get user details .
8762	Returns a list of users for the given course .
8763	Gets the users for a particular site .
8764	Create a user .
8765	Returns a list of all loggedins .
8766	Update a user login .
8767	Extract the next page from the response .
8768	Retrieves a resource from the API .
8769	Retrieves a paged resource .
8770	Get a resource from a url .
8771	Make a PUT request .
8772	POST a resource
8773	Generic DELETE operation .
8774	Get a list of all admins .
8775	Create an admin .
8776	Creates an admin by the given Id .
8777	Delete an admin .
8778	Deletes an admin by the Id .
8779	Creates a grading standard system for the given course .
8780	Retrieve a section by ID .
8781	Retrieve a Section by Id .
8782	Get all sections in a course .
8783	Gets all sections in a course .
8784	Retrieve all sections in a course .
8785	Gets the list of sections with the given Id .
8786	Create a section .
8787	Update a section .
8788	Returns a list of Quiz objects for the given course .
8789	Get an account by id .
8790	Retrieve a list of sub accounts for the given account .
8791	Update an account .
8792	Update SIS ID .
8793	Retrieves the SSOSettings object for the account .
8794	Update the authentication settings for an account .
8795	Gets a term by its Id .
8796	Import a CSV from a string
8797	Import a directory into SIS .
8798	Get the status of a SIS import .
8799	Build the zip archive .
8800	Returns a list of assignments for the given course .
8801	Update an assignment .
8802	Returns a list of all reports available for the account .
8803	Get all reports by type and type .
8804	Create a report .
8805	Create a course provisioning report .
8806	Create a SIS export report .
8807	Creates a new empty course report .
8808	Get report data from a report .
8809	Get the status of a report .
8810	Delete a report .
8811	Move detection of detected detection
8812	Flip detections from a label .
8813	Return a copy of the object .
8814	Returns a dictionary with the configured settings .
8815	Return the empty value .
8816	Parses the arguments and returns a dictionary of keyword arguments .
8817	Create the metrics for the given metrics .
8818	Setup logging .
8819	Configure the registry .
8820	Create a dictionary of metrics .
8821	Get a metric by name .
8822	Handle the home page .
8823	Handler for metrics .
8824	Gets the text from Wolfram alpha .
8825	Fix HTTPMessage .
8826	Perform a JSON query .
8827	The info about the decision .
8828	Return a generator of all the results .
8829	Encode data as JSON .
8830	Make an API call .
8831	Call a GET request .
8832	Perform a DELETE request .
8833	Make a PUT request .
8834	Make a POST request .
8835	Process a query .
8836	Group sentences into groups .
8837	Disambiguate a PDF file .
8838	Disambiguate a query .
8839	Segment the given text into segments .
8840	Recognize a language .
8841	Fetch a concept by id
8842	Fit the model to the ensemble .
8843	Calculate the accuracy score of the ensemble .
8844	Fit the MDR model .
8845	Fit the estimator .
8846	Calculate the accuracy score for the given features .
8847	Compute the MDR model .
8848	Transform a feature matrix into a new one .
8849	Calculate the score of each feature .
8850	Predict on X and y .
8851	Iterate over n - way models .
8852	Plot a matplotlib matplotlib model .
8853	Get the configuration from the app .
8854	Get a configuration value .
8855	Create a vector from an iterable of members .
8856	Create a vector of members .
8857	Evaluate a template file .
8858	Compile a stream into a Python object .
8859	Parse a string into a Python object .
8860	Bootstrap a repl module .
8861	Run the given code .
8862	Create a composite function .
8863	Add a method to a map .
8864	Add a method to the MultiFunction .
8865	Get a method from the cache .
8866	Remove a method from the map .
8867	Remove a method by key .
8868	Return whether the value is a macro .
8869	Return the line and column position of the reader .
8870	Decorator for parsing a form .
8871	Assert that there is no recur .
8872	Assert that the node is tail .
8873	Resolve a bare symbol .
8874	Resolves a Fortran form .
8875	Parse an AST .
8876	Whether or not the variable is a shadowed variable .
8877	Add a symbol to the symbol table .
8878	Map a list of dictionaries to a string .
8879	Return a string representation of an iterable .
8880	Return a string representation of an object .
8881	Retrieves a repr of an object .
8882	Replace all nodes with environment variables .
8883	Compile a form and execute it .
8884	Recursively compile a module .
8885	Compile a Python module .
8886	Compile python code into a module .
8887	Convert an iterable into an ISeq .
8888	Merge a string .
8889	Remove underscores from a string .
8890	Create a Fraction object .
8891	Return a logging handler .
8892	Create a new map .
8893	Partition a collection of elements .
8894	Wrap a function f with the current line and column .
8895	Read a Namespace element .
8896	Read a collection from the reader .
8897	Read a list .
8898	Read a vector .
8899	Read a set .
8900	Read a map .
8901	Read a string .
8902	Read a Symbol .
8903	Read keyword .
8904	Read a meta comment .
8905	Read a function definition .
8906	Read a quoted comment .
8907	Expand a syntax quote form .
8908	Process a lexicoted form .
8909	Read syntaxquoted form .
8910	Read a unquoted comment .
8911	Read a Deref comment .
8912	Read a character .
8913	Read a regular expression .
8914	Read reader macros .
8915	Read the next comment .
8916	Read next token .
8917	Read data from a stream .
8918	Read data from a string .
8919	Read a file .
8920	Update the location .
8921	Push back to the stack .
8922	Read a token from the stream .
8923	Create base64 - encoded bytecode .
8924	Get a basis set of bases from the cache .
8925	Return the path to a cache file .
8926	Hook for hook imports .
8927	Return a module spec for the given fullname .
8928	Execute a cached module .
8929	Execute a template .
8930	Execute a module .
8931	Create a symbol .
8932	Complete the given text .
8933	Get or create a PMap .
8934	Get a keyword .
8935	Return a tuple of the dependencies and their dependencies .
8936	Load an attribute .
8937	Generate a simple AST from an ast .
8938	Generate an AST from a collection .
8939	Add lineno and col_offset to an AST .
8940	Decorator to add an ast node .
8941	Decorator to add a function to the AST .
8942	Return whether the variable is dynamic .
8943	Determine if a variable is redefable .
8944	Convert an expression into an AST .
8945	Convert a function into an expression definition .
8946	Determines if a defsymbol should be declared on the defsym .
8947	Convert a DO node into an AST .
8948	Return the name of a function .
8949	Convert a list of args into an AST .
8950	Convert a singlearity function to an AST .
8951	Convert a function to an AST node .
8952	Convert a function to an AST .
8953	Convert a function to a python AST .
8954	Converts an If node to an AST .
8955	Convert an Invoke node into an AST .
8956	Converts a quote node into an AST .
8957	Convert recur to python AST .
8958	Convert recur point to python AST .
8959	Convert a setbang to a Python AST .
8960	Converts a throw node into an AST .
8961	Convert a Try to a Python AST .
8962	Convert a local node into an AST .
8963	Convert a variable find to an AST .
8964	Convert a variable to an AST .
8965	Convert an interop property to an AST .
8966	Convert a PyClass to an AST .
8967	Convert a node into an AST .
8968	Converts a ConstantForm into an AST .
8969	Convert a collection literal to a Python AST .
8970	Generate a Py AST from a Python AST node .
8971	Iterate over the imports of a module .
8972	Return an ast . ImportFrom from a Python module .
8973	Create a namespace variable .
8974	Set a set of members .
8975	Return a new set with the specified members .
8976	Visitor for ExceptHandler .
8977	Visitor for expression .
8978	visit a FunctionDef
8979	Visit a While node .
8980	visit a Try .
8981	Create a new module .
8982	Return the first element of an object or None if it s not None .
8983	Return the rest of an object .
8984	Return the nth part of a collection .
8985	Return the nth element of a collection .
8986	Return the union of a sequence or sequence .
8987	Convert an object into a sequence .
8988	Concatenate multiple sequences .
8989	Associate an object with the given kvs .
8990	Concatenate an object .
8991	Partially partial function .
8992	Refreshes an object .
8993	Compare two strings .
8994	Divide x and y .
8995	Sort a collection .
8996	Determine whether a collection contains a key .
8997	Retrieves the value of a given key .
8998	Convert an object to a Lispatch .
8999	Convert an object into a Python object .
9000	Return a string representation of an object .
9001	Convert python variadic arguments into a list .
9002	Decorator for _TrampolineArgs .
9003	Decorator to set attributes .
9004	Decorator to add meta to a function .
9005	Decorator to modify a function .
9006	Resolve an alias .
9007	Resolve a variable by its alias .
9008	Add a new python variable .
9009	Bootstrap a dynamic variable .
9010	Create a Var with the given name and value .
9011	Intern an unbound variable .
9012	Find a variable in the namespace .
9013	Find a variable in a namespace .
9014	Find a variable in the context .
9015	Add a default import .
9016	Add an alias .
9017	Return the symbol corresponding to the symbol .
9018	Associate new_var with new_var .
9019	Return the value of a variable .
9020	Add an import statement .
9021	Return the first import of a symbol .
9022	Add a reference to the symbol .
9023	Return the reference of a symbol .
9024	Refreshes all symbols in the given namespace .
9025	Refreshes all the namespaces .
9026	Get or create a namespace .
9027	Get or create a namespace .
9028	Get a namespace by name .
9029	Remove a namespace .
9030	Returns a completion matcher that matches the given string .
9031	Return an iterator over all possible aliases .
9032	Iterates over the namespaces and aliases .
9033	Completes internals .
9034	Returns an iterable of the names of the names referenced in the namespace .
9035	Returns an iterable of all the names and their dependencies .
9036	The final arguments of the expression .
9037	List members .
9038	Return a list of members .
9039	Decorator to change the style .
9040	Decrypt a JWT .
9041	Encrypt a JWT .
9042	Delete an item from the cache .
9043	Return the selector as a tuple .
9044	Close the writer .
9045	Parse a FIFQL string into an Expression object .
9046	Write a ndb model to a file .
9047	Decode object hook .
9048	Decode a date .
9049	Decodes the given value
9050	Default encoder .
9051	Validate release version
9052	Generate a changelog .
9053	Returns a list of strongly connected components .
9054	Robustly sort a graph .
9055	Set parent
9056	Returns parent expression
9057	Adds an operator to the current expression .
9058	Add an element .
9059	Create an AND operator .
9060	Create a new expression with the given elements .
9061	Decorator to log a function .
9062	Parse a receive message .
9063	Convert a list of tuples into a OrderedDict .
9064	Return the first message that matches the given command .
9065	Prepare send commands .
9066	Flush incoming socket messages .
9067	Enables a slide .
9068	Save the template to disk .
9069	Load a template file
9070	Get device information .
9071	r Write a file to a file .
9072	Locate the package . json file .
9073	Parse the package json .
9074	Handle an API error .
9075	Validate response .
9076	Helper function to homogenize the wavelength components .
9077	Interpolate a wave .
9078	Get the indices of the indep vector between two samples .
9079	Verify that two wavelength arrays are compatible .
9080	Load the systemjs manifest
9081	Truncate the parameters of a module .
9082	Run a trace on a module .
9083	Shorten a URL .
9084	Expand a short URL .
9085	Returns the URL stats for a given shorturl .
9086	Get a list of links .
9087	Retrieve the database statistics .
9088	r Print a command to stdout .
9089	Execute a shell command .
9090	Log a message to stdout .
9091	Decorator for caching methods .
9092	Split an iterable into chunksize .
9093	Split an iterable into chunks .
9094	Flatten an iterable .
9095	Signal handler for SIGINT .
9096	Print a table .
9097	Create a dummy class .
9098	Create an integer from a human readable string .
9099	CLI client .
9100	Trace module .
9101	Defines the links in the requirements file
9102	Add a common prefix to the plist .
9103	Make a list of Python versions .
9104	Convert a string of comparison operators into words .
9105	Generator for chunk noise data
9106	Calculate the parameters of a chunk .
9107	r Write a touchstone file .
9108	Bounding waveform .
9109	Builds a string from indep_units and indep_units
9110	Create a new wave .
9111	Calculate the running area of the trajectory .
9112	Validate min and indep_min and indep_max
9113	r Compute the cosine of a wave .
9114	r Compute the cosine of a wave .
9115	r Return the cosine of a wave .
9116	r Compute the arithmic of a wave .
9117	r Average the waveform .
9118	r Compute the dB of a wave .
9119	r Derivative of a waveform .
9120	r Fast Fourier Transform
9121	r Fast Fourier Transform
9122	r Time Fourier transform .
9123	r Fourier Transform
9124	r Compute the db for the Fourier Transform .
9125	r Return the inverse of the Fourier transform .
9126	r Compute the inverse of the Fourier transform .
9127	r Time Fourier transform .
9128	r Compute the Fourier transform .
9129	r Compute the integral of a waveform .
9130	r Compute the group delay
9131	r Logarithmic of wave .
9132	r Calculate the na coverage of a waveform .
9133	r Compute the integral of a waveform .
9134	r Compute the maximum value of a waveform .
9135	r Return the minimum value of a waveform .
9136	r Compute the phase of the wave .
9137	r Round a wave .
9138	r Compute the square root of a waveform .
9139	r Create a sub - waveform .
9140	r Compute complex wave .
9141	r Convert a wave to a float
9142	r Convert a wave to an integer .
9143	r Return the value of the w value at the given indep_var .
9144	Find JSPM files .
9145	Get a short description from a long description .
9146	Build an expression from a list of tokens .
9147	Return the next item in the list .
9148	Return a list of function names .
9149	Parses a delimiter and returns a list of delimiters .
9150	Parse an expression .
9151	Remove duplicate delimiter from an expression .
9152	Split a string into pieces .
9153	Convert a number to a scientific notation .
9154	r Convert a number to a scientific notation .
9155	r Convert a number to a string .
9156	r Convert a string into a floating point number .
9157	r Calculate peng fraction from a string
9158	r Convert a string into a float .
9159	r Calculate power .
9160	r Calculate the math multiplier of a suffix .
9161	r Remove extra delimiters from an expression .
9162	Convert number to scientific notation .
9163	Convert number to scientific notation .
9164	Find sourcemap comment .
9165	Determines if the app needs to be loaded .
9166	Bundle the app .
9167	Trace a Flask application .
9168	Determine if a dep_tree matches the given dep_tree .
9169	Formats a hex dump of an argument .
9170	Parse a docstring .
9171	Return a list of valid identifiers .
9172	Determine the context of add action .
9173	Split a line into parts .
9174	Check if init_commands are valid .
9175	Return the help text for a builtin function .
9176	Find a function by name .
9177	Lists the contents of the given context .
9178	Return True if argument is a flag .
9179	Process arguments .
9180	Extracts the value from the given argument .
9181	Invoke a single function .
9182	Invoke the given line .
9183	Invoke a function .
9184	Parse a param definition from a docstring .
9185	Parse a return line .
9186	Classify section name .
9187	Classify a line .
9188	Join a list of lines into a list of paragraphs .
9189	Return a string representation of the main docstring .
9190	Convert value to type .
9191	Convert binary data to binary type .
9192	Returns the size of the given type .
9193	Format a value into a string .
9194	Validate the type .
9195	Is the given type name?
9196	Split a complex type name into a tuple .
9197	Instantiate a sub - type .
9198	Get a type by name .
9199	Return True if the given type is a known format .
9200	Injects a type object .
9201	Load a type module .
9202	Check if the spec is filled in the spec .
9203	Add a parameter .
9204	Defines a typed return value .
9205	Add a custom return value .
9206	Convert a short - name to a full parameter name .
9207	Return the type of a parameter .
9208	Return the signature of the function .
9209	Format the return value .
9210	Convert a positional argument to a value .
9211	Check function spec .
9212	Convert an argument to a valid value .
9213	Format the error message .
9214	Return a dict representation of this exception .
9215	Check and execute a function and execute it .
9216	Parse validators .
9217	Find all objects in a container .
9218	Return a context manager for a given module .
9219	Get the help text for a function .
9220	Decorator to annotate a parameter .
9221	Decorator to annotate a return value .
9222	Decorator to annotate a type .
9223	Decorator to annotate a class .
9224	Decorator to annotate a function .
9225	Mark a function as annotated .
9226	Get the short description of a function .
9227	Load all commands .
9228	Install the scheduler
9229	Print all tasks .
9230	Uninstall the crontab .
9231	Create a new schema .
9232	Load all projects from a directory
9233	Save project config to yaml file .
9234	Define a singleton class .
9235	Return all projects in this project .
9236	Decorator to run the project command .
9237	Initialize the project .
9238	Set the value of a key .
9239	Set an attribute .
9240	Create an object from an iterable .
9241	Set the value of the current state .
9242	Sets a set of values .
9243	Return a function that applies a function to each state .
9244	Return a function that yields n arguments .
9245	Apply a function to the given state .
9246	Apply a function to a pure object .
9247	View a fold .
9248	Return a copy of the Fold .
9249	Apply a function over the given state .
9250	Set the value to the given value .
9251	Iterate over an iterable .
9252	Return the kind of optics .
9253	Main entry point .
9254	Return a new vector with the same direction .
9255	Handles the game .
9256	Advance robots .
9257	End game .
9258	Go to the game .
9259	Play a game of naughts and cross against the computer .
9260	Make a move .
9261	The winner of this board if one exists .
9262	Iterate over the potentials .
9263	Process an item .
9264	Open a spider .
9265	Upload a chunk to S3 .
9266	Create a file - like object .
9267	Get account state .
9268	Get asset state .
9269	Get a specific block .
9270	Get the block hash of a block .
9271	Returns the block s fee for the given block index .
9272	Get the contract state of a script .
9273	Get the raw transaction .
9274	Get the value of a script .
9275	Get the transaction out of a given transaction .
9276	Invoke a script .
9277	Invoke a function .
9278	Invoke a script .
9279	Send a raw transaction .
9280	Validate an address .
9281	Make a call to the server .
9282	Return True if s is a hash256 hash256
9283	Is a hash160?
9284	Encode Invocation parameters .
9285	Decodes an InvocationResult .
9286	Decorator for defining the first keyword argument .
9287	Convert an instruction to a timezone .
9288	Apply the current timezone to a datetime .
9289	Render the template .
9290	Render the barcode .
9291	Calculates the checksum of the EAN algorithm .
9292	Render code .
9293	Connect to KVS .
9294	Main entry point .
9295	Download a file from S3
9296	Upload a file to S3
9297	Downsync map_files
9298	Show the differences between the current configuration file .
9299	Parse an environment variable .
9300	Set basic configuration .
9301	Set the API key prefix .
9302	Get json content from a folder
9303	Get all JSON Schema objects .
9304	Retrieves the schema from disk .
9305	Returns a RefResolver object .
9306	Validate an object .
9307	Get valid examples .
9308	Get invalid examples .
9309	Build authorization URL for User Agent .
9310	Process tokens and errors from redirect_uri .
9311	Refresh or acquire access_token .
9312	Returns id of a OneDrive user .
9313	Get oneDrive object representing list of objects in a folder .
9314	Create a directory .
9315	Add comment message to a specified object .
9316	Convert object to unicode .
9317	Recursively create and set the drop target for obj and childs
9318	Event handler for drag and drop functionality
9319	track default top window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert Python Card font description to gui style
9323	Loads HTML page from location and displays it
9324	Retrieves a parameter from the tag .
9325	Process an outgoing communication
9326	Show a tip message to exit .
9327	Get the selected object and store start position
9328	Move the selected object
9329	Called by SelectionTag
9330	support cursor keys to move components one pixel at a time
9331	delete all of the selected objects
9332	create a copy of each object
9333	Capture the new control superficial image after an update
9334	When a Top - level window position is absolute
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated with the wx item
9337	Do a reverse look up for an item containing the requested data
9338	Remove the item from the list and unset the related data
9339	Remove all the items from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index n to be the selected item .
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the given position n .
9344	Adds the item to the control associating the given data if not None .
9345	Construct a string representing the object
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	called when adding a control to the window
9349	Re - parent control control with the new wx_obj parent
9350	make several copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Find all modules in a directory
9354	Return a list of children sub - components that are column headings
9355	Update the grid if rows and columns have been added
9356	Update all displayed values
9357	update the column attributes to add the appropriate renderer
9358	colo sort the data based on col
9359	Remove all rows and reset internal structures
9360	Called to create the control which requires from wxControl .
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell . Returns True if changed
9363	Return True to allow the given key to start editing
9364	This will be called after the first key
9365	Decorator to create a type handler .
9366	enable or disable all menu items
9367	check if all menu items are enabled
9368	enable or disable top menus
9369	check if all top menus are enabled
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Set object tag .
9373	Parse the html table at the top .
9374	Return the documentation for the given object .
9375	Mangle a signature .
9376	Import a module by name .
9377	Auto - link a role .
9378	Show a simple pop - up modal dialog
9379	Modal dialog asking for an input returns string or None if cancelled
9380	Show a dialog to select a font
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Sets the icon .
9386	Display or hide the window optionally disabling all other windows
9387	Open read and eval the resource from the source file
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers
9392	translate gui2py attribute name from python card legacy code
9393	Write content to the clipboard data
9394	Find autosummary in a docstring .
9395	Add the object and all its childrens
9396	Select the object and show its properties
9397	load the selected item in the property editor
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object
9400	Return the thumbnail representation of the value .
9401	Decorator to add an expression filter .
9402	Decorator to add a node filter .
9403	Assert that the current path is the current path .
9404	Assert that a path has no current path .
9405	Assert that path has the current path .
9406	Assert that path has no current path .
9407	Select option .
9408	Apply a filter to the expression .
9409	Get a browser .
9410	Return an xpath expression .
9411	Determines if the given node matches filters .
9412	Switch to the current frame .
9413	Accept an alert .
9414	Open a confirmation dialog .
9415	Displays a confirmation dialog .
9416	Prompt the user for a prompt .
9417	Disconnect a prompt .
9418	Save the body to a file .
9419	Save a screenshot to a PNG file .
9420	Raise server error .
9421	Return True if the filter matches the filter .
9422	Tests if a field has a checked field .
9423	Tests if a field is not checked .
9424	Adds an unchecked field .
9425	Searches for unchecked field .
9426	Assert that the query is text .
9427	Assert that the query has no text .
9428	Asserts that a title matches the given title .
9429	Assert that a title has no title .
9430	Asserts that a title has a title .
9431	Assert that a title has no title .
9432	Find all matching results .
9433	Find the first occurrence matching criteria .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for settingter .
9438	Decorator to synchronize a function .
9439	Determines if an error should catch errors .
9440	Compares the count against the query options .
9441	Cache the results at the given size .
9442	Return True if the options are None .
9443	Generate a failure message .
9444	Returns True if count matches the given options .
9445	Normalize given value .
9446	Normalize whitespace .
9447	Convert text into a regular expression .
9448	Determines if the current path matches the expected path .
9449	Resizes the window to the specified width and height .
9450	Start the WSGI application .
9451	Setter for property .
9452	Set instance method .
9453	Set class method .
9454	Trace traceback .
9455	Return the source code for an object .
9456	Returns the logger for the given instance .
9457	Sets the logger .
9458	Make a request to the API
9459	List all channels .
9460	Retrieve the list of users .
9461	Make a message to Slack .
9462	Translates a Slack message to Slack .
9463	Send a slack message
9464	Read a channel from the protocol .
9465	Run Slack API .
9466	Command line entry point .
9467	Diff two dictionaries
9468	Color a message .
9469	Called when a task starts .
9470	Called when a result is finished .
9471	Print a summary of the stats .
9472	Called when a task is skipped .
9473	Convert a prefix to a netmask .
9474	Decorator to check if value is empty
9475	Add a model .
9476	Get all the elements in the collection .
9477	Load a dictionary from a dictionary .
9478	Convert the object to a dictionary .
9479	Parse the config file .
9480	Parse the device state .
9481	Translate the configuration to a string .
9482	Load all the filters
9483	Find a YANG file in YAML .
9484	Convert a model into a dictionary .
9485	Returns the difference between two strings
9486	Perform an HTTP POST request .
9487	Returns the authorization code URI .
9488	Get an access token .
9489	Extract query parameters from a URL .
9490	Delete a URL from a URL .
9491	Build a fully qualified URL .
9492	Log exception .
9493	Make a response object .
9494	Make a redirect error response .
9495	Make a JSON response .
9496	Get an authorization code .
9497	Refresh a refresh token .
9498	Get an access token .
9499	Get the authorization code from the given URI .
9500	Get a token from POST data .
9501	Get the Authorization header .
9502	Open the device .
9503	Read a byte from the bus .
9504	Read a number of bytes from the bus .
9505	Read a byte from the bus .
9506	Write bytes to the bus .
9507	Write byte data to the bus .
9508	Write I2C block data to the bus .
9509	Get CDN URL .
9510	Creates a copy of this object
9511	Create a local copy .
9512	Create a remote copy .
9513	Construct a File object from a file info dictionary .
9514	Upload a file .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	List of file CDN URLs .
9518	Construct a Group from a dictionary .
9519	Create a new group .
9520	Base operation .
9521	Iterate over all file items .
9522	Helper function to iterate over API calls .
9523	Progress bar .
9524	Make a request to the server .
9525	Retrieve the home mode status .
9526	Retrieve a list of cameras .
9527	Retrieve camera information .
9528	Retrieve a single camera snapshot .
9529	Disables a camera .
9530	Retrieve motion settings for a camera .
9531	MDP Parameter Save event .
9532	Update the camera settings .
9533	Checks if the given li is the last li
9534	Yield the data from a single list
9535	Get the value of an ilvl .
9536	Get vMerge element .
9537	Get the number of grid span .
9538	Get the td element at index
9539	Return True if style is False otherwise .
9540	Return True if r is bold
9541	Return True if r is italic
9542	Return True if r is under r .
9543	Return True if p is a title .
9544	Get the content of a text run .
9545	Get relationship info from tree .
9546	Read a document from a file .
9547	Return the type of a list .
9548	Build a list from a list .
9549	Build a tr element from a tr element .
9550	Build a table element .
9551	Returns the content of a tag .
9552	Remove a tag from the tree .
9553	Find a dataset by url
9554	Load a MNIST dataset .
9555	Load a CIFAR file .
9556	Plot images .
9557	Plot layers .
9558	Plot grayscale filters .
9559	Generate samples from the given arrays .
9560	Convert a string into a list of strings .
9561	Generate batches of classifier batches .
9562	Predict a sequence of sequences .
9563	Add convolution weights .
9564	Compute the encoder .
9565	Decodes the input into the network .
9566	Find the output layer name .
9567	Return the autoencoder score .
9568	Predict function .
9569	Predict probabilities for x .
9570	Predict logit .
9571	Compute the mean of x and y .
9572	Create a batch of features .
9573	Generate samples from the dataset .
9574	Load a network from a path .
9575	Generate a random matrix .
9576	Return a random vector .
9577	Iterate over outputs matching pattern .
9578	Yield params matching pattern .
9579	Create a layer from kwargs .
9580	Returns a list of all variables .
9581	Compute the accuracy of the model .
9582	Perform a scan .
9583	Build an Activation object .
9584	Generate an n - sized reservoir .
9585	Set a loss .
9586	Perform an iteration on the iterator .
9587	Train the model .
9588	Generate a hash of the layers .
9589	Build the computation graph .
9590	List of inputs .
9591	Returns a list of all variables .
9592	Find a layer by name
9593	Compute the feed - forward graph .
9594	Predict function .
9595	Compute the score of the model .
9596	Save the model to a file .
9597	Load a model from a file .
9598	Compute loss .
9599	Compute the update graph .
9600	The output size .
9601	Connect the input and update the outputs .
9602	Bind the model to the graph .
9603	Resolve input shapes .
9604	Resolve outputs .
9605	Log the current layer .
9606	Log the parameters .
9607	Format a string .
9608	Resolve layer shape .
9609	Find a parameter by its name .
9610	Add a bias vector .
9611	Return a dictionary representation of the model .
9612	Calculate the loggabor .
9613	Calculate the loggabor of the image .
9614	Add a tier .
9615	Remove a tier by name .
9616	Get tier by name .
9617	Convert this tier into an Eaf object .
9618	Add a point to this tier .
9619	Add an interval to the interval .
9620	Remove an interval from this tier .
9621	Remove a point from this tier .
9622	Returns an iterator of intervals
9623	Returns a sorted list of all intervals in this tier .
9624	Indent an element .
9625	Add an annotation .
9626	Add a CV entry .
9627	Add a description .
9628	Add an external reference .
9629	Add a language .
9630	Add a lexicon reference .
9631	Add a linguistic type .
9632	Add a linked file .
9633	Add a locale .
9634	Add a secondary linked file .
9635	Add a tier .
9636	Remove all time slots .
9637	Return a copy of the EAF .
9638	Generate an annotation id .
9639	Generate a timestamp .
9640	Return a list of child tiers for the given id .
9641	Get the full time interval .
9642	Get the reference annotation data after a given time .
9643	Get the reference annotation data before the given time .
9644	Return the tier ids for a given ling_type
9645	Merge one or more tiers .
9646	Remove all annotations from the given tier .
9647	Remove a description from the vocabulary .
9648	Remove a license .
9649	Remove linked files .
9650	Remove a property .
9651	Remove an annotation from the given tier .
9652	Remove secondary linked links .
9653	Remove a tier by id .
9654	Remove the given tiers .
9655	Rename a tier .
9656	Shift annotations by time .
9657	Main entry point .
9658	Display debug information for the storage
9659	Get the base level of text .
9660	Get embedding levels .
9661	Convert an explicit embedding to explicit embedding .
9662	Calculate a list of runs .
9663	Recursively resolve weak types in the storage .
9664	Resolve neutral types .
9665	Reverse a contiguous sequence .
9666	Reorder resolved levels .
9667	Process the current file .
9668	Convert a list of lines into a Python object .
9669	Add an attribute to an object .
9670	Command line interface .
9671	Makes sure that the old version is compatibly compatable .
9672	Show the GUI .
9673	Try to discover PyBlish .
9674	Deregister the host
9675	Add to file menu
9676	Temporarily change the current selection .
9677	Temporarily change the current time .
9678	Display a message box with a GUI .
9679	Setup the types .
9680	Return the cumulative data .
9681	Get the values for a single axis .
9682	Draw a constant line on the y - axis with the label
9683	Cache the parameters needed to transform x and y coordinates
9684	Reverse a mapping .
9685	Generate a range of floats .
9686	Add a data descriptor .
9687	Add svg definitions
9688	Add a conf
9689	Burn the legend .
9690	Calculates the left margin of the left axis .
9691	Calculates the right margin .
9692	Calculate border margin .
9693	Add a popup .
9694	Calculates the bottom margin of the data .
9695	Draw the graph
9696	Make a text element .
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draw the X - axis guidelines
9700	Draw the Y - axis guidelines
9701	Draws the graph title and subtitle
9702	Hard - coding the styles into the SVG XML if style sheets is not used .
9703	Base SVG Document creation
9704	Get the stylesheets for this instance
9705	Run a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to a channel .
9709	Dispatch patterns .
9710	Create a new nick .
9711	Handle a ping packet .
9712	Called when the server is registered .
9713	Main event loop .
9714	Register this node .
9715	Main task runner .
9716	Decorator to require a boss .
9717	A list of patterns that should be applied to each worker .
9718	Called when the client is successful .
9719	Execute a command .
9720	Add a nick
9721	Send the validation email .
9722	Send a password reset notification .
9723	Validate password strength .
9724	Verify a token .
9725	Delete a user .
9726	Only allow POST requests .
9727	Return an executor .
9728	Return a Docker client .
9729	The TLS client .
9730	The service name .
9731	Wrapper around Docker API .
9732	Execute a Docker API call .
9733	Poll the status of a Docker service .
9734	Stop the Docker service .
9735	Filter queryset .
9736	Update the password .
9737	Update the password .
9738	Validate email address .
9739	Handles POST requests .
9740	Handles delete requests .
9741	If an email address is not logged in .
9742	Handles POST requests .
9743	Update the expiry date .
9744	Add password reset email context .
9745	Send email notification .
9746	Send password reset email .
9747	Send email notification email .
9748	Authenticate the request .
9749	Update the token with the given key .
9750	Display a Bokeh notebook .
9751	Create bokeh plots .
9752	Create CustomJS callback .
9753	Get a widget by name .
9754	Render a function .
9755	Create a text widget .
9756	Return a list of named objects .
9757	Return the owner of a method .
9758	Assign the values to the authentication credentials .
9759	Ping the server .
9760	Retrieves information about the device .
9761	Returns the health of the cluster .
9762	Convert bytes to human readable form .
9763	The total load of the system .
9764	Return the size of the memory .
9765	Get the network uptime .
9766	List of all volumes .
9767	Get a volume by its id .
9768	Return the size of a volume
9769	Returns the percentage of the given volume .
9770	Returns the total disk temperature in bytes .
9771	Returns the maximum disk temperature for a volume .
9772	Get a disk by id .
9773	Login to the server
9774	Retrieve a URL .
9775	Execute a GET request
9776	Update the contents of the entry .
9777	Retrieve the Utilization API .
9778	Return the SynoStorage object .
9779	Create a context for a given request .
9780	Get the tenant token .
9781	Helper function for building an attribute dictionary .
9782	Add a set of apps to INSTALLED_APPS .
9783	Modify INSTALLED_APPS setting .
9784	Return the global settings as a dictionary .
9785	Handles GET requests .
9786	Get a value from the config
9787	Change a configuration value
9788	Migrate OAuth2 config file
9789	Start the webserver .
9790	Waits until the server is ready .
9791	Retrieves access information from the PRAW API .
9792	Check if a token is present .
9793	Refresh access credentials .
9794	Refresh the access token .
9795	Create a manifest table .
9796	Split a full path into bucket and normalize it .
9797	Determines if a bucket exists .
9798	Extract run id from a key .
9799	Remove empty values from a dict .
9800	Add a run to DynamoDB .
9801	Check if a run is in the manifest .
9802	Extract the schema from a URI .
9803	Convert the schema to snake_camelist format .
9804	Parse a list of contexts
9805	Parse unstructured event from unstructured event
9806	Transform a JSON string into a JSON object .
9807	Convert an event to JSON .
9808	Get the name and template from the response .
9809	Pretty print the context .
9810	Prints the context variables .
9811	Pformat SQL to HTML .
9812	Pretty print a django context .
9813	Pretty print a dict summary .
9814	Convert text to HTML
9815	Format an object .
9816	Format the object .
9817	Get a token from a string .
9818	Return a list of nodes from a string .
9819	Convert latex to text .
9820	Set the input directory .
9821	Read a tex file .
9822	Convert latex to text .
9823	u Converts a string to LaTeX
9824	Convert a string to unicode .
9825	Retrieves information about the organization .
9826	Returns a list of boards .
9827	Retrieve the members of the organization .
9828	Updates the organisation .
9829	Remove a member from the cluster .
9830	Add a member by ID .
9831	Add a member to the organization .
9832	Retrieves the list information .
9833	Adds a new card to the account .
9834	Retrieves information about the label .
9835	Retrieves the check items .
9836	Update label name .
9837	Update the label dictionary .
9838	Get the authorisation URL .
9839	Retrieves the card information .
9840	Retrieves a board .
9841	Retrieves a list from the server .
9842	Returns a list of checklists .
9843	Add a comment .
9844	Add an attachment .
9845	Adds a new checklist .
9846	Add a label from a dictionary .
9847	Add a label from a class .
9848	Adds a member to the organization .
9849	Retrieves the information for the group .
9850	Returns a list of Card objects .
9851	Returns a list of organisations .
9852	Creates a new board .
9853	Decorator for singledispatch method .
9854	Retrieves information about the board .
9855	Get a list of lists .
9856	Returns a list of labels from the server .
9857	Retrieve a single card .
9858	Returns a list of checklists .
9859	Get an organisation .
9860	Updates a board .
9861	Add a list .
9862	Adds a label .
9863	Gets the checklist information .
9864	Returns the card object .
9865	Returns a list of items for this card .
9866	Updates a checklist .
9867	Adds an item to the account .
9868	Remove a check item .
9869	Updates the name of the card .
9870	Updates the state of the card .
9871	Add the authorization parameters to the query parameters .
9872	Check for errors .
9873	Build the URL for the given path and query parameters .
9874	Fetches a JSON object from the API .
9875	Create an organisation .
9876	Create a board .
9877	Create a label .
9878	Create a new list .
9879	Create a new card from a json dictionary .
9880	Create a new checklist .
9881	Create a new member .
9882	Get an organisation .
9883	Get a board .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Get a member .
9888	Extract the domain from a URL .
9889	Convert text to markdown .
9890	Convert text to raw text .
9891	Convert text into sentence pairs .
9892	Set password for service .
9893	Split text according to the given locations .
9894	Mark a regular expression as part of text .
9895	Mark the beginning and end locations in the given text .
9896	Main entry point .
9897	Create a Cipher object .
9898	Get the AES mode .
9899	Return the current priority .
9900	Check the encryption scheme .
9901	Publish a message .
9902	Make a unique ID .
9903	Connect to the MQTT server .
9904	Handle CONNACK packet .
9905	Encode a string into bytes .
9906	Decodes a string into a tuple .
9907	Encode a 16 - bit integer .
9908	Encode a length .
9909	Decode length from encoded string .
9910	Encode the header .
9911	Encode the message .
9912	Decode a packet .
9913	Encodes the session into a string .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode the message .
9917	Encode the message header .
9918	Decode packet .
9919	Encode the message header .
9920	Encode the message .
9921	Decode a packet .
9922	Decode a packet .
9923	Returns the URL for the API call .
9924	Make a request to the API .
9925	Refresh the block .
9926	Format the data .
9927	Fit the data .
9928	Construct k - means clustering .
9929	Estimate mean shift from data .
9930	Estimate the classifier clustering .
9931	Predict classifier .
9932	Map clusters to clusters .
9933	Sort the clusters according to the given sort_by .
9934	Convert datetime to datetime
9935	Returns the total number of points in a dictionary .
9936	Returns the total time span of a dictionary .
9937	Calculate unitpicker .
9938	Pretty - print an element .
9939	Splits a string into a name
9940	Convert a string to a massname
9941	Collate the input data into a directory .
9942	Enumerate a boolean array .
9943	Convert a list of tuples to a boolean .
9944	Fast smoothing function .
9945	Fast gradients
9946	Return true if x is within y
9947	Estimate the mean shift of data .
9948	Cluster k - means clustering .
9949	Cluster a dataset using DBS .
9950	Returns a numpy array of all the defined SRMs .
9951	Read the configuration file
9952	Read a latool configuration file
9953	Print LATools configuration .
9954	Copy the SSM table to the local file .
9955	Create a configuration file .
9956	Change the default configuration .
9957	Exclude downhole filter .
9958	Defragment a filtered array .
9959	Calculate the perturbation .
9960	Plot a scatter plot .
9961	Create the ndarray for each signal
9962	Calculate the ratio of the package .
9963	Calibrate the spectrogram
9964	Generate sample statistics .
9965	A dictionary of ablation times .
9966	Filter the filter by a threshold .
9967	Filter the gradients below a given threshold .
9968	Calculate the correlation coefficient .
9969	Filter correlation filter .
9970	Add a new filter .
9971	Get the parameters of the filter .
9972	Plot histograms .
9973	Compute summary statistics .
9974	Load the reference data from google .
9975	Lookup the type of the given type .
9976	Return a list of atomic elements .
9977	Calculates the molecular mass of a molecule .
9978	Generate keywords .
9979	Return the tail of the stack .
9980	Remove duplicates from a stack .
9981	Calculate the Gauss - weighted Gauss - weighted statistics .
9982	Gaussian function
9983	Standard deviation .
9984	Get the samples for a given subset .
9985	Perform dispatches on the data .
9986	Calculate the weighted mean .
9987	calc_calp_calc_calc_interp_interp
9988	Subtract the background .
9989	Calculate the ratio of the data .
9990	Make a subset .
9991	Filter gradients based on thresholds .
9992	Create a classifier .
9993	Apply classifier .
9994	Filter the correlation data .
9995	Apply a filter on the data .
9996	Remove a filter from the data .
9997	Return a string describing the filter status .
9998	Defragment filter .
9999	Filter out the number of samples in the subsets
10000	Plot gradient histogram .
10001	Plot the gradient of the gradient
10002	Create a matplotlib histogram plot .
10003	Plot the plots .
10004	Plot gradient plots .
10005	Apply a filter to the report .
10006	Calculate sample statistics .
10007	Get the statistics from the sampler .
10008	Export traces from LATOOLS .
10009	Export the traces to a file .
10010	Save the log to a file .
10011	Exports the minimal export dataset to the given path .
10012	Split a file into separate sections .
10013	Apply a function f to each element .
10014	Plot a bar chart .
10015	Calculates the bayes scale of a statistic
10016	Scales a set of median values
10017	Respike dispatching noise .
10018	Decompose an expdecay signal .
10019	Add a new component .
10020	Remove an item from the model .
10021	Clears the configuration .
10022	Removes all components from the cache .
10023	Determine the frequency of each filter .
10024	Make a component from a key .
10025	Grab a single |Filter| or |Filter| .
10026	Return a string describing the components .
10027	Decorator to log a function
10028	Write log to file .
10029	Read a log file
10030	Decorator to log in .
10031	Get modem information .
10032	Send a message to the modem .
10033	Parse a file - like object .
10034	Return a link to a Jupyter website .
10035	Divide the thumbnail .
10036	The code div .
10037	The code example .
10038	The URL of the notebook .
10039	Get the output file name .
10040	Process a notebook .
10041	Convert notebook to python
10042	Generate data download .
10043	Create a thumbnail .
10044	Extracts the description from the header .
10045	Scale image .
10046	Saves the image to the thumbnail .
10047	Copy the thumbnail figure to disk .
10048	Get the URL for a file .
10049	Get the language codes for a given field .
10050	Returns the default value for the field .
10051	Process a thumbnail .
10052	Pre - process the image .
10053	Refresh the thumbnail cache .
10054	Return a list of all thumbnails .
10055	Create a thumbnail .
10056	Delete the image .
10057	Create a thumbnail .
10058	Retrieves a Thumbnail object .
10059	Delete a thumbnail .
10060	Receive a message .
10061	Subscribe a callback function .
10062	Returns a set of all states that are accepted
10063	Add a provider .
10064	Send a message .
10065	Creates a callback for the given provider .
10066	Returns a mapping of all registered providers .
10067	Receive a message from the gateway .
10068	Receive a status .
10069	Decorator to mark a function as JSON .
10070	Forward an object .
10071	Sign a transaction .
10072	Estimate gas gas using web3 .
10073	Estimate the gas gas at the given gas .
10074	Write to the stream .
10075	Read a line from the serial port .
10076	Send a message .
10077	Return the message as a string .
10078	Return True if the message has bad headers .
10079	Add an attachment .
10080	Register a service .
10081	Create a Config object from a module .
10082	Register a service .
10083	Retrieves a value from the cache .
10084	Entry point for exit .
10085	Sets up the data manager .
10086	Calculate Angstroms
10087	Calculate the Cauchy equation .
10088	Initialize the backend .
10089	Login to the backend .
10090	Returns a list of all the domains in the account .
10091	Get all the items from the API .
10092	Patch an object .
10093	Generic DELETE method .
10094	Determines if two files are the same .
10095	Create a junction .
10096	Initialize the logger .
10097	Raise a usage error .
10098	Claims a list of VCF readers and returns them .
10099	Build a new column header based on the header .
10100	Claim variants from a set of varsers .
10101	Initialize population stats .
10102	Claim the unclaimed vcf readers and vcf readers .
10103	Split data into lines .
10104	Return the line terminator .
10105	Return the line terminator .
10106	Seek to next line .
10107	Seek to the previous line .
10108	Return the tail of the file .
10109	Return the head of the file .
10110	Return a generator that yields lines from the file .
10111	Claim SNPs and vcf readers .
10112	Parse a VCF record .
10113	Return the sample tag values for each sample .
10114	Return the set of tags for each sample .
10115	Join the info fields .
10116	Format field .
10117	Return the field for a sample .
10118	Returns tab - delimited newline terminated string of VCFRecord .
10119	Add a new sample tag value .
10120	Add or replace a filter .
10121	Return all available categories .
10122	Create a product form .
10123	Factory to create staff products form .
10124	Add an error for a product .
10125	Memoise a function .
10126	Factory for model fields .
10127	Returns a queryset of items pending or pending .
10128	Send an email .
10129	Iterate over the OSM stream .
10130	Parse an OSM file .
10131	Iterate over OpenStreetMap notes .
10132	Return True if the user has a valid condition .
10133	Checks if the given user is met .
10134	Returns the number of items remaining in the given user .
10135	Filter queryset .
10136	Filter queryset .
10137	Filter the queryset .
10138	Filter the queryset .
10139	Filter for groups .
10140	Decorator to cache items for a batch .
10141	Returns the cart for the given user .
10142	Extend the reservation duration
10143	Applies a voucher to the cart .
10144	Validate the cart .
10145	Takes a list of items and tries to fix them .
10146	Recalculate discounts .
10147	Add a discount to the product .
10148	Create a report view .
10149	Return an iterator over the rows of the data .
10150	Returns the form for the request .
10151	Render data .
10152	List all reports .
10153	List items sold in the invoice .
10154	Returns a summary of all sales orders .
10155	Queryset for all payments .
10156	Displays all credit note refunds .
10157	Display the product status .
10158	Displays the discount status .
10159	Return a list of all products in the invoice .
10160	Return all paid invoices for the given date .
10161	Displays the credit notes .
10162	Displays all invoices .
10163	Displays a list of attendees .
10164	Displays all speaker registrations .
10165	Displays all items in the cart .
10166	Return the set of items that are missing .
10167	Return the number of credits available for the current context .
10168	Is sold out and unregistered .
10169	Displays the registration page .
10170	Edit the profile .
10171	Handle profile form .
10172	View a product category .
10173	Handles products .
10174	Handles a voucher form .
10175	Redirect to the invoice .
10176	Redirect to invoice access .
10177	Show an invoice .
10178	Display manual payment form .
10179	Refund an invoice
10180	Apply a credit note to an invoice .
10181	Amend staff products .
10182	Extend a reservation .
10183	Send email to invoice .
10184	Displays badges .
10185	Render a badge .
10186	Return a list of discounts for the given user .
10187	Annotate the items in the queryset .
10188	Return a list of all available products .
10189	Applies the credit note to the invoice
10190	Calculates the cancellation fee for a given percentage .
10191	Generate an access code .
10192	A lazy evaluation decorator .
10193	Get an object from a dotted name .
10194	Create an invoice for a given cart .
10195	Generates a manual invoice for a given user .
10196	Generates a model from a cart .
10197	Apply credit notes to the invoice .
10198	Return whether or not the user can view the invoice .
10199	Refreshes the invoice .
10200	Validates the invoice to pay for payment .
10201	Update the invoice s status .
10202	Marks the invoice as paid .
10203	Returns True if the invoice matches the given revision .
10204	Update the validity of the invoice .
10205	Mark the invoice as void .
10206	Refund the invoice
10207	Send an email to an invoice .
10208	Update the current state .
10209	Flatten a field into a flat dictionary .
10210	Print download files .
10211	Download a processor .
10212	Get project data .
10213	Get a specific processor by name .
10214	Print all the inputs of a processor .
10215	Rundata a string
10216	Upload files to project .
10217	Upload a file .
10218	Download data from data_objects .
10219	Get all subclasses of a class .
10220	Get repo and project information .
10221	Get variants with suggested changes .
10222	Get variant phenotype and final changes for each variant .
10223	Search for variants by coordinate query .
10224	Bulk search for variants by coordinates .
10225	Update this element .
10226	Remove duplicates from a sequence .
10227	Authenticate asana .
10228	Prompt the user for a list .
10229	Get the data for an issue .
10230	Moves the issue data to the datapoint .
10231	Get task data .
10232	Retrieves a task by id .
10233	Save the file to disk .
10234	Return the value of a key .
10235	A decorator that wraps a function in asana .
10236	Wait for all items to finish .
10237	Creates a task .
10238	Format task numbers with links .
10239	Creates a task in the given task .
10240	Return all data types in this project .
10241	Log a log message .
10242	Initialize the serial port
10243	Set the values of the polling values .
10244	Combine all fields into a single BAM file .
10245	Returns a JSON string representing the readings since the given timestamp .
10246	set the context
10247	Calculates the pf .
10248	Set the maximum demand period
10249	Sets the password .
10250	unpack struct data
10251	Convert the contents of the buffer into a log string .
10252	Render the def_buf .
10253	Calculate the CRC of a read .
10254	Splits a date into a namedtuple
10255	Return the number of days for the given direction .
10256	set CTR ratio
10257	Assign a schedule
10258	Assign a season schedule .
10259	set season schedule
10260	Assign a holiday date .
10261	Read schedules from the device .
10262	Extract a schedule from a schedule
10263	Read the number of days for a given month .
10264	Extract a namedtuple from a month .
10265	Reads holidays from the device .
10266	Extracts the holiday date from the given setting .
10267	Reads the settings .
10268	write command message
10269	Send a password to the device .
10270	Update all observers .
10271	Initialize LCD lookup .
10272	Perform a request .
10273	Request A .
10274	Perform a REQUEST .
10275	Make sure all fields are correct
10276	Calculates the factors of the meter .
10277	set lcd command
10278	Set relay duration
10279	Send the termination string to the serial port .
10280	Sets the pulse ratio .
10281	set zero resettable kw
10282	Sets the CRC of the device .
10283	Iterate over fields in a given schema .
10284	Iterate over a schema .
10285	Return a list of paragraphs .
10286	Generate a random text .
10287	Return the timing information .
10288	Color a text .
10289	Print text to stdout .
10290	Return a summary of the test results .
10291	Parse command line arguments .
10292	Setup the result manager .
10293	Run the test .
10294	Run transform .
10295	Transform description into an AST .
10296	Yield examples from description .
10297	Transform example into ast . FunctionDef .
10298	Yield all names in the example body .
10299	Return an ast .
10300	Register a path hook .
10301	Transform source code into code .
10302	Apply an argument parser .
10303	Load a module by name
10304	Load source files from a directory .
10305	Recursively scan a directory .
10306	Return a function that checks the contents of a file .
10307	Iterate over messages from a given location .
10308	Add a new place .
10309	Remove a place .
10310	Restart a message .
10311	Calls a Place instance .
10312	Get a process monitor .
10313	Create a procmon service
10314	Refresh the session .
10315	Remove all expired nodes .
10316	Remove a node from the cluster .
10317	Get the last updated datetime .
10318	Get all the nodes .
10319	Refresh the session .
10320	Increment the number of times modified
10321	Dereference a node
10322	Returns a list of tokens interleaved with the delimiter .
10323	Return a list of paths that are bad
10324	Merge the status .
10325	Query to test if a value exists .
10326	Query to get the value .
10327	Creates a constant .
10328	Split a function into an iterable .
10329	Convert an iterable to a function .
10330	Run a process .
10331	Create a Tainternet .
10332	Complete a parser by parsing a parser .
10333	Parse a literal .
10334	Return an opt parser .
10335	Create a new parser .
10336	Return a new parser .
10337	Return a new parser with the separator .
10338	Return a new parser with separator .
10339	Check state .
10340	Close the task .
10341	Checks if the URL is valid .
10342	Add a heart service to the heart .
10343	Wrap a Taservice and add it to it .
10344	Freeze a checkpoint from a checkpoint .
10345	Freeze the model .
10346	Save a graph only if output_only is True .
10347	Save graph only from checkpoint .
10348	Save weights from checkpoint .
10349	Restore from checkpoint .
10350	Parse a token from a parser .
10351	Render a tag .
10352	Validate arguments .
10353	Return context data .
10354	Parse template tag .
10355	Return context data .
10356	Create a tensorflow session .
10357	Freeze caffe to Tensorflow .
10358	Save caffe_graph_only to tf .
10359	Splits a sequence into multiple rows .
10360	Splits an iterable into chunks .
10361	Iterate over an iterable yielding each item .
10362	Remove duplicates from an iterable .
10363	Return the next item from an iterable .
10364	Takes an iterable and yields the next item .
10365	Partition the number of items into bins .
10366	Return an iterable .
10367	Temporarily suppress exceptions .
10368	Return the items that have duplicates .
10369	Asserts that an iterable is ordered .
10370	Swap the item before a miss .
10371	Partition a dictionary by key .
10372	Get the first n queues .
10373	Resets the iterator .
10374	Parse as_var .
10375	Decorator to add a template tag .
10376	Return a public keychain from the given chain path .
10377	Fetch all records from the database .
10378	Iterate over an object .
10379	Match the given selector .
10380	Parse a selector .
10381	Match type production .
10382	Return all parents of lhs .
10383	Return a list of all the ancestors of the tree .
10384	Return all siblings of lhs and rhs
10385	Parse nth child .
10386	Match all the given validators .
10387	Ping an ICMP port .
10388	Perform a GET request .
10389	Expire the cache .
10390	Set the value of a key .
10391	Get a value from the store .
10392	Return True if the key is contained in the store .
10393	Return True if the chain is valid .
10394	Create a NistBeaconValue from a JSON string .
10395	Create a beacon value from an XML string .
10396	Return rendered content .
10397	Execute a function on the log file .
10398	Get a list of rows from the table .
10399	Validate a token .
10400	Return a cryptography backend .
10401	Convenience function for compat_validate_token .
10402	Create a secret token .
10403	Compute the counter - clockwise .
10404	Compute the counter - clockwise .
10405	Calculate the average duration .
10406	Sets up the outputs .
10407	Setup the sources
10408	Send an event .
10409	Restart the source .
10410	Parse a format string .
10411	Parse a log line .
10412	Validates that the field is valid .
10413	Validates that the request has a valid message .
10414	Verify access token
10415	The browser name .
10416	Warn if a warning is found .
10417	Connect all the received receivers .
10418	Create a new secret link .
10419	Send a notification email .
10420	Send a confirmation email .
10421	Send email verification notification .
10422	Send an invitation notification .
10423	Send a notification .
10424	Create a new link .
10425	Validate a secret token .
10426	Revoke the link .
10427	Create a new request .
10428	Get request by user and receiver .
10429	Confirm email .
10430	Accept a message .
10431	Reject a request .
10432	Create a secret link .
10433	Create a SHA512 hash .
10434	Verify a signature .
10435	Return True if the record is an embargoed record .
10436	Create an access request .
10437	Send a confirmation email .
10438	Create an SSH command client .
10439	Reverse a column
10440	Return the selected item .
10441	Return a QuerySet with the selected items .
10442	Return the version of the file .
10443	Set the version of the file .
10444	Initialize the SSH connection .
10445	Start the timer .
10446	Wait for an event to be processed .
10447	Show a link .
10448	Create a new Riemann client .
10449	Stop the connector .
10450	Empty the queue .
10451	Called when an event is received .
10452	Create an RPC client .
10453	Create Elasticsearch client
10454	Convert an Event into protobuf .
10455	Encode a list of events .
10456	Decodes a protobuf message .
10457	Send events .
10458	Generate a file preview .
10459	Retrieve a preview .
10460	Send a dict to r_q .
10461	Message loop .
10462	Checks if the current time is exceeded .
10463	Respond to the challenge .
10464	Abort the SASL message .
10465	Convert a sequence of chars to UASL .
10466	Template tag .
10467	Build payment parameters .
10468	Build registration parameters .
10469	Takes an alias and signs it with an alias
10470	Get the version string .
10471	Constructs the layout .
10472	Called when the filesystem is built .
10473	Configure shortcuts .
10474	Called when the item is activated .
10475	Called when the item is selected .
10476	Called when a location is clicked .
10477	Finalize resources .
10478	Run the resource .
10479	Run clean command .
10480	Fetch a list of children .
10481	Refetch all children .
10482	Returns the icon for the given index .
10483	Call a command .
10484	Get the maximum file descriptor .
10485	Close the file descriptor .
10486	Close open file descriptors .
10487	Redirect a file to a file .
10488	Set widget attributes .
10489	Import a module .
10490	Import project modules .
10491	Return an include node .
10492	Get URL for gravatar .
10493	Get a gravatar image .
10494	Validate a port value
10495	Validate s3 URL
10496	Return the absolute path of a template .
10497	List the contents of the bucket .
10498	Build the json representation of the workflow .
10499	Execute the gbdx API .
10500	Move an active project to the archive .
10501	The equivalent of mkdir - in - shell - p in shell .
10502	List the contents of the archive directory .
10503	Restore a project from the archive .
10504	Create an instance of ApiClient .
10505	List file contents .
10506	Download a file .
10507	Check if a path exists .
10508	Get the parent entity .
10509	Create a directory .
10510	Upload a file to the storage .
10511	Delete a folder .
10512	Validate the path .
10513	Create a new storage client .
10514	Create a new Storage instance .
10515	Get details about an entity .
10516	Set the metadata for an entity .
10517	Get the metadata for an entity .
10518	Update the metadata of an entity .
10519	Delete metadata for an entity .
10520	List projects .
10521	Get details about a project .
10522	Create a project .
10523	Delete a project .
10524	Create a folder .
10525	Get details about a folder .
10526	Delete a folder .
10527	Upload a file .
10528	Copy file content to another file .
10529	Download the content of a file .
10530	Get the signed URL for a file .
10531	Emit a record .
10532	Add a service to the service .
10533	Set the headers .
10534	Create a new ParameterSet with the given parameters .
10535	Raise an exception .
10536	Return list_display_display_display
10537	Add a function to a job .
10538	Generate genotypes for GVCF files .
10539	Run oncotator .
10540	Sort the collection by a function .
10541	Return a list of timestamps .
10542	Load export from folder
10543	Shift the value by t
10544	Calculate the sum of all values
10545	Collect the device .
10546	Create a new user .
10547	Parses VN results into a list
10548	Parse the release results .
10549	Parses the results from the production staff page .
10550	Parses the character results into a list of characters .
10551	Parses the TC3 tag results .
10552	Parses user results into a list of dicts .
10553	Add files to a tarball .
10554	Apply op to each file in the output_dir .
10555	Copy a file job to the output directory .
10556	Create parameters for Spark .
10557	Return the docker - master parameters for this task .
10558	Refresh the metadata .
10559	Run MuTect .
10560	Create a file .
10561	Return a list of all streams in the database .
10562	Export the device to a directory .
10563	Search for VNDB
10564	Parse search results .
10565	Add a stream to the query .
10566	Reset the device .
10567	Return a list of users .
10568	Run bwa index files
10569	Connect to the server
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a value into the cache .
10573	Synchronize the database .
10574	Start the logger .
10575	Stop reading .
10576	Download a URL from a URL .
10577	Upload a file to S3
10578	List the labels of the ontology .
10579	Print the ontology tree
10580	Get the mean size of a BAM file .
10581	Return the current container ID .
10582	Run STAR using STAR
10583	Create a new file .
10584	Export the stream to a directory .
10585	Return device object .
10586	Get all labels for an ontology .
10587	Returns an iterator over the ontology
10588	Create a new Toil application .
10589	Populates the parser with the given config_data .
10590	Get empty config file
10591	Get the mount path .
10592	Add an option .
10593	Create an argument parser .
10594	Create a pipeline command .
10595	Sets the authentication .
10596	Raise an exception if the server failed .
10597	Ping the server .
10598	Create a path .
10599	Update a path
10600	Delete a path
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return a list of all devices .
10604	Run cutadapt .
10605	Run samtools faidx using samtools
10606	Run samtools index .
10607	Run sambamba mkdup .
10608	Run samblaster
10609	Mark duplicates .
10610	Run Picard sort algorithm .
10611	Run base recalibration .
10612	Run kallisto .
10613	Run rsem on a bam
10614	Get the user affinity table .
10615	Send a command .
10616	Subscribe to a stream .
10617	Connect to the server .
10618	Reconnect to the broker .
10619	Resubscribe to all subscriptions .
10620	Called when the connection is established .
10621	Called when the connection is closed .
10622	Called when an error occurs .
10623	Called when a message is received .
10624	Ensure websocket connection is valid .
10625	Run GATK selectVariants to select variants .
10626	Run GATK variant filtering using GATK variant filters .
10627	Run GATK variant recalibration .
10628	Apply variant recalibration .
10629	Run GATK combineVariants .
10630	Check if bam_path is valid
10631	Load handlers from a dictionary .
10632	Write configuration to disk .
10633	Get the current configuration .
10634	Get a term from ontology
10635	Search ontology .
10636	Retrieve an ontology .
10637	Iterate over the terms of the ontology .
10638	Iterate over the labels of the ontology .
10639	Iterate over the labels of the ontology .
10640	Iterate over the terms of the ontology .
10641	Run fastqc calculation
10642	Add a stream to the query .
10643	Create a Flask application .
10644	Starts a Spark master .
10645	Start a Spark worker .
10646	Starts the worker .
10647	Stop Spark worker .
10648	Returns the status of the job .
10649	Tokenizer . Generates tokens stream from text
10650	Lookup a zone by name
10651	Fetch R53 config from a zone .
10652	Merge the config into a single ElementRecordSet .
10653	Validate changeset .
10654	Reduce the number of members to the best score .
10655	Return the fitness of each member .
10656	Return the cost_fn of each process .
10657	The median cost function .
10658	A dictionary containing the parameters of the model .
10659	Returns a list of the members of the process .
10660	Add a parameter .
10661	Generate a new population .
10662	Normalize key and value pairs .
10663	Get the environment variables .
10664	Check if a callable has an exception .
10665	Transform a list of packages into a package list .
10666	Transform the result into a string .
10667	Convert html to xhtml
10668	Convert xhtml to HTML
10669	Convert a document to a string .
10670	Open a document in a browser .
10671	Drop the current tree .
10672	Drop the current tag .
10673	Get an element by id .
10674	Returns a CssSelector for the given expression
10675	Iterate over all loggers .
10676	Return a dictionary with the number of tests .
10677	Returns True if the module is a single class
10678	Check if the module is a single class
10679	Validate parameters .
10680	Validate request id
10681	Decode path .
10682	Escape an argument specification .
10683	Return the codec name for the given encoding .
10684	Detect BOM encoding .
10685	Get the remote address of a forwarded_for .
10686	Convert object to decimal
10687	Create a BeautifulSoup from a string .
10688	Parse a BeautifulSoup file .
10689	Convert BeautifulSoup tree to BeautifulSoup tree .
10690	Get the current traceback .
10691	Return a string describing the exception .
10692	Render the summary .
10693	Generate a plaintext traceback .
10694	Return a list of all lines in the source code .
10695	Render the source table .
10696	Parse egg_info from egg_info .
10697	Return a list of locations for a project .
10698	Find all versions of a project .
10699	Find a matching requirement .
10700	Sort links by egg fragment .
10701	Get the content - type of a URL .
10702	Iterate over all links .
10703	Returns True if the request is verifiable False otherwise .
10704	Find data files for a package .
10705	Exclude data files for a given package .
10706	Parse a requirements file .
10707	Join an iterator of lines .
10708	Ignore comments .
10709	Compile a marker .
10710	Return an AST node .
10711	Visitor for Attribute node .
10712	Convert value to a number .
10713	Creates a copy of the current request context .
10714	Push the app context onto the stack .
10715	Pop an app context .
10716	Return a shallow copy of the app .
10717	Match the request .
10718	Add a new request to the stack .
10719	Make a path relative to a relative path .
10720	Return whether a distribution is editable .
10721	Add a URL - value preprocessor .
10722	Register a function as URL defaults .
10723	Register an error handler .
10724	Wrap a generator with a context manager .
10725	Return a response object .
10726	Generate a URL for an endpoint .
10727	Safely join a filename .
10728	Return the root path of a module .
10729	Load jinja loader .
10730	Run the completion script .
10731	Return the domain of the app .
10732	Return the cache path for a link .
10733	Determine whether a root is PureLib
10734	Generate a list of paths for uninstallations .
10735	Check that a wheel is compatible .
10736	Build one wheel .
10737	Iterate over all symbol names .
10738	Decorator to ensure that the rate is fresh .
10739	Add egg info .
10740	Write delete marker file .
10741	Determine if a virtualenv is inside a virtualenv .
10742	Get the username of the system
10743	Generate a distutils scheme .
10744	Parse the Content - Control header .
10745	Checks if the request is cached .
10746	Cache a response .
10747	Update the zipimporter cache .
10748	Load template from dev_path .
10749	Install site .
10750	Save the file to disk .
10751	Convert value to Converter
10752	Add a list of filters .
10753	Configure a logging handler .
10754	Add handlers to a logger .
10755	Configure the common logger configuration
10756	Execute a script .
10757	Temporarily override the temporary directory .
10758	Return the URL and revision of the file .
10759	Get an item from an object .
10760	Generate a file from a source .
10761	Compile Jinja2 templates .
10762	Return the default cache location .
10763	Find eggs in a zip archive .
10764	Find distributions on a path .
10765	Declare a namespace .
10766	Return the mRO of the class .
10767	Find an adapter for an object .
10768	Ensure directory exists .
10769	Iterate over entry points for a group .
10770	Determines whether the distribution can add this distribution .
10771	Return the best matching requirement .
10772	Evaluate a marker .
10773	Evaluate a Marker library .
10774	Format a log record .
10775	Format a number .
10776	Parse a number pattern .
10777	Convert a number to a decimal .
10778	Get the precision of a number .
10779	Return scientific notation elements .
10780	Return the total number of seconds in seconds .
10781	Parse a list of requirements .
10782	Return the unpatched version of distutils .
10783	Check that the requirements are valid .
10784	Fetch a build egg .
10785	Do a dice roll
10786	Convert an object to a price class .
10787	Create a price object .
10788	Validate the request .
10789	Get a method from the app .
10790	Execute an HTTP request .
10791	Deprecated .
10792	The blueprint endpoint .
10793	Attach the error class to the request .
10794	Make an abstract distribution object .
10795	Add a requirement .
10796	Walk all the requirements to install them .
10797	Check if req_to_install is required .
10798	Return the order of dependencies to install .
10799	Return a list of all namespace packages .
10800	Serialize obj to JSON .
10801	Tokenize an annotated document .
10802	Merge all the annotations in the given string .
10803	Copy annotations from src to dest .
10804	Compress a list of tokens .
10805	Serialize a list of tokens into HTML .
10806	Yield HTML tags from a list of tokens .
10807	Locate the end of unbalanced_end .
10808	Parses the chunks into a list of tokens .
10809	Recursively flattens an element .
10810	Split text into words .
10811	Return start tag string .
10812	Return an end tag string .
10813	Serialize an HTML fragment .
10814	Replace ins and delete tags inside block .
10815	Extracts a constant from code .
10816	Generate a cache URL .
10817	Recursively autolink elements .
10818	Kill conditional comments .
10819	Create a Document from a string .
10820	Decorator for API calls .
10821	Returns a TreeWalker object for the given type .
10822	Export the svn repository to a location .
10823	Get the revision for a given location .
10824	Decorator for setup methods .
10825	The name of the module .
10826	Return a boolean indicating whether the application should propagate or not .
10827	Try to find the path of the instance .
10828	Update the template context .
10829	Handle an HTTP exception .
10830	Tests if an HTTP exception is caught .
10831	Handle an exception .
10832	Raise the routing exception .
10833	Dispatches the request .
10834	Make default HTTP OPTIONS response .
10835	Create the URL adapter .
10836	Inject url defaults into values .
10837	Generate unique values from iterable .
10838	Process a set of requirements .
10839	Convert a requirement into a string .
10840	Convert an egg info file into metadata .
10841	Iterate over all available modules .
10842	Iterate over all classes .
10843	Return a list of method names .
10844	Return the basename of a basename .
10845	Return True if path is a module .
10846	Iterate over all subdirectories .
10847	Return a generator yielding all the paths of the module .
10848	Dump kwargs to kwargs .
10849	Load the default JSON decoder .
10850	Set multiple keys .
10851	Increment the value of a key .
10852	Dump object to string .
10853	Build an editable option dictionary from a request string .
10854	Populates the link with the given finder .
10855	Ensure parent directory exists .
10856	Remove the source from the source directory .
10857	Return a pkg_resources . Distribution object
10858	Get data from the stream .
10859	Get the headers for this request .
10860	r Convert a URI to a URI .
10861	r Return the user s cache directory .
10862	Return the user data directory .
10863	Return user log directory .
10864	Return the user data directory .
10865	Return a list of site configuration directories .
10866	Iterate over all of the modules .
10867	Restart the worker .
10868	Convert string to text
10869	Find the CA bundle .
10870	Parse an HTML document and return an HTML object .
10871	Parse an HTML document from a stream .
10872	Parse a HTML fragment from a stream .
10873	Translate a word .
10874	Convert command line arguments to tokens
10875	Bind to the server .
10876	Print the report to stdout .
10877	Load bytecode from file .
10878	Add stylesheet parameters to params dictionary
10879	Run a command .
10880	Get the implementation version of sys . py
10881	Return a list of distributions for a given location .
10882	Find external links in a page .
10883	Open a local file .
10884	Process a URL .
10885	Return a list of paths removed from sys . path
10886	Return a set of all paths in sys . pathinfo
10887	Add a package .
10888	Add a directory to the sys . path .
10889	Check if sys . enable_user is set .
10890	Add user - packages .
10891	Wrap stdin .
10892	Add an alias to the encodings .
10893	Set encoding .
10894	Insert global eggs after a local site .
10895	Fix sys . path
10896	Wrapper for subprocess . Popen
10897	Determine if Pyrex is available
10898	Convert the source code to a language .
10899	Debug the application .
10900	Return the content of a file .
10901	Return the user agent .
10902	Return True if name is a URL .
10903	Unpack a file from a link .
10904	Download the given link .
10905	Check if a link exists .
10906	Registers a currency .
10907	Register a currency exchange .
10908	Decodes the data .
10909	Default template context processor .
10910	Render a template .
10911	Render a Jinja2 template .
10912	Render a Jinja2 template string .
10913	Parse a version string .
10914	Checks if the given name is declared .
10915	Visit a name node .
10916	Handles include statement .
10917	Visit an import statement .
10918	Recursively create a WDL file .
10919	A decorator for atomic operations .
10920	Start a service factory .
10921	URL encode an object .
10922	Return a list of distributions matching requirements .
10923	Populate a set of requirements .
10924	Export to a temporary directory .
10925	Lookup an Amazon Product .
10926	Iterate over pages .
10927	An ancestor node .
10928	Return the children of this item .
10929	Safely get an element by path .
10930	Get the text of an element .
10931	Safely get an element s date .
10932	Returns the price and currency .
10933	List price .
10934	Handles caching requests .
10935	Build a cached response .
10936	Make an attribute getter .
10937	Capitalize a string .
10938	Sort a value .
10939	Group a value by the given attribute .
10940	Apply a function to each item .
10941	Create a logger .
10942	Compares two strings .
10943	Verify the signature .
10944	Derive the secret from the salt .
10945	Get the signature of the given value .
10946	Sign a value
10947	Verify a signature .
10948	Validate a signed value
10949	Sign a value .
10950	Validate a signed value .
10951	Return a serialized representation of an object .
10952	Called when an error occurs .
10953	Return a list of zipped packages .
10954	Yields all parents of a package .
10955	Return all directories in a directory .
10956	Prepare the response .
10957	Unsign the archive .
10958	Unpack a wheel .
10959	Install the given distributions .
10960	Assemble all the nodes in the graph .
10961	Render the canvas .
10962	Get a node by ID .
10963	Called when a new connection has changed .
10964	Called when an edge changes .
10965	Called when a component has changed .
10966	Handles the left click .
10967	Called when diagram canvas is changed .
10968	Clears the diagram .
10969	Called when a domain model has changed .
10970	Map the domain model to a new one .
10971	Remove a model from the model .
10972	Map an element to a diagram .
10973	Set style attributes .
10974	Parses an xot data .
10975	Process font size .
10976	Process an ellipse .
10977	Process a polygon .
10978	Process Polyline tokens .
10979	Process text .
10980	Process image .
10981	Render a GridFS file .
10982	Save object to file .
10983	Load the DOT file .
10984	Determines if a point is in the grid .
10985	Draw the bounds .
10986	Opens a new dot graph .
10987	Connect to the database .
10988	Parses the dot code into the model .
10989	Create new model .
10990	Open a file dialog
10991	Save the model to disk .
10992	Save the model to a file .
10993	Configure the graph .
10994	Configure the nodes .
10995	Configure edges
10996	Display info about the robot .
10997	Add a node .
10998	Add an edge .
10999	Add a subgraph .
11000	Add a cluster .
11001	Retrieve a graph from the database .
11002	Edit options .
11003	Configure dot code
11004	Called when the user exits .
11005	Move components to origin .
11006	Save the object to a file - like object .
11007	Load from a file - like object .
11008	Save the model to a file .
11009	Load an object from a file .
11010	A property factory .
11011	Parse a text file .
11012	The start words
11013	Add a chain .
11014	Remove a chain by name
11015	Build a chain .
11016	Generate a sentence .
11017	Create a dot file .
11018	Add a new node .
11019	Delete a node .
11020	Get a node by ID
11021	Delete an edge from the network .
11022	Add an edge to the network .
11023	Add a subgraph .
11024	Called when a program is changed .
11025	Set node lists .
11026	Parse a DOT file .
11027	Parse a DOT file .
11028	Build a top graph from tokens .
11029	Build a subgraph from a list of tokens .
11030	Get the time units and multiplier for a given number of seconds .
11031	Format a duration .
11032	Called when path is changed
11033	Create the UI for the graph .
11034	Split a sequence .
11035	Split an iterable into windows .
11036	Main application .
11037	Get the children of an object .
11038	Append a child to an object .
11039	Insert a child into an object .
11040	Delete a child from an object .
11041	Called when a child is inserted .
11042	Called when node changes
11043	Get the label of the object .
11044	Set the label of the object .
11045	Called when label changes .
11046	Initialize the graph .
11047	Update the editor .
11048	Add listeners to the graph .
11049	Called when a node is replaced .
11050	Called when an object has changed .
11051	Add nodes to the graph .
11052	Called when an edge is replaced .
11053	Called when an edge has changed .
11054	Add edges to the graph .
11055	Parse Xdot directive .
11056	Called when drawing is changed
11057	Create a new node .
11058	Return an edge factory .
11059	Prepare the database .
11060	Parse the drawing directive .
11061	Parse a label directive .
11062	Called when drawing is changed .
11063	Change the position of the scene .
11064	Called when the component is changed .
11065	Normalize the toolbar .
11066	Shows the current styles .
11067	Draws the main layer
11068	Determine if a point is in a polygon .
11069	Draws the main layer
11070	Handle an event .
11071	Main loop .
11072	Get full page url .
11073	Render previous links .
11074	Render links .
11075	Determines if the candidate content type matches the content type .
11076	Select the requested content type based on the requested content type .
11077	Rewrites a URL .
11078	Remove authentication from a URL .
11079	Create a URL identifier .
11080	Normalize a host .
11081	Find all modules in a directory .
11082	Find all modules in a directory .
11083	Return a list of all available modules .
11084	List all classes in a module .
11085	List all classes in a module .
11086	Ensure directory exists .
11087	Put content into this blob .
11088	Check if a card number is valid .
11089	Get the git version from the current working directory
11090	Load a module .
11091	Add a path .
11092	Find a module by name .
11093	Split a line into multiple lines .
11094	Remove namespaces from an ElementTree .
11095	Return a message indicating whether the current version is consistent .
11096	Create a new instance from a dictionary .
11097	Merge a dictionary into this object .
11098	Execute all actions .
11099	Create an instance from a yaml file .
11100	Add details to the error message .
11101	Send a record .
11102	Add image_rendition to context .
11103	Log an attempt .
11104	Add url to queue .
11105	Start the worker threads .
11106	Set a KVStore value .
11107	Get a value from KVStore .
11108	Recursively retrieve a key from the KVStore .
11109	Get an index by k .
11110	Delete a key .
11111	Plot a heatmap .
11112	Add a number of months to a timestamp .
11113	Add a number of months to a date .
11114	Is the holiday period?
11115	Use a music service .
11116	Use a storage service .
11117	Read data from csv file .
11118	Load the configuration from a json file .
11119	Write data to a JSON file .
11120	Filter X by label .
11121	Calculate the mean of each sample .
11122	Calculate the feature importance .
11123	Restore session data .
11124	Merges a dictionary into a dictionary .
11125	Decorator for multiple functions .
11126	Decorator to register a method .
11127	Find all registered blocks .
11128	Verify that the given block_type is valid .
11129	Register a block .
11130	Unregisters a block field .
11131	Convert file name to MP3 .
11132	Return the desired version .
11133	Handles SSL redirect .
11134	Initialize celery task .
11135	Queues an email to be queued .
11136	Parse Accept header value .
11137	Parse a cache control header value .
11138	Parse a content type .
11139	Parse a Forwarded header value .
11140	Parse a comma - separated list .
11141	Parse a parameter list .
11142	Resizes the image to fit the width .
11143	Add a value .
11144	Download a YouTube file .
11145	Connect to Google Drive
11146	Uploads a music file .
11147	Connect to the music folder .
11148	Write the input parameters to a file .
11149	Update filenames .
11150	Read HIP HHI absorption file .
11151	Scale the amplitude of a_phi parameter .
11152	Read water absorption from a file .
11153	Read pure water scattering from file .
11154	Read the IOP from a file .
11155	Write a tensor to a file .
11156	Builds the b according to the scattering factor
11157	Builds the absorption matrix
11158	Build the total attenuation C
11159	Build all b and c from IOPs
11160	Set batch parameters .
11161	Read a parameter file .
11162	Convert a string to a list of floats
11163	Read a PR report from a file .
11164	Register a signal handler .
11165	Handles a signal .
11166	Default handler .
11167	Pause a signal .
11168	Abort the application .
11169	Called when a status signal is received .
11170	Remove an event from the signal list .
11171	Fetch a single metric .
11172	Return a sorted list of metric values .
11173	Takes an iterable and returns a list of items .
11174	Print an item to stdout .
11175	Print all items in iterable .
11176	Extracts the signature from a function .
11177	Copy the arguments from a partial instance .
11178	Return a copy of the argv .
11179	Ignores certain metainf files .
11180	Determine the priority of a file .
11181	Convert vlq to int
11182	Read a table .
11183	Parse the archive header .
11184	Returns the duration in seconds .
11185	Print details about the game .
11186	Parses the data from the UI .
11187	Opens the result file .
11188	Write batch to file .
11189	Parse the output file .
11190	Display the connection .
11191	Prints the information in the GUI .
11192	Display the error message .
11193	Hides the error message .
11194	Execute planarad .
11195	Cancel planar .
11196	Quit the program .
11197	Save the current figure .
11198	Opens the log file .
11199	Opens the documentation .
11200	Sets up the required actions .
11201	Go to the context menu .
11202	Mouse move event handler
11203	Display the target .
11204	Return the lock set .
11205	Create a signature for this message .
11206	signatures is non deterministic
11207	opt or one quorum noquorum or quorum .
11208	In the IOU fungible the supply is set by Issuer .
11209	highest lock on height
11210	the last block proposal node voted on
11211	highest valid locksset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	make privkeys that support coloring
11215	Calculate the delay between packet and receiver .
11216	deliver on edge of timeout_window
11217	create an object which acts as a proxy for the contract on the chain
11218	returns class_on_msg_unsafe use
11219	registers native contract classes
11220	returns True if unknown
11221	reives rlp . decoded serialized
11222	Convert a VGG image into an image .
11223	Convert image to Vgg format
11224	Get f - layer function .
11225	Get the output of a layer .
11226	Get the features of x .
11227	Create a new key file .
11228	Finish the job .
11229	Load data from a file .
11230	Put one or more items .
11231	Release a bulk load .
11232	List of tables .
11233	Decorator to fix compiler options .
11234	Find the thermostat metadata .
11235	Get a configuration value .
11236	Set a configuration value .
11237	handle table output
11238	Execute a command .
11239	Get the value of a key .
11240	Write a YAML configuration file .
11241	Set the column filter .
11242	Write data to an archive .
11243	Return a string representation of the settings .
11244	Convert string to float .
11245	Parse the gain from a string .
11246	Parse device settings .
11247	Wrap text with given indentation .
11248	Detect and return a list of devices .
11249	Set the center frequency .
11250	Calculate the result of the PSD .
11251	Wait for the result to finish .
11252	Update the PSD state .
11253	Read the packet from a file - like object .
11254	Write this TimeSeries to a file .
11255	Submit a function to the worker .
11256	Compute the number of times to repeat .
11257	Calculate the frequency plan .
11258	Create a new audio buffer .
11259	Sets up the audio data .
11260	Stop streaming .
11261	Sets the PSD .
11262	Searches the waveform .
11263	Sets the address of the device .
11264	Run CMake .
11265	Filters the given datetimes using the specified number of times .
11266	Mask a datetime .
11267	Mask a datetime .
11268	Convert datetimes to keep order
11269	Convert datetimes to delete .
11270	Return a set of dates to keep the date range .
11271	Return the number of dates to delete .
11272	Returns the SCI control byte .
11273	Read a single bit value .
11274	Write a bit value to the memory .
11275	Get the bit number of a given bit pattern .
11276	Watch the ports of a given port .
11277	Process event_maps .
11278	Put GPIOInterrupt into userspace .
11279	Set GPIOInterrupt edge .
11280	Waits until a file exists .
11281	Register a pin function .
11282	Deregister a pin function .
11283	Enables GPIO interrupts .
11284	Send data to SPI .
11285	Render the tab .
11286	Return True if the form has any errors .
11287	Render a link .
11288	Extract the version of a package .
11289	Add forms to the form .
11290	Check the status of the API .
11291	Perform a GET request .
11292	Get a download link .
11293	Upload a link to a folder .
11294	Upload a file .
11295	Upload a file .
11296	Retrieves the status of a remote upload .
11297	List files in a folder .
11298	Retrieves the running conversions for a folder .
11299	Calculate humidity .
11300	Calculate the dewpoint .
11301	Publish a message to the server .
11302	Calculate the CRC of the given data .
11303	Verify that data is valid
11304	Unpack a storm date .
11305	Detect rev .
11306	Wake up the weather station
11307	Send a command .
11308	Send DMPFT command .
11309	Get the current time stamp and time stamps
11310	Parse the archive .
11311	Update weather data .
11312	Initialize syslog .
11313	Return a list of all pub services .
11314	Calculate the wind speed for a given station .
11315	Set the properties of the wind system .
11316	Set the arguments .
11317	Write the configuration to a file .
11318	Decorator to check if user wants a request .
11319	Initialize the app .
11320	Return True if all requirements are satisfied .
11321	Add an override .
11322	Pop an override context .
11323	Override the current value .
11324	Add additional context to the stack .
11325	Pop an item off the stack .
11326	Add additional items to the current context .
11327	Unuplicate field names .
11328	Interpret the stats from the results .
11329	Extracts parameters from a query .
11330	Run a query .
11331	Return a pandas dataframe .
11332	Return the graph as a MultiDiGraph .
11333	Create a pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Writes the result to a csv file .
11337	Returns True if the given user has the given permission .
11338	Add widget to context .
11339	Returns a sorted list of widgets sorted by position .
11340	Return a list of all widgets that need to update
11341	Register a dashboard widget .
11342	Unregister a widget .
11343	Returns the last update .
11344	Get a dashboard widget setting .
11345	Save a dashboard setting .
11346	Determine if the request should be updated .
11347	Create an ndarray .
11348	Constructs an empty array .
11349	Concatenate multiple Spark arrays .
11350	Check if arguments are valid
11351	Format axes into a tuple .
11352	Wraps a function into a BoltArray .
11353	Align the shape of the array .
11354	Convert to Spark .
11355	Return the tordd of the array .
11356	Return a new RDD with the given size .
11357	Apply a function to each RDD .
11358	Create a chunk of data .
11359	Apply a function to each chunk .
11360	Apply a function to each RDD .
11361	Return an array with the given size .
11362	Remove padding .
11363	Get the number of chunks from a plan .
11364	Get the slices of a plan .
11365	Create a mask from indices .
11366	Repartition the RDD .
11367	Return a stack of the data .
11368	Align the slice to the given axis .
11369	Return the first item in the RDD .
11370	Compute the stat for the given axis .
11371	Return the mean of the DataFrame .
11372	Compute the variance of an axis .
11373	Return the standard deviation of an axis .
11374	Compute the sum over each axis .
11375	Return the maximum of the DataFrame .
11376	Return the minimum value of the DataFrame .
11377	Return a chunk of data .
11378	Swap the values of a barray .
11379	Transpose the data .
11380	Swap axis1 and axis2 .
11381	Return a copy of this SparseArray .
11382	Reshape the shape of the dataset .
11383	Return a copy of the Dataset .
11384	Return a copy of this RDD .
11385	Clip this RDD to a given range .
11386	Convert to numpy array .
11387	Convert argument to a tuple .
11388	Convert arguments into a tuple .
11389	Ensure shape is valid .
11390	Determine whether two arrays are identical .
11391	Convert an iterable into a numpy array .
11392	Convert a slice into a slice .
11393	Check if new values are transposeable
11394	Check if new values are reshapeable .
11395	Concatenate a list of ndarrays .
11396	Expand an array .
11397	Zips an RDD by applying the indexing operator .
11398	Decorator to wrap a function .
11399	Lookup a constructor by name .
11400	Reshape the array .
11401	Return a new BoltArray with the same axes .
11402	Reshape the array to a new shape .
11403	Transpose the array along the axis .
11404	Constructs a new object .
11405	Create a new tensor .
11406	Concatenate multiple arrays .
11407	Compute the likelihood of a discrete distribution .
11408	Calculate the probability of the maximum likelihood .
11409	Calculate the discrete alpha of a discrete signal .
11410	Calculate the best alpha of the data .
11411	Calculate the best alpha values for the given data .
11412	Plot the PCF function .
11413	Compute the log normal distribution .
11414	Sanitize the given HTML .
11415	Configure analytics for Yandex
11416	Return a list of tag names .
11417	Compute the MD5 hash of this key .
11418	Returns the SHA256 hash of the key .
11419	Returns the SHA512 of the key .
11420	Parse a long value .
11421	Decode a public key .
11422	Parse options .
11423	Process SSH RSA key data .
11424	Parse SSH DSS key .
11425	Process ecdsa sha sha .
11426	Process an ed25519 16 - bit key .
11427	Parse SSH2 public key .
11428	Perform a single step .
11429	Perform a single step step .
11430	List of mechs .
11431	Store credentials for this credential .
11432	Main function .
11433	Initialize a setuptools .
11434	Create audio file .
11435	Returns the HTML for the DJF5B .
11436	Normalize djfrontend page .
11437	Renders a CSS font .
11438	Template tag for djfrontiz .
11439	Template tag for djfrontend .
11440	Template tag for djf frontend
11441	Generate jquery_datatables .
11442	Return HTML for jquery_datatables .
11443	Generate HTML for the jquery datatables .
11444	Template tag for django . formset
11445	Shortcut to display the scrollToJS .
11446	Compiles the jquery_jquery script .
11447	Returns the HTML for the djfront website .
11448	Generate javascript script for DJFRONT_GA .
11449	u Render a JavaScript variable .
11450	Iterate over authentication hashes .
11451	Calculate the expiration time .
11452	Get a user token .
11453	Serialize the object into a dict .
11454	Deserialize a profile .
11455	Update a user s profile .
11456	Send an authentication failed .
11457	Validate and return a User object .
11458	Check if the request is secure .
11459	Return the username for a given user
11460	Create a new user
11461	Logs a user
11462	Unsubscribe from the user
11463	Login with the given parameters .
11464	Login with the given parameters .
11465	Logs a user with a resume token .
11466	Change the user s password
11467	Send a forgot password
11468	Reset a user s password .
11469	Recursively merges two dictionaries .
11470	Read the contents of a file .
11471	Get the ID of an object or model .
11472	Get the metadata for a given object_ids .
11473	Return the object s object_id .
11474	Given a list of meteor_ids return a dictionary of object ids .
11475	Get the object for a particular meteor_id .
11476	Set defaults for the given operation .
11477	Set the reverse_id of the model .
11478	Delete a list of models .
11479	Truncate the database .
11480	Truncate the database .
11481	Initialize options .
11482	Finalize build options .
11483	Build the meteor app .
11484	Convert a path to a directory .
11485	Seed the given values .
11486	The state of the camera .
11487	Generate a random string .
11488	Decorator for API endpoint endpoint .
11489	Iterate over all the endpoints of an object .
11490	Clear API path map .
11491	Pretty print a value .
11492	Validate kwargs
11493	Called when the connection is opened .
11494	Called when the connection is closed .
11495	Process a UDP message .
11496	Generate frames from a DDP message .
11497	Process a DDP request .
11498	Dispatch a method .
11499	Receive a connection .
11500	Receive a ping .
11501	Receive a subscription .
11502	Receive a subscription .
11503	Receive a method .
11504	Iterate over websocket info .
11505	Starts the server .
11506	Main entry point .
11507	Print a message to stdout .
11508	Stop the server .
11509	Start the greenlet .
11510	Run Postgres greenlet .
11511	Poll for notifications .
11512	Monkey patch threading
11513	Generate a random ID .
11514	Autodiscover API .
11515	Return a dictionary representation of the error .
11516	Get an object by name .
11517	Send a log record .
11518	Decorator to create a negotiation middleware .
11519	Context manager to add a route context .
11520	Add a resource object .
11521	Run the application .
11522	Send a message .
11523	Send an alert to APNS .
11524	Fetch inactive ids from APNS .
11525	Send a message to GCM .
11526	Send data to GCM .
11527	Send data to GCMP .
11528	Send data to the API .
11529	Return a model class from a module location .
11530	Run fast forward selection algorithm .
11531	Search Giphy .
11532	Translate a phrase or phrase .
11533	Retrieve the most recent tweets .
11534	Get a Giphy object from the given id .
11535	Create a screenaver .
11536	Upload tags to Giphy
11537	Normalize data to int
11538	Fetch the given endpoint .
11539	Translate a term into a GIF .
11540	Return a generator that yields a generator of images .
11541	Retrieves a GiphyImage from the API .
11542	Upload a file to Giphy
11543	Create an extension element .
11544	Authenticate the user .
11545	Upload a video .
11546	Check the status of a video .
11547	Update a video entry .
11548	Delete a video .
11549	Check availability of a video .
11550	Show a video .
11551	List videos .
11552	Upload a video .
11553	Upload a video .
11554	Redirect to YouTube .
11555	Delete a video .
11556	Retrieve the current video .
11557	Save the video .
11558	Method to delete video
11559	Update the metadata .
11560	Update a metadata field .
11561	Update this item .
11562	Parse a YAML string .
11563	Return a string representation of a tree .
11564	Load a Python object from a file - like object .
11565	Read a file .
11566	Parse a string into a Node .
11567	Create a node .
11568	Return a string containing the newick string .
11569	Convert ASCII art to ASCII art .
11570	Return the node with the given label .
11571	Prune the given nodes .
11572	Resolve polytomies .
11573	Remove internal names .
11574	Remove leaf names .
11575	Decorator to check if a user is authenticated .
11576	Disposes a JSON string .
11577	Raise an exception if the given setting is not already defined .
11578	Get an argument from the request .
11579	Get the arguments from the request .
11580	Calls a callback .
11581	Get a cookie value .
11582	Clear a cookie
11583	Redirect to OpenID endpoint .
11584	Retrieves an authenticated user .
11585	Create OAuth request parameters .
11586	Redirect to OpenID endpoint .
11587	Make a call to Facebook .
11588	Get an authenticated user .
11589	Concatenate the given URL with the given arguments .
11590	Parse a header line .
11591	Add a header .
11592	Get a list of HTTP headers .
11593	Parse a single line .
11594	Parse HTTP headers .
11595	Normalize HTTP headers .
11596	Convert value to utf8 .
11597	Convert value to unicode .
11598	Convert value to base string .
11599	Recursively convert an object into unicode
11600	Ensure that the auth plugin exists .
11601	Iterate over all subclasses of a class .
11602	Based on the matching strategy and optionally the origin to pass back to the origin .
11603	Return the occupancy of a grid .
11604	Write a ROOT box to a file .
11605	Write a PDB file .
11606	Determines the number of molecules based on the total and relative values .
11607	Resizes the PBC for each protein .
11608	Write the top molecules to a file .
11609	Iterate over a pkg_resources file .
11610	Store a message for a user .
11611	Send a message to all users .
11612	Get the messages for a user .
11613	Called when the user is logged in .
11614	Check config file .
11615	Verify the profile name .
11616	Retrieve data from a protobuf message .
11617	Retrieve pwd from cfg .
11618	Update cfg data .
11619	Update cfg with pwd .
11620	Create a config profile .
11621	Display required information for a given message type .
11622	Get the data for a given message type .
11623	Retrieve authentication information from a user s configuration .
11624	Configure a profile .
11625	Write data to cfg .
11626	write auth info to cfg
11627	Add attachments to the message .
11628	Send the message .
11629	Send a message .
11630	Return a message factory .
11631	Creates a property .
11632	Validate a property .
11633	Validate input .
11634	Validate two Twilio attributes .
11635	Validate slack post .
11636	Ensure the value is valid .
11637	Coroutine to send messages .
11638	Add a message to the coroutine .
11639	Read body from keyword arguments .
11640	Trim a set of keyword arguments .
11641	Send a message .
11642	Get the ID of a chat .
11643	Send the message .
11644	Send the message .
11645	Return SMTP server instance .
11646	Generate email message .
11647	Add headers to the message .
11648	Add the message body .
11649	Add attachments .
11650	Return an SMTP session .
11651	Return an SMTP SSL object .
11652	Return an SMTP connection to the server .
11653	Send the email .
11654	Save the tag to a file .
11655	Unloads the image .
11656	Get the region of the image .
11657	Validate the configuration .
11658	Remove all entries from the internal cache .
11659	Return a byte representation of the header .
11660	Read data from file .
11661	Delete the chunk .
11662	Resize the chunk .
11663	Insert a new chunk .
11664	Save the frame to a file .
11665	Delete a file .
11666	Parse a file .
11667	Process a line .
11668	Add a source block to the block .
11669	Draw a string on the given font .
11670	Parse an ISO 8601 time string .
11671	Turn a list of words into a string
11672	Convert a word to HTML .
11673	Convert a list of words into a paragraph .
11674	Convert a list of lines into HTML code .
11675	Make html items from a list of items .
11676	Save the metadata to a file .
11677	Update parent attributes .
11678	Run the game .
11679	Register a mapping .
11680	Retrieves a controller object .
11681	Registers a freeform key .
11682	Calculate the HMAC - SHA256 of a string .
11683	Generate request headers .
11684	Send a request .
11685	Send a GET request .
11686	Send a POST request .
11687	Send a DELETE request .
11688	Return an APE value .
11689	Send an XML - RPC request .
11690	Perform an asynchronous API call .
11691	List all hosted zones .
11692	Create a hosted zone .
11693	List resource record sets for a zone .
11694	Change the resource record set .
11695	Draws an image .
11696	Draws a region of the image .
11697	Return the size of the packet .
11698	Replace old_pages with new_pages .
11699	Find the last page of the given serial .
11700	Set a section .
11701	Add a doc markup to the document .
11702	Process markdown content .
11703	Get a markup by tag name .
11704	Create a new HostedZoneRequest .
11705	Lock a file - like object .
11706	Inserts a number of bytes into a file .
11707	Delete size bytes from a file .
11708	Convert data to UTF - 8 .
11709	Add a change .
11710	Parses a change info element .
11711	Measure the width of a string
11712	Return True if all values are modified .
11713	Delete this zone .
11714	Save the current zone .
11715	Parses id3v1v1v1v1v1v1v1 v2v1v1v1 v2v1v1v1v1 v2v1 v2v1 v2v1 v1v1 v1 v1 v13 v13 v13 v13 v1 v13 v1 v13 v13 v1 v13 v13 v13 v1 v1 v13 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v13 v13 v1
11716	Makes an ID3 v1v1 v1v1 v1 v2 .
11717	Read data from the file .
11718	Removes all values from the dictionary .
11719	Load a frame .
11720	Update common features .
11721	Updates the version of this frame .
11722	Unload a sound .
11723	Play the sound .
11724	Sets the loop points .
11725	Parse adobe glyphs .
11726	Filters out glyph names based on a filter .
11727	Dump the encoding tables to a file .
11728	Dump an array to a file .
11729	NAME postscript . py
11730	Check if a file exists
11731	Make a list of files from the command line arguments .
11732	Parse a HostedZone element
11733	Parses a delegation set element .
11734	Convert blocks to bytes .
11735	Group padding blocks .
11736	Delete the block .
11737	Save the metadata to a file .
11738	Parse an RRset alias .
11739	Parse rrrset record values .
11740	Parse an RRset element
11741	Delete this hosted zone .
11742	Add a record to this zone .
11743	Create a record .
11744	Create a record .
11745	Create a CNAME record .
11746	Create a new MXResourceRecordSet .
11747	Create a new NSRecordSet .
11748	Create a PTR record .
11749	Create a SPF record .
11750	Create a new RR record set .
11751	Create a new TXT record .
11752	Registers a TXXX frame .
11753	Get the initial values for a change .
11754	Generate an XML change .
11755	Generate a ChangeRecordSetsRequest .
11756	Initialize logging .
11757	Return the item for the given alias .
11758	Freeze a dictionary into a sorted tuple .
11759	Join HTML attributes .
11760	Initialize the app .
11761	Initialize the bars .
11762	Bind a Bar .
11763	Return the arguments as a dictionary .
11764	The URL for this endpoint .
11765	Return True if the current request is the same .
11766	Validate a metric class .
11767	Get a stat by name
11768	Calculate statistics .
11769	Auto - discover Django apps .
11770	Returns a csv response .
11771	Handles maintenance events .
11772	Get a list of values from GET variables .
11773	Get a GET parameter from the request .
11774	Get the next colour .
11775	Get parameters for Gecko .
11776	Displays the number widgets for the gecko - bar chart .
11777	Displays the metrics for the current user .
11778	Generate a line chart
11779	Return a tuple containing the geometries for geometries .
11780	Displays the geometries for the given request .
11781	Returns a list of all gadgets that are active .
11782	Register gadgets .
11783	Returns a dictionary with the context data .
11784	Print an error message .
11785	Validate a function .
11786	Prompt user for long input .
11787	Prompt user for list input .
11788	Ask the user for a file name .
11789	Get the games for a given year .
11790	Return the winner of the game .
11791	Return the current season .
11792	Return a DataFrame containing the starters .
11793	The surface area of the game .
11794	The coinoss .
11795	Return the weather data .
11796	Retrieve the info table .
11797	Searches for the game .
11798	Returns a DataFrame containing the league standings .
11799	Get team stats table .
11800	Returns a DataFrame of the game standings .
11801	Return the line score of each team .
11802	Return the current season .
11803	Return a DataFrame containing the player stats .
11804	Switch to the current working directory .
11805	Decorator to cache a function .
11806	Get class instance key .
11807	Memoization decorator .
11808	Return the age of a person .
11809	Get stats table .
11810	Returns the stats table for the game .
11811	Return a table of total totals .
11812	Return the per - minute stats table .
11813	Return the per - 100 stats table .
11814	Return the advanced stats table .
11815	Return a stats table for the robot .
11816	Return an advanced PBP table .
11817	Return a pandas DataFrame with the basic game information .
11818	Get session data
11819	Expand details into a DataFrame
11820	Add team columns to dataframe .
11821	Add team features .
11822	Calculates the initial win probability for a given line .
11823	Return a pandas DataFrame of all the games passing through the given kind .
11824	Return a list of ints for a simple year .
11825	Get the name of the team .
11826	Get box scores for a given year .
11827	Return the pq tag for a given year .
11828	Get the headcoaches for a given season .
11829	Searches the game for the given year .
11830	Returns the online coordinator for the given year .
11831	Returns the DC Coordinator for the given year .
11832	Get the team s ID .
11833	Returns the nickname for the given year
11834	Returns the Alignment for a given year
11835	Return a DataFrame of split_value for a given year .
11836	Fetches the HTML from the given url .
11837	Recursively flattens links .
11838	Convert a rel_url to id
11839	Convert keyword arguments to query string .
11840	Read an HDF5 file .
11841	Direct access to read queue .
11842	Return a new Queue .
11843	Closes the stream .
11844	Read a batch of data from the dataset .
11845	Get the next batch from the given path .
11846	Get a batch of data from the stream .
11847	Get a generator from the queue .
11848	Parse a file - like object .
11849	Write data to a file .
11850	Read a varint .
11851	Iterate over the objects .
11852	Close the file .
11853	Write pb2_obj to the buffer .
11854	Write the buffer to the file .
11855	Return the path to the game directory .
11856	Input text with keyboard emulation .
11857	Create a fake movie .
11858	Evaluate the traits .
11859	Waits until condition is true .
11860	Waits until all the traits are present .
11861	Add ignored exceptions .
11862	Returns the volume of a given operator
11863	Returns the source s source value .
11864	Send a message .
11865	Return the current status of the player .
11866	Power off the device .
11867	Power on the device .
11868	Set the volume .
11869	Select a source
11870	Decobfuscate a request .
11871	Calculate the CRC32 of a given plaintext .
11872	Obfuscate a value .
11873	Check if a song is missing .
11874	returns a list of all hrefs in html
11875	Check if song name is a song name
11876	Parse a song .
11877	Returns the url for a song .
11878	Parses Google Google website .
11879	Parses a song .
11880	Get the content of an html page .
11881	Download a file using requests .
11882	Download a file using wget
11883	Returns a list of all station codes by city name
11884	Retrieve a location observation .
11885	Parse an observation response into a dictionary .
11886	Get a station s observation .
11887	Return a list of search paths .
11888	List of compiled compiler extensions .
11889	The mimetype .
11890	Return the mime type of the compiler .
11891	Returns the compiler format extension .
11892	Register a processor for a given mimetype .
11893	Remove a processor for a mimetype .
11894	Returns a list of all the paths to find .
11895	Register default values .
11896	Import Qt core .
11897	Return netnode . netnode
11898	Add plugin name .
11899	Delete plugin name .
11900	Import settings from settings file .
11901	Export settings to a QSettings object .
11902	The directory IDASettings object .
11903	Iterate over all the keys .
11904	Simple error handler .
11905	Get a table by name .
11906	List all tables .
11907	Fetch a specific category .
11908	Retrieve metadata id from metadata .
11909	Get the updated date of a metadata item .
11910	Fetch the owner team .
11911	Fetch the owner of a crate .
11912	Fetch the versions of a crate .
11913	Fetch data for a crate release .
11914	Fetch data for a crate .
11915	Get the summary of CRATES .
11916	Retrieves all crates from the API .
11917	Get a crate by ID .
11918	Retrieve a crate attribute .
11919	Fetch the items from the API .
11920	Fetch a specific category .
11921	Fetch questions at a given category .
11922	Return a generator of questions .
11923	Fetch events .
11924	Get the updated timestamp of the metadata item .
11925	Determine the category of metadata .
11926	Fetch items from ReMo API .
11927	Return a list of the internal buffer list .
11928	The priority of the IOCB .
11929	Close the queue .
11930	Submits a list of blocks .
11931	Cancel the block .
11932	Cancel all pending blocks .
11933	Retrieve events from the queue .
11934	Fetch events .
11935	Retrieves all cells from Zabbix API .
11936	Parse the feed
11937	Return the format for a given pid type .
11938	Return permission factory .
11939	Create a blueprint .
11940	Create a URL rule .
11941	View a record .
11942	r Default view method .
11943	r Export a record .
11944	Execute a callable .
11945	Close the socket .
11946	Remove a client .
11947	Increment a metric by name .
11948	Send a timing request .
11949	Record timing information .
11950	Send a gauge .
11951	Sets a gauge delta .
11952	Sets a metric .
11953	Send data to the batch .
11954	Create a batch client .
11955	Get a unit client .
11956	Flush the current batch .
11957	Create a new permission checker .
11958	Create a batch client .
11959	Flush all pending batches .
11960	Get a unit client .
11961	Create or update a user .
11962	Interpret an OpenMath object .
11963	Convert a term to OpenMath
11964	Convert an OMS object to a Python object .
11965	Convert an object to OpenMath .
11966	Register a conversion function .
11967	Deprecated .
11968	Initialize the app .
11969	Yield valid choices .
11970	Splits a model kwargs into a dictionary .
11971	Decorator to register a function .
11972	Helper function to create a value .
11973	Return the default form data for a form .
11974	Decorator to ensure a field is required .
11975	A decorator that ensures the choices are valid .
11976	Return the data for a given field .
11977	Return the data for a field .
11978	Return the data for a date field .
11979	Return the data for a datetime field .
11980	Return a string representing the field s data .
11981	Return data for integer field .
11982	Generate a time field .
11983	Return the data for a field .
11984	Return the data for multiple choices .
11985	Return a random model choice .
11986	Encode an object as bytes .
11987	Publish a package
11988	Tag the project
11989	Make sure the field is blank
11990	Load a global global variable .
11991	Build an instance from a state .
11992	Create an OML application .
11993	Create an OMAPP application .
11994	Decode data into bytes .
11995	Encode the given data .
11996	Convert value to fixed precision
11997	Format a number .
11998	Convert number to money
11999	Convert data to numpy array
12000	Convert an array into blosc compressed data .
12001	Add a workspace .
12002	Remove a workspace .
12003	List all workspaces .
12004	Retrieves a word by name .
12005	Determine if a repository exists .
12006	Sync workspaces
12007	Clone a URL .
12008	Check ndio version
12009	Convert an ndarray to voxels .
12010	Convert a list of voxels into a numpy array .
12011	Execute commands .
12012	Print an update
12013	Add a console handler .
12014	Execute a command .
12015	Load image from file .
12016	Save numpy array to file .
12017	Save a collection of numpy arrays .
12018	Print the status of a workspace .
12019	Print the status of a repository .
12020	Get the block size .
12021	Post cutout without chunking .
12022	Load a tiff file .
12023	Save numpy array to file .
12024	Load a tiff file .
12025	Write the configuration to disk .
12026	Clone the current branch .
12027	Return the version of yoda .
12028	Takes a name and prints it .
12029	Option decorator .
12030	Returns a list of reserved ids .
12031	Merge multiple ids .
12032	Propagate a token to a channel .
12033	List all projects in a dataset .
12034	Get a dataset by name .
12035	List all datasets .
12036	Parse command line arguments .
12037	Executor for globus
12038	Show a workspace .
12039	Show all the workspace
12040	Return the URL for this request .
12041	Guess file format from extension .
12042	Open a file .
12043	Convert a file to another .
12044	Build a graph .
12045	Compute invariants .
12046	Convert a graph to a graph .
12047	Convert a list of ramons into a dictionary .
12048	Return the RAMon type for the given type .
12049	Delete a channel .
12050	Add a dataset .
12051	Return a json representation of the dataset .
12052	Create a dataset dictionary .
12053	Convert a channel into a dictionary .
12054	Create a project dictionary .
12055	Identify image size .
12056	Upload data to ndio .
12057	Find a workspace path .
12058	Retrieves a list of public keys .
12059	Retrieves information about the project .
12060	Set the metadata of the remote data .
12061	Get the given URL .
12062	Make a POST request .
12063	Delete a URL .
12064	Load image from HDF5 file .
12065	Save array to HDF5 file .
12066	Infer gaps in the given tree .
12067	Recovers a nvim io .
12068	Install and ungettext translations .
12069	A decorator that applies a function to an exclusive condition .
12070	Return the percentage of a part .
12071	Get the stats for a server .
12072	Get a list of slabs
12073	Add context data .
12074	Display the server status .
12075	Displays the memcache dashboard .
12076	Display statistics about a server .
12077	Displays the server s slabs .
12078	Convert value to human readable form .
12079	Find and return a Config object .
12080	Add a directory .
12081	Apply an applicator to the config .
12082	Path of the file .
12083	Read the contents of the file .
12084	Write data to file .
12085	Configure logging .
12086	Create the file .
12087	Applies the given applicator .
12088	The absolute path of this object .
12089	Remove the directory .
12090	Prepares all children .
12091	Cleanup all children .
12092	Return the path to the given path .
12093	Return a list of all files in the directory .
12094	Write data to a file .
12095	Read a file .
12096	Add a file or directory .
12097	Save the config to a yaml file .
12098	Load a yaml file
12099	Remove the temporary file .
12100	Load plugins from a directory .
12101	Recursively update a dictionary .
12102	Return a child node .
12103	Resolve the path to a key .
12104	Get the value of the container .
12105	Update the configuration with the given data .
12106	Load the configuration from a yaml file .
12107	Apply config values to a string .
12108	Build the URL for a given URL .
12109	Process socket input .
12110	Send socket output .
12111	Send an RPC call .
12112	Read data from socket .
12113	Write data to socket .
12114	Decorator to check if a link is not in a callback .
12115	Returns a dictionary with the settle modes for the remote link .
12116	Configure the node .
12117	The address of the source .
12118	The target address .
12119	Called when a session is closed .
12120	Create a new sender .
12121	Request a sender .
12122	Create a new receiver .
12123	Request a receiver .
12124	Destroys a link .
12125	Close the session .
12126	Process an endpoint event .
12127	Add Markdown to Markdown .
12128	Called when a remote connection is closed .
12129	Called when the receiver has failed .
12130	Extract host and port from an AMQP server address .
12131	Connect to a socket .
12132	Create a server socket .
12133	Return a list of readers that need to be processed .
12134	Decorator to check if a connection is not recentrant .
12135	Process the connection .
12136	Read data from the transport .
12137	Create a new sender .
12138	Reject a sender .
12139	Create a receiver .
12140	Called when the connection failed .
12141	Called when the connection is active .
12142	Called when the connection is closed .
12143	Called when an error occurs .
12144	Decorator for twilio views
12145	Returns the color string .
12146	Return a list of all font names in the search path .
12147	Sets compression flag .
12148	Add an object .
12149	Write a stream to the buffer .
12150	Put a stream .
12151	Add text to the parent page .
12152	Set the colors scheme .
12153	Set default font .
12154	Add a page to the page .
12155	Sets the font size .
12156	Add text to the page .
12157	Add a new line .
12158	Add a pie chart .
12159	Output all pages .
12160	Return a list of all pages in the page .
12161	Output fonts .
12162	Output images .
12163	Output the contents of the object .
12164	Transform a rotation matrix .
12165	Return the absolute position of a pixel .
12166	Set style .
12167	Rotate a point .
12168	Set the object s information .
12169	Set display mode
12170	Closes the document .
12171	Put PDF header .
12172	Put pages .
12173	Add resource dictionary to database .
12174	Put information about the object .
12175	Put catalog .
12176	Put the trailer into the buffer .
12177	Iterate over a sequence of sequences .
12178	Iterate over a sequence .
12179	Generator for gosper .
12180	Perform a Brent search on a set of sequences .
12181	Return True if fit_length is fit
12182	Checks if the ymax is fit
12183	Checks if the x coordinate is greater than the x .
12184	Determines if the y coordinate is greater than the test .
12185	Return a shallow copy of the cursor .
12186	Increase the x .
12187	Move y to y .
12188	Draws the table .
12189	Create a new Tag .
12190	List all tags .
12191	Get a label by name .
12192	Update a label .
12193	Delete a tag by id .
12194	Create a new tag .
12195	Retrieve a list of all actions .
12196	Return a list of tags for a label .
12197	Create a hook .
12198	List all hooks .
12199	Update a hook .
12200	Create an alert .
12201	Get alerts by type .
12202	Update an alert .
12203	Sphinx extension .
12204	Return the path to the theme .
12205	POST request to logentries .
12206	List all hosts
12207	Retrieve a log set .
12208	Find a position in dest_b .
12209	Returns the duration in seconds .
12210	Update the model .
12211	Compute the model .
12212	Perform the bin operation .
12213	Free memory .
12214	Receive data from the socket .
12215	Read a line from the buffer .
12216	Generator that yields data from the socket .
12217	Parse the status of the line .
12218	Generate info message .
12219	Generate an info message .
12220	Send a command .
12221	Get the capabilities information .
12222	mode mode
12223	Send a QUIT command to the server .
12224	Get the current date .
12225	Send HELP command .
12226	Generate new newsgroups .
12227	Generate new news .
12228	Return a list of new news items .
12229	List active newsgroups .
12230	Generator for list active times
12231	List newsgroups .
12232	Generator for listing overview .
12233	Generator for list extensions
12234	Generate a list .
12235	Return a list of items .
12236	Execute a group command
12237	Get the next article .
12238	Get the article information .
12239	Get a HEAD message .
12240	Get the body of a message .
12241	Executor for xgtitle
12242	Set a message header .
12243	Send a XZHDR command .
12244	Generator for XOVER operation .
12245	Generator for xpatches .
12246	Return a list of matching patterns .
12247	Compress gzips .
12248	Send a POST request .
12249	Convert a value to an integer .
12250	Convert a string to a timestamp .
12251	Convert a string to a datetime object .
12252	Perform an HTTP POST request .
12253	Perform a DELETE request .
12254	Perform a GET request .
12255	List scheduled queries .
12256	List the tags for this logentries .
12257	Get a tag by name or ID
12258	Create an alert .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a new query .
12262	Delete a tag .
12263	Convert a range to a string .
12264	Parse the newsgroup info .
12265	Parse a header line .
12266	Convert headers into a string .
12267	Do a POST request .
12268	Run a test suite .
12269	Return a docstring for the defaults .
12270	Decorator for defining defaults .
12271	Generate a docstring for the defaults .
12272	Set the value .
12273	Raise TypeError if value is not None .
12274	The value of the variable .
12275	Check if value is a scalar .
12276	The symmetric error .
12277	Set the errors
12278	Sets the parameter bounds .
12279	Import the metrics .
12280	Convert a list of metrics into a dictionary .
12281	Filter metrics by filter_expression .
12282	Call the API
12283	Return an expression corresponding to the given text .
12284	Return an operator .
12285	Add the given text to the current token .
12286	Initialize all required properties .
12287	Return a list of Parameter objects .
12288	Return a list of parameter values .
12289	Return a list of parameter errors .
12290	Clears all derived values .
12291	Set the method name .
12292	Get environment variables .
12293	Returns the URL parameters .
12294	Perform a GET request
12295	Perform a DELETE request .
12296	Perform an HTTP POST request .
12297	Perform a PUT request .
12298	Call the API
12299	Validate the sceneInfo .
12300	Verify that the type product is valid .
12301	Get the size of a remote file .
12302	Download the scene .
12303	Validate bands
12304	Establish connection to Earthexplorer
12305	A decorator to add a prefix to the class .
12306	r Return the timezone for a given timezone .
12307	Normalize a time .
12308	Join an iterable .
12309	Get the positions of each line in a text .
12310	Point to a source .
12311	Dump the result to stdout .
12312	Remove metrics from the result .
12313	Load a fortune from a list of files .
12314	Set the chance of the given files .
12315	Main entry point .
12316	Parse a rule .
12317	Handle special handling .
12318	Return the grammar of the input source .
12319	The Rule objects .
12320	List of comments .
12321	List of directives .
12322	Return the source code source .
12323	Compile the grammar .
12324	Returns the import statement .
12325	Returns the token types for parsing nodes .
12326	Return the class definition .
12327	Returns the name of the entry_point .
12328	Get rule definition .
12329	Return the source code for the rule .
12330	Get the name of a rule .
12331	Convert an expression to ASN .
12332	Convert a Node to an ASN .
12333	Return a list of operands that satisfy predicate .
12334	Removes grouping groups from an OptionTree
12335	Convert AST node to code .
12336	Convert an ASTTree node to code .
12337	Convert the AST to code .
12338	Convert an OptionGroup to a Python code block .
12339	Convert an AST repetition group to code .
12340	Convert an AST special handling to code .
12341	Convert an OP_Alignment to a Python code block .
12342	Generate code for op_concatenation .
12343	Convert an AST instruction to code block .
12344	Convert an expression to a code block .
12345	Return the code for an AST instruction .
12346	Find directives that match a predicate .
12347	Return True if child is a child of parent .
12348	Parse directives from a comment comment .
12349	Print the results .
12350	Return a new ID .
12351	Remove a hotkey .
12352	Add command line arguments .
12353	Configure logging .
12354	Validate arguments .
12355	Convert infix to prefix .
12356	Convert a list of nodes to an optree .
12357	Reduce a list of nodes into an optimal operator .
12358	Add command line arguments .
12359	Load the manifest .
12360	Get a metric definition by name .
12361	Returns the maximum length of each column .
12362	Returns the maximum length of each column .
12363	Replace underscores with underscores .
12364	Print field markdown .
12365	Output the Metrics Markdown header .
12366	Generate markdown file .
12367	Parse the input .
12368	Attempt to retry the original text .
12369	Add command line arguments .
12370	Parse a string into a datetime object .
12371	Output a csv output
12372	Output json data to stdout .
12373	Output a JSON string .
12374	Convert text to XML .
12375	Default prediction .
12376	Pretty print a tree .
12377	Return a function that returns a repetition function .
12378	Get a terminal node .
12379	Extract a repetition from text .
12380	Extract extractor from text .
12381	Count the number of leading whitespace in text .
12382	Call extractor .
12383	The position of the parse tree .
12384	Return True if all children are empty .
12385	Add a set of ignored items .
12386	Return True if value is a type of type .
12387	Return a copy of this ParseNode .
12388	Return a new ParseNode with filtered results .
12389	Return a new ParseNode with merged children .
12390	Return a new ParsedNode .
12391	Return a new ParseNode .
12392	Position .
12393	The maximum read position .
12394	Step next character .
12395	Go to the next line .
12396	Go to the previous line .
12397	Return the last readed line .
12398	Increment the cursor position .
12399	Save current cursor position .
12400	Restore cursor position .
12401	Return a string representation of the notification .
12402	Set the symbol name .
12403	Return the number of variables in the chain .
12404	Return the number of functions in the chain .
12405	Update the number of functions .
12406	Update this scope .
12407	Return the union of this scope .
12408	Update this scope with another set .
12409	Return the intersection of the current scope .
12410	Update this scope with another set .
12411	Return a new scope with the given sig .
12412	Update the symmetric difference with another set .
12413	Return the symmetric difference of the current state .
12414	Add a signature .
12415	Remove a signature from the set .
12416	Discards a signature .
12417	Return a list of all signatures .
12418	Return the first signature .
12419	Returns the last signature .
12420	Get a signature by key .
12421	Get a scope by name .
12422	Get a signature by its name .
12423	Return a fully - qualified scope .
12424	Call a TranslatorInjector
12425	Normalize an AST .
12426	Set this node from another node .
12427	Return an iterator of r values .
12428	Check if a hit is ok
12429	Compute the signature of the function .
12430	Resolve the expression .
12431	Returns a list of resolved names .
12432	Set the resolution of a resolved resolution .
12433	Delete a local file .
12434	Delete a file from S3
12435	Delete a file .
12436	Save object to local file .
12437	Save object to S3
12438	Saves the object to a local file .
12439	Find a bucket by path
12440	Create an enum .
12441	Decorator to check the type of a function .
12442	Set a callable by name .
12443	Add a method to the class .
12444	Decorator to register a hook .
12445	Decorator to define a rule .
12446	Decorator for directive directives .
12447	Decorator for class decorators .
12448	Bind dst to dst
12449	Read an EOF .
12450	Add new rule nodes to the rule tree .
12451	Pop all rule nodes .
12452	Get the value of a node .
12453	Parse a stream .
12454	Begin a tag .
12455	End a tag .
12456	Set rules .
12457	Sets the hooks .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Checks if the given text is in the stream .
12462	Read one character from the stream .
12463	Read a character from the stream .
12464	Read until EOF is reached .
12465	Ignores whitespace .
12466	Set the hit_dtype .
12467	Set the cluster dtype .
12468	Ensure that the cluster_hits_descrs_descrs_descrs are valid .
12469	Add a rule clause name .
12470	Add rules to bnf
12471	Add rule .
12472	Add sequences to the parser .
12473	Add an alternative .
12474	Add a range to the sequence .
12475	Add a rule .
12476	Add a capture .
12477	Add a binding .
12478	Add a hook .
12479	Set the parameter number .
12480	Parse a parameter from a string .
12481	Parse a parameter .
12482	Set the value of a parameter .
12483	Set the name of a hook .
12484	Add a parameter .
12485	Get the rules from the EBNF file .
12486	Ignores Cxx .
12487	Add a state .
12488	Return a dot representation of the graph .
12489	Write the graph to a dot file .
12490	Write the graph to a PNG file .
12491	Return a string representation of the state .
12492	Return the next state .
12493	Reset the live state .
12494	Infer type of block .
12495	Infer the type of a subexpr .
12496	Infer the scope of an identifier .
12497	Infer a literal .
12498	Dump all map nodes
12499	Parse a topython rule .
12500	Exit scope .
12501	Return a list of statements .
12502	Return an AST expression .
12503	visit a CallTrue
12504	Visit a hook .
12505	Return an AST expression .
12506	Visit a capture .
12507	Return the scope expression .
12508	Visit an Alt statement .
12509	Convert a Seq expression into an expression .
12510	Visitor for RepOptionalExpOptional .
12511	Visit a Rep0N node .
12512	Return an AST statement .
12513	Concatenate src to dst .
12514	Change the indentation of a list .
12515	Convert a list to a string
12516	Print a list of nodes
12517	Populates an edge from a sequence .
12518	Populate a state register from a list of sequences .
12519	Recursively build the state tree .
12520	Return True if predicate is equal to val .
12521	Build a Grammar from a string .
12522	Create a Grammar from a file .
12523	Parse the given source .
12524	Parse a file .
12525	Set a node s value .
12526	Set the value as an integer .
12527	Get a subnode .
12528	Default serializer .
12529	Get the number of items from a query .
12530	Dump a DataFrame into a dictionary .
12531	Retrieve the list of citations for a given date .
12532	Retrieve a list of bibrec ids from the database .
12533	Deprecated .
12534	Dump a BibDoc object to a file .
12535	Retrieve the number of items in the database .
12536	Check validity of a BibDoc .
12537	Serialize object to JSON .
12538	List users .
12539	Dump a uuid .
12540	Retrieve all featured communities .
12541	Return a set of modified ibrecids .
12542	Return the set of modified records in a given datetime .
12543	Get the restrictions for a collection .
12544	Get the revisions for a given record .
12545	Get all collections for a record .
12546	Serialize a MAR file into JSON .
12547	Return the number of modified records .
12548	Dump a record into a dictionary .
12549	Return a dict representation of an object .
12550	Load a model into the database .
12551	Return a dictionary of things .
12552	Initialize the application context .
12553	Memoize a function .
12554	Retrieves the run SQL .
12555	Get all connected roles for a given action_id .
12556	Execute a query
12557	Serialize an access token into a dictionary .
12558	Load token from data .
12559	Create a record dump .
12560	Return a string representing the config_var or default .
12561	Serialize an object .
12562	Retrieve users from invenio12 .
12563	Return a list of users .
12564	Return a dict representation of a user .
12565	Load deposit data into database .
12566	Create a record and persistent identifier .
12567	Load a record .
12568	Load one or more records into a single record .
12569	Show information about a dump of a dump .
12570	Load a dump of data .
12571	Load communities .
12572	Load all the users
12573	Load a deposit
12574	Get profiler statistics .
12575	Start the application .
12576	End profiling .
12577	Delete the profile .
12578	Delete the profile .
12579	Get the current status .
12580	Temporarily disable timestamps .
12581	Load a user from the database .
12582	Calculate translation matrix .
12583	Merge multiple images into one image .
12584	Adds a dimensions with ones to array .
12585	Create a persistent identifier .
12586	Create a record from a dump .
12587	Update a record .
12588	Create persistent identifiers .
12589	Delete a record .
12590	Create a new bucket .
12591	Create a file .
12592	Delete all buckets from a record .
12593	Return a list of persistent identifiers .
12594	Prepare the list of revisions .
12595	Prepare the list of files to be processed .
12596	Prepare the pids list .
12597	Return True if the given record is deleted .
12598	Load a community .
12599	Load a featured community .
12600	Dump a thing .
12601	Check a thing .
12602	Delete all events .
12603	Returns the magnitude of a vector .
12604	Normalize a vector .
12605	Translates the texcoords in the data .
12606	Ensure the bones dictionary is present .
12607	Set the length of the mesh .
12608	Set the parent .
12609	Get the coordinates of a pivot point .
12610	start animation
12611	Set the current position .
12612	Unset the current position .
12613	Set the texture state .
12614	Unset the state .
12615	Ensure model data exists .
12616	Redraw the scene .
12617	Render the model .
12618	Set the model .
12619	Writes the reports to the given path .
12620	Create a testsuite XML element .
12621	Add a menu .
12622	Redraw the label .
12623	Redraw the label .
12624	Draw the window .
12625	Delete a widget .
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers .
12629	Add a label to the window .
12630	Add a button to the dialog .
12631	Exit dialog .
12632	Add a button to the dialog .
12633	Add a button to the dialog .
12634	Updates the progress bar .
12635	Render all actors .
12636	Render the world .
12637	Context manager for a step .
12638	Determines if a resource exists .
12639	add a category
12640	Retrieves the missing texture .
12641	Retrieves a model by name .
12642	Load a model by name .
12643	Return the model data for the given name .
12644	Load model data from a JSON file .
12645	Add a widget .
12646	Draws the menu .
12647	Redraw the canvas
12648	Redraw the scrollbar
12649	Determine if the mouse is in a bbox
12650	Compute the p - value p .
12651	Add a layer .
12652	Get the region of the vertex .
12653	Draw all the buffers .
12654	Add an action .
12655	Run an action .
12656	Register a new name .
12657	Add a layer .
12658	Draw all layers .
12659	Delete all layers .
12660	The border of the canvas .
12661	Offset the list .
12662	Returns the size of the widget .
12663	Read a mesh from an HDF5 file .
12664	Convert shape to numpy array .
12665	Set the list of fields .
12666	Add one or more fields .
12667	Check that the element types are valid .
12668	The space of the element .
12669	Calculate the centroids and volumes of the grid .
12670	Calculate the angles of each element .
12671	Get the edges of the grid .
12672	Return a pandas dataframe of the plot
12673	Convert an element set to a node set .
12674	Convert a node set to a surface .
12675	Convert a surface to element sets .
12676	Return the metadata for all fields in the model .
12677	Return the metadata for this step .
12678	Make the workdir directories .
12679	Run post - processing .
12680	Run the GMSH algorithm .
12681	Read a history report .
12682	Read a field report .
12683	Convert a list to a string .
12684	Build an equation string .
12685	Return an unordered set of labels .
12686	Parses a response into a JSON object .
12687	Make a request to the API .
12688	Write XYData to file .
12689	Write a field report .
12690	List available components .
12691	Return error message .
12692	Return True if the exception was thrown by the descriptor .
12693	Set the data .
12694	will get the axis mode for the current series
12695	sets the graph ploting options
12696	Creates a class .
12697	Process the datafeeds .
12698	Convert value to float .
12699	Convert a string to a number .
12700	Plot a graph .
12701	Convert a string to unicode .
12702	Make a clean html from a string .
12703	Is the given mime_type?
12704	Parse a domain name .
12705	Convert a domain name into a list of dots .
12706	Make a hash of a token .
12707	Collect the words from the tokenizer .
12708	Index a document .
12709	Invert a hash .
12710	Given a set of hashes return the document frequency .
12711	Return a stream id for the given h .
12712	Return a stream id for the given h .
12713	Convert a ProtoStream into an iterable .
12714	Create a stream item from an entry .
12715	Create a ContentItem from a node .
12716	Read a varint .
12717	Read an A .
12718	Serialize a stream item key .
12719	Convert a streamitem into a key and data .
12720	Change working directory .
12721	Strip prefix from string .
12722	Strip suffix from string .
12723	Check if needle is a subsequence
12724	A basic example of Flask .
12725	Start the server .
12726	Shutdown the server .
12727	Decorator to register a route .
12728	Register an error handler .
12729	Return the content of a file .
12730	Returns a function that returns the error page .
12731	Add a callback .
12732	Resolve the given method and path .
12733	Resolve a non literal route .
12734	Normalize a pattern .
12735	Return the response body .
12736	Add a header .
12737	Set a cookie .
12738	Return the status line .
12739	The Content - Type header .
12740	Get all the values for a given key .
12741	Recursively delete a directory
12742	Return a list of open files .
12743	Show file type stats .
12744	Rejester run
12745	Attempt to fetch data from a work unit .
12746	Get a list of lines from a file .
12747	Return a random adjspecies pair .
12748	Return a random species pair .
12749	Morph a sentence .
12750	Query Goolabs API .
12751	Convert a sentence to HIRagana .
12752	Export a sentence .
12753	Compute the short sum of a review .
12754	List keywords .
12755	Calculate the chrono of a sentence .
12756	Create a stage .
12757	Initialize a list of stages .
12758	Initialize all stages .
12759	Run the reader .
12760	Run all the writers on t_path .
12761	Run the transform on a stream .
12762	Return a new pipeline with the given name .
12763	Create a WSGI application .
12764	Given a list of sentences return a dictionary of equiv_chains .
12765	returns true if all target_ments are all the target_ments
12766	Determines if any of the target_ments matches the target_ments .
12767	Parse the mentions .
12768	Match a stream item .
12769	Create a tagger .
12770	Align a chunk to the xml file
12771	Terminate the child .
12772	Multiply p .
12773	Replace all emails in the given text .
12774	generate strings identified as sentences
12775	make a sortedcollection on body . labels
12776	assemble Sentence and Token objects
12777	Convert HTML entities to unicode .
12778	Create a cleaned file with cleaned data .
12779	Create a newner file .
12780	Convert a string into a lower - case string .
12781	align a chunk with another chunk
12782	Make absolute paths to absolute paths
12783	instantiates the pipeline configuration
12784	Generate a json - style chunk .
12785	Replace invisible elements .
12786	Takes a HTML string and turns it into HTML .
12787	Generate a XML file containing the contents of a stream .
12788	Convert a string into a string .
12789	Main entry point .
12790	Try to load a stage .
12791	Load external stages from a file .
12792	Load all stages from a module .
12793	Initialize a stage .
12794	Read from the given index .
12795	Return True if the href is valid .
12796	Return a list of labels for this page .
12797	yield all file paths under input_dir
12798	Iterate over all tasks .
12799	Get a random row from the table .
12800	Generate tokens from a sentence .
12801	Returns a list of sentences and relations .
12802	Retry function .
12803	return True if okay raise exception if not
12804	Get an S3 bucket .
12805	Convert raw data into a stream .
12806	Get a chunk from a bucket .
12807	Convert a stream_id to Kvlayer key .
12808	Convert a kvlayer key to a stream ID .
12809	Generate a key for a stream item .
12810	Main function .
12811	Build an argument parser .
12812	Add xpaths to the stream .
12813	Convert sentences to character tokens .
12814	Convert a sequence of tokens into character offsets .
12815	Convert character offsets to xpaths .
12816	Add a tag .
12817	Generate a piece of text .
12818	The index of the text element .
12819	Yield all descendants of elem .
12820	Select all the elements of a source .
12821	Select elements by name .
12822	Select elements matching a pattern .
12823	Select an attribute from a source .
12824	Return an iterator of xml_children following elements .
12825	Recursively make pretty - printed XML elements .
12826	Call inkscape command .
12827	Exports a file to a given file .
12828	Convert an SVG to a PDF .
12829	Convert an SVG to a png file .
12830	Return an Environment for the given file path .
12831	Sets up the template file
12832	Render the document using template content .
12833	Save the document content to a file .
12834	Create a document type from a template file .
12835	Fill the contents of an SVG document .
12836	Write the file to disk .
12837	Render the template file .
12838	Parse a string and return a Parser object .
12839	Parse HTML source and return the first element .
12840	Extract HTML fragment fragment from source text .
12841	Insert text .
12842	Insert a node before the node .
12843	Clone this element .
12844	Execute makefile .
12845	Return a string representation of a node .
12846	Insert a child into this element .
12847	Parse the config file .
12848	Get Google API credentials .
12849	Create event datetimes .
12850	Create an event .
12851	Main entry point .
12852	Get the extension of a file .
12853	Add an extension to a file .
12854	Get a temporary file .
12855	Remove files from workdir
12856	Convert csv to json
12857	Replace the content of a file .
12858	Parses the soup .
12859	Check next tag .
12860	Create an italic tag .
12861	Create a strong tag .
12862	Create an underline tag .
12863	Parse attributes from tag .
12864	Remove line breaks from a string .
12865	Parse a href from an href .
12866	Parse an attribute .
12867	Translates a dictionary into a dictionary .
12868	Return the object as a JSON string .
12869	Find all files matching a regular expression .
12870	Concatenate multiple strings .
12871	Yields True if part starts with the given part .
12872	Return True if part contains part .
12873	Return the length of a string .
12874	Iterate over a boolean .
12875	Iterate over a sequence .
12876	Perform a lookup on a table .
12877	Replace characters in svg code .
12878	Check if svg_file is a string or svg
12879	Merge two svg files .
12880	Merge multiple PDFs into a single file .
12881	Embeds a font file into an SVG tree .
12882	Embeds a font into an SVG file .
12883	Check that the input is valid .
12884	Check that the function is called .
12885	Recursively iterates over the input and outputs the output .
12886	Create an input from a template .
12887	Recursively iterate over the input .
12888	Convert an object to a string .
12889	Convert an object to a number .
12890	Convert an object to a boolean .
12891	Serialize an AST .
12892	Change the encoding of a file .
12893	Save text into a QR Code .
12894	Launch an input .
12895	Call a command with the given arguments .
12896	Convert a latex file to a PDF file .
12897	Return a list of all possible options for the given operation .
12898	Transform a geometry to another .
12899	Create a Geometry object .
12900	Explicitly expand ranges .
12901	Return the intersection of this envelope .
12902	Return True if the intersection intersects the other .
12903	The polygon of the ellipsoid
12904	Construct a DataFrame from ZNM
12905	Write the dataframe to a CSV file .
12906	Return a DataFrame with rows where condition is True .
12907	Return the table at the given nucleotides .
12908	Return the intersection of the table .
12909	Return a table where the table is not in the given table .
12910	Return a subset of the odd elements .
12911	Return a new RDD with only odd elements .
12912	Return a new DStream with only the odd elements .
12913	Compute the error table .
12914	Calculate the RSE error .
12915	Binding energy .
12916	S2n .
12917	S1N .
12918	S2p .
12919	S1p .
12920	Return a table of derived columns derived from this table .
12921	Execute a function on the database .
12922	Derive a key from the master_password .
12923	Boot a new database .
12924	Search for domains .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract HBS statements from a HBS file .
12928	Return the VSI prefix of a path .
12929	Get the SID of the project .
12930	Main entry point .
12931	Initialize logging .
12932	Update a file .
12933	Return a dictionary of all available drivers .
12934	Determine the driver for a given path .
12935	Convert geom to raster
12936	Rasterize an raster
12937	Open raster from file .
12938	Create raster from bytes .
12939	Copy raster to dest
12940	Get the configuration options .
12941	Create a raster
12942	Sets the spatial transform .
12943	Read data as an array .
12944	Envelope envelope .
12945	Driver driver .
12946	Return a new raster .
12947	Return the masked array as a numpy array .
12948	The nodata .
12949	Read a raster .
12950	Resample the image .
12951	Save the image to disk .
12952	Sets the spatial projection .
12953	Warp the raster to another .
12954	Calculate the chunk length and the enclosing enclosure .
12955	Determine the alphabet to use .
12956	Encode a chunk .
12957	Convert a chunk to a long integer .
12958	Get a chunk from the data .
12959	Decorator to cache a function .
12960	Return a regexp for a resource .
12961	Normalize date format .
12962	Detect the timezone .
12963	Return a dictionary representation of the Swagger object .
12964	Activate pdb hook .
12965	Return a pretty - printed message .
12966	Run a job handler .
12967	Run a job handler .
12968	Start a worker thread .
12969	Sets the classification .
12970	Send a message to the queue .
12971	Turn on a light .
12972	Turn on switch .
12973	Turn on a device .
12974	Turn off a device .
12975	Send messages to the queue .
12976	Send a reliable message .
12977	Create an adapter object .
12978	Sets the nature of this Order .
12979	Update self . def_dict
12980	Resets the default values .
12981	Set config files .
12982	Iterate over all option values .
12983	Iterate over the default values .
12984	Create config file .
12985	Update a configuration dictionary .
12986	Read a TOML configuration file .
12987	Read all config files and return them as a dict
12988	Return the names of the command line options .
12989	Return a list of sections for this command .
12990	Solve options for a command .
12991	Add options to a parser .
12992	Build the argument parser .
12993	Parse command line arguments .
12994	Run zsh command .
12995	Completes a zsh command .
12996	Generate bash command .
12997	Execute bash completion
12998	Start a new master .
12999	Called when a connection is established .
13000	Called when a line is received .
13001	Called when the worker is lost .
13002	Called when a job is loaded .
13003	Called when a response is received .
13004	Close this job .
13005	Run a list of jobs .
13006	Close the server .
13007	Change all waiters .
13008	Add a result .
13009	Block until the task has changed .
13010	Load a single job .
13011	Mark this job as finished .
13012	Add a result .
13013	Cancel all pending jobs .
13014	Block until all active jobs are done .
13015	Distribute the jobs to the scheduler .
13016	Add a new job set .
13017	Retrieves a job .
13018	Return the job s return value .
13019	Add a result .
13020	Called when a job is finished .
13021	Cancel all pending requests .
13022	Remove duplicates from a list .
13023	Return True if the given object matches a regular expression .
13024	Return a list of all entries .
13025	Get the region name .
13026	Filter entries according to filters .
13027	Get a host name
13028	Create an instance from a dictionary .
13029	Get the value of an attribute .
13030	Sort entries by attribute .
13031	Represent the table as a string .
13032	Create an instance from a Boto3 instance .
13033	Return True if the filter matches the filter .
13034	Return a string representation of the IP address .
13035	Renders a table .
13036	Add a timestamp to an event dictionary .
13037	Setup logging .
13038	Create a logger .
13039	Create a celery app .
13040	Get information about a worker .
13041	Delete a worker .
13042	Create a switch option .
13043	Return configuration options .
13044	Set a configuration value
13045	Handler for config commands
13046	Create zsh files .
13047	Render a list of columns .
13048	Render a row .
13049	Render a table .
13050	Prepares all the rows in a table .
13051	Color a number .
13052	Get a color hash from a string .
13053	Return a random color .
13054	Prompt user for input .
13055	Check if credentials are valid .
13056	Check if a token is valid
13057	Decorator to ensure a token is valid .
13058	Check if a process is running .
13059	Dynamically import a module .
13060	Returns the host s IP address .
13061	Make a request .
13062	Prepare POST parameters .
13063	Starts a dna server .
13064	Render a template .
13065	Stream a command into stdin .
13066	Stream a list of commands .
13067	Stream a list of commands .
13068	Return a network days between two dates .
13069	Get the path to a command .
13070	Build the SSH command .
13071	Build scp command .
13072	Copy entries to remote_path .
13073	Copy local paths to remote_path .
13074	Run an SSH command on the given hosts .
13075	Connect to an SSH server .
13076	Load a LsiProfile from a file .
13077	Create LsiProfile from command line arguments .
13078	Add a relationship .
13079	Return a list of all the parts of a reltype .
13080	Load relationships .
13081	Add a part .
13082	Load a Part by name .
13083	Find the extension for a given name .
13084	Given an element parse out the proper ContentType
13085	Parse a string and return the parsed tree .
13086	Builds the JWT .
13087	Assign a force field .
13088	Find max and NPNP parameters
13089	Make force field parameters .
13090	Convert to a byte stream .
13091	Get all segments matching a name
13092	Copy a directory .
13093	Open a bucket .
13094	Upload a directory to S3 .
13095	Upload a file to a bucket .
13096	Upload an object to a bucket .
13097	List all filenames in a directory .
13098	List all directories in a directory .
13099	Create a prefix from a directory .
13100	Delete a file from the bucket .
13101	Ensure that the user is logged in .
13102	Return the speaker s loud .
13103	Delete a directory .
13104	Return the home URL .
13105	Decorator to silence a function without namespace .
13106	Display the project home breadcrumb .
13107	Display a breadcrumb for the project home page .
13108	Calculate the energy of each AMPAL object .
13109	Calculate the internal energy of an AMPAL object .
13110	The number of hotspots in the live data .
13111	Get a token from the given host and password .
13112	Upload a product to a git repository .
13113	Determine if a Travis event should be skipped .
13114	Purge a single key .
13115	Register a build .
13116	Confirm build .
13117	Recursively update a dictionary .
13118	Main entry point .
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Split a path into parts .
13122	Return the full path and part of a file .
13123	Determine the editor to use .
13124	Process the file content .
13125	Generate a chart
13126	Generate HTML for a chart .
13127	Serialize a data object into a chart .
13128	Patch json data
13129	Convert json to html
13130	Convert a dictionary into a pandas DataFrame .
13131	Write html to a folder .
13132	Create a class from a dataframe .
13133	Encode the fields .
13134	Link a user to a GitHub user .
13135	Infer the tarball url
13136	Create an app .
13137	Delete an app .
13138	Decorator to create an attribute on an object .
13139	Generate a binary string .
13140	Generate a random IPv4 address .
13141	Generate a random date .
13142	Returns a Session object .
13143	Make an API request .
13144	Create a build .
13145	Check the status of a build .
13146	Generate a sequence from a prefix .
13147	Memoize a function .
13148	Decorator to ensure a function is unique .
13149	Register all subcommands .
13150	Return the root arg parser .
13151	Return the description of this function .
13152	Return the help string for this command .
13153	Run a sub - command .
13154	Encode the data .
13155	Returns a pandas dataframe of the athlete .
13156	Get the last n times of each file .
13157	Retrieve the activity list from the API .
13158	Retrieve activity data from the API .
13159	Returns the URL for an athlete .
13160	Returns the URL for an activity .
13161	Get a request from the given endpoint .
13162	Create a build .
13163	Return a URL with the given regex .
13164	Get a title .
13165	Return a random person .
13166	Get a random name .
13167	Render the chart .
13168	Set the dataset .
13169	Render the chart .
13170	Validate chart type
13171	Render the URL to the API .
13172	Open a file in a browser
13173	Save the image to a file .
13174	Return a URLopen to the server .
13175	Return the image as an Image object .
13176	Write the content to a file .
13177	Returns the checksum of the template .
13178	Returns a decimal number .
13179	Decorator for class methods .
13180	Return a dictionary of protected claims .
13181	Return the JWKS as a dictionary .
13182	Unpack a client metadata statement .
13183	Pack a metadata statement .
13184	Evaluate the metadata statement .
13185	Validate and update the usage statement .
13186	Add sms_dict to the request .
13187	Parse command line arguments .
13188	Add command line arguments .
13189	Apply logging options to log_files .
13190	Log a message at verbose level .
13191	Return a mapping of letters to letter numbers .
13192	Iterate over the words in a word .
13193	Convert class name to AMP class name .
13194	Return a list of points in the given time series .
13195	Get the last value from a timeseries .
13196	Validate a page number .
13197	Get a page of items from an iterator .
13198	Change the mode of a file .
13199	Create an internal signing service .
13200	Create a signing service .
13201	Signs a message using a signature .
13202	Create a new object
13203	Update a metadata statement .
13204	Update the signature
13205	Yield bundle contents .
13206	Create a bundle from a dictionary .
13207	Returns all urls for the given asset type .
13208	Return HTML tags for a given asset type .
13209	Return HTML tags for all asset types .
13210	Convert url to protocolise
13211	Find all links in a given URL .
13212	Connect to AMP server .
13213	Returns the names of the modules .
13214	Import the service modules
13215	Convert a date string into a list of dates .
13216	Return a copy of the document with the specified fields .
13217	Map a list of datetime objects .
13218	Print a cursor to stdout .
13219	Print the cursor to stdout .
13220	Given a list of do_tasks and dep_graph return a list of all the tasks that do_tasks .
13221	Add default projects to a project .
13222	Add default atypes to a project .
13223	Add default sequences .
13224	Add a shot to a project .
13225	Called when a project has been saved .
13226	Called when a sequence is created .
13227	Create all tasks .
13228	Pre - connect function .
13229	Send a packet .
13230	Get a configuration value from a section .
13231	Decorator to add a function to an event .
13232	Decorator to add a Cinder to an event .
13233	Decorator to add a function to neutron .
13234	Decorator to add a glance event .
13235	Decorator to add a function to an event .
13236	Decorator to add a function to Keystone .
13237	Decorator to add a function to an event .
13238	Add a factory .
13239	Remove a factory .
13240	Connect to a factory .
13241	Receive data from a connection .
13242	Disconnect a connection .
13243	Calls a remote command .
13244	Called when multiplexed AMP connection is established .
13245	Called when the connection is received .
13246	Called when data is received .
13247	Send data to the remote server .
13248	Called when the connection is lost .
13249	Retrieves the local protocol for the given connection identifier .
13250	Called when remote data is received .
13251	Disconnect a remote connection .
13252	Centering a string .
13253	Print the clock on the right .
13254	Return a version number .
13255	Identify the unit framework .
13256	Assert that value is convertible to target_unit .
13257	Pad data_to_pad .
13258	Pads data to block_size .
13259	Sign a request using self signer .
13260	Gather metadata statements for a given context .
13261	Pretty print a word .
13262	Create an argument parser .
13263	Main entry point .
13264	Receive data from the packet .
13265	Unregistered type event handler .
13266	Create a remote function stub .
13267	Ping a remote call .
13268	Return a regex for the command .
13269	Convert a string into an amp list .
13270	Convert a list into a string .
13271	Verify that the metadata statement is valid .
13272	Parses a JWKS response .
13273	Dump a database to a temporary file .
13274	returns a list of all databases on this server
13275	Get all local files from a directory .
13276	Sync a folder to S3
13277	Decorator for views that require user_tokens
13278	Login to the user .
13279	Build a command .
13280	Creates a free - only cookie .
13281	Load the data from a JSON file .
13282	Create a JWT from a JWT .
13283	Create a JWT signed by signing keys .
13284	Wrap a function into a library .
13285	Recursively deserialize a testdir
13286	Main entry point .
13287	Get the score of a letter .
13288	Calculate the score of a word .
13289	Generate a word list .
13290	Determine if a word is valid .
13291	Main entry point .
13292	Main entry point .
13293	Process a string .
13294	Get the command and responder function .
13295	Parse request values from a request .
13296	Runs the response .
13297	Write a response to the transport .
13298	Called when a connection lost .
13299	Builds the protocol for the given address .
13300	Convert JWKS to KeyJar .
13301	Load a KeyJar from a JSON string .
13302	Process an event .
13303	Process a message .
13304	Process an event .
13305	Process a glance customer process .
13306	Process a message .
13307	Process a message .
13308	Process a message .
13309	Serve the server .
13310	Print msg to stdout .
13311	Print a message to stderr .
13312	Registers a Command class .
13313	Registers a command class .
13314	Convert the value to a string .
13315	Parse the argument from a string .
13316	Update the completer dictionary .
13317	Connect to Ternya
13318	Initialize the connection .
13319	Import the service modules .
13320	Initialize the neutron consumer .
13321	Start the cinder consumer .
13322	Start the neutron consumer .
13323	Start the glance consumer .
13324	Initialize heat consumer .
13325	Enables a notification for an OpenStack component .
13326	Get song info .
13327	download a song
13328	Execute the instruction .
13329	Load a name by name
13330	Calls a function in the stack
13331	Dump a MySQL database to a temporary file .
13332	Render a Dita code .
13333	Exit application .
13334	Run the application .
13335	Change working directory .
13336	Copy the contents of src to dst .
13337	Run the debugger .
13338	Get the mtime of a file
13339	Check if a file item has been changed .
13340	Synchronize the database .
13341	Delete all stored files .
13342	Scrape a website .
13343	Download the image .
13344	Check if image has changed
13345	Returns a template . Node subclass .
13346	Find the caller s source code .
13347	Returns the defining component of a pe_pe .
13348	Main entry point .
13349	Find a symbol by name and kind .
13350	Determine whether a PE is contained in a PE .
13351	Determine if PE is global .
13352	Get the data type name of a data type .
13353	Get a list of related attributes .
13354	Create an Enum object .
13355	Create a function that returns a function .
13356	Create an external entity .
13357	Create a function from a metamodel .
13358	Convert a constant into a constant
13359	Create an operation method for a metaclass .
13360	Create a property for a derived attribute .
13361	Create a metaclass .
13362	Make a simple association
13363	Create a linked association .
13364	Create an association function .
13365	Recursively create a component .
13366	Perform a call .
13367	Send a message to the server .
13368	Reject a request .
13369	Raise an exception .
13370	Wait for a call to the queue .
13371	Establish a worker .
13372	Dispatch a reply .
13373	Guess the type name .
13374	Deserialize a value .
13375	r
13376	r
13377	Get a feature by content_id .
13378	Get one or more documents .
13379	Put items into this feature .
13380	Delete document .
13381	Delete all documents in the index
13382	Delete the index .
13383	Iterate over a set of keys .
13384	Iterate over IDs matching the given key_ranges .
13385	Scan a prefix for features .
13386	Scan a prefix for a prefix .
13387	Perform a fulltext scan .
13388	Iterate over the fulltext scan IDs .
13389	Iterate over keywords .
13390	Iterates over keywords matching a query .
13391	Iterate over scan ids
13392	Return a list of feature names .
13393	Creates ES filters for key ranges used in scanning .
13394	Create the index
13395	Create the field type mapping .
13396	Retrieve the field mappings . Useful for debugging .
13397	Retrieve the field types . Useful for debugging .
13398	Creates a disjunction for keyword scan queries .
13399	Returns the number of bytes in fc_dict
13400	Count the number of bytes that satisfy a filter .
13401	Return a pretty string representation of features .
13402	Process command line options .
13403	Default formatter .
13404	Convert a Link to a string .
13405	Return a pretty representation of the unique identifier .
13406	Check uniqueness constraint .
13407	Check integrity of a link .
13408	check the integrity of a subtype
13409	Return a function that yields features .
13410	Convert val to bytes .
13411	Put items into kvl .
13412	Delete all tables .
13413	Iterate over the specified keys .
13414	Iterate over the keys in the table .
13415	Scan an index by value .
13416	Index a prefix .
13417	Index prefix and return key .
13418	Apply a prefix to the index .
13419	Define an index .
13420	Put index into kvl .
13421	Put value into kvl .
13422	Generator for indexing keys .
13423	Get an index by name .
13424	Checks if pypi_package_name is valid
13425	Add a language to a language .
13426	Returns the type name of the data type
13427	Get the refered attribute
13428	Build a core type element .
13429	Build an XML Element type element .
13430	Builds a struct type .
13431	Builds a simple type element .
13432	Build the type of a datatype
13433	Build an XML element .
13434	Builds an XML element .
13435	Builds a XML Schema from a MOC element .
13436	Pretty print an XML string .
13437	Fetches the bitcoins from the website .
13438	Set positional information .
13439	Decorator to track production information .
13440	r
13441	r
13442	r
13443	r
13444	r
13445	r
13446	r
13447	r
13448	r
13449	r
13450	r
13451	r
13452	r
13453	Create a queue .
13454	Delete a queue
13455	List queues .
13456	List all exchanges .
13457	Purge a queue .
13458	Create a message .
13459	Read the image from disk .
13460	Return True if the text is visible .
13461	Main entry point .
13462	Serialize a value to a string .
13463	Serialize an association .
13464	Serialize a class .
13465	Main entry point .
13466	Return a list of elements matching the query .
13467	Partition a collection .
13468	Main function .
13469	Returns the context for the bidi context .
13470	Find the relationship between two objects .
13471	Make sure that the target_link and target_keys are set .
13472	Compute lookup key for a given instance .
13473	Compute index key .
13474	Return the type of an attribute .
13475	Create a new object .
13476	Iterate over all available metaclasses .
13477	Define a class .
13478	Send a message to the given socket .
13479	Receive a socket .
13480	Print dead code .
13481	Parse email addresses .
13482	Decorator .
13483	Return a dictionary with the RPC spec as a dictionary .
13484	Normalize postcode middleware .
13485	Return the next value .
13486	Accepts a Sysystem instance .
13487	Recursively accept C data .
13488	Accept an ephemeral .
13489	Get the current brightness .
13490	Match pattern .
13491	Find a match in the document .
13492	Returns a QTextEdit for the current character position .
13493	Called when cursor position changes .
13494	Return the exc_info as a tuple
13495	Create an interactive Qt hook .
13496	Get a mapper by name .
13497	Decorator to add a URL pattern .
13498	Decorator to add a URL .
13499	Add a pattern to the data store .
13500	Add a function .
13501	Calls the given url
13502	Execute this widget .
13503	Called when the cursor is pressed .
13504	Called when the cursor is pressed .
13505	Get the previous history of a given substring .
13506	Return the next item in the history .
13507	Handle a reply message .
13508	Check if the history is locked .
13509	Return the history at the given index .
13510	Set the history .
13511	Store the current state of the input buffer .
13512	Called when time to close
13513	Build the Record Collection from a pandas DataFrame .
13514	Convert a collection to Pandas DataFrame .
13515	Bulk spin function .
13516	Set the attributes of the object .
13517	Subscribe to all topics .
13518	Log a message .
13519	Sort a list of lists .
13520	Iterate over a remote reference .
13521	Convert a notebook to a new notebook
13522	Determines the platform platform .
13523	Get the importer for a path_item .
13524	Create a StringIO object .
13525	Parse a version string .
13526	Determine whether a setuptools requirement is overridden .
13527	Add a distribution .
13528	Find all the installed plugins .
13529	Return the path to a cache file .
13530	Create a EntryPoint from a string .
13531	Return parsed pkg_info .
13532	Compute the dependencies for this package .
13533	Parse a filename and return its name and format .
13534	Collapse leading ws into a string
13535	Disables the text edit widget .
13536	Update the text edit widget .
13537	Return the current text cursor .
13538	Updates the current item .
13539	Register the admin site .
13540	Return a list of all disk partitions .
13541	Returns a tuple of cpu times .
13542	Returns a list of cpu times per CPU .
13543	Read raw data from stdin .
13544	Read raw data from stdin .
13545	Updates tab bar visibility .
13546	Create a new tab with the current kernel .
13547	Add a new tab with a frontend .
13548	Add a menu action .
13549	Create a dynamic magic function .
13550	Populate the menu .
13551	Closes the window .
13552	Generate a random password .
13553	Checks the given passphrase against the given passphrase .
13554	Returns the HTML for ajax toggle button .
13555	Return an indented short title .
13556	Returns a dictionary with the editable booleans .
13557	Toggle boolean value
13558	Check if the current user has permission on the current object .
13559	Check if the user has permission to delete the object .
13560	Add all the children of a given level .
13561	Make a binary tree .
13562	Submit a set of jobs .
13563	Validate a tree .
13564	Make color table .
13565	Return a copy of this color scheme .
13566	Add a new color scheme .
13567	Set the active color scheme .
13568	Return the path to the home directory .
13569	Handle incoming messages .
13570	Handles incoming requests .
13571	Wait for the kernel to be running .
13572	Set the style .
13573	Get the format for a given token .
13574	Returns the format for the given token .
13575	Returns a QTextCharFormat object for the given token .
13576	Find a command in PATH .
13577	Normalize a path .
13578	Check that a namespace is a package namespace .
13579	Check entry point .
13580	Is the last blank?
13581	Is the last two blank lines?
13582	Transform a line of POSIX system from a line .
13583	Transform a line of assignments to IPython .
13584	Transform a legacy prompt to a legacy prompt .
13585	Transform a line into a prompt .
13586	Push the given lines into the stack .
13587	Return True if there is more than one line .
13588	Find the indentation of a line .
13589	Store the given lines .
13590	Reset the source .
13591	Process cell magic lines .
13592	Append lines to cell mode .
13593	Transform a single cell .
13594	Push lines to IPython input .
13595	Initialize the observers .
13596	Post a notification .
13597	Return the set of observers for a notification .
13598	Register a callback function .
13599	Create a new job .
13600	Update the status .
13601	Print the number of jobs in a group
13602	Flushes a group .
13603	Update the status of the Compound .
13604	Display the status of the component .
13605	Initialize the background job .
13606	Insert a value at the given index .
13607	Return a shallow copy of the file .
13608	Declare a special variable .
13609	Declare a list variable .
13610	Declare a set variable .
13611	Set the current working directory .
13612	Move the route to the given state .
13613	Calculate the energy of a given state .
13614	Return a dictionary with default values .
13615	Check to see if the table is correct
13616	Convert a list to a dictionary .
13617	Render an expression .
13618	Print a warning message .
13619	Parse a YAML configuration file .
13620	Convert a list of rows into a table .
13621	Create a link .
13622	Generate javascript file .
13623	Add CSS file to CSS file .
13624	Return an HTML tag for an image .
13625	Subtract a value from the value .
13626	Multiply a value .
13627	Divide value .
13628	Modify value .
13629	Return the verbose name of the model .
13630	Split a line by pattern .
13631	Add options to the parser .
13632	Add a builtin property .
13633	Remove a builtin function .
13634	Deactivate the Builder .
13635	Find the full name of a requirement .
13636	Yield all links in the page .
13637	Turn a string into a list of strings .
13638	Run coverage script .
13639	Add an action .
13640	Append an action code to the parser .
13641	Parse command line .
13642	Print the help message for the coverage package .
13643	Handles the help command .
13644	Validate arguments .
13645	Execute the script .
13646	Print debug information .
13647	Unserialize an object .
13648	Set the display hook .
13649	Log the given function and exception information .
13650	Return True if url is a valid URL .
13651	Validate a URL .
13652	Validate a container .
13653	Retrieve a value from the global namespace .
13654	Return a list of n random ports .
13655	Create a remote function .
13656	Create a parallel function .
13657	Map multiple sequences .
13658	Get the tail of the current readline .
13659	Set the autoindent value .
13660	Initialize logstart
13661	Save sys module state .
13662	Restore sys module state .
13663	Register a post - execute function .
13664	Create a new main module .
13665	Cache a module s main namespace .
13666	Initialize the user namespace .
13667	Return a list of all namespace references .
13668	Reset the state machine .
13669	Delete a variable
13670	Reset all variables that match a regular expression .
13671	Push a set of variables .
13672	Return the name of an object .
13673	Extract a property from a property .
13674	Find and return a Struct object .
13675	Inspect an object using the specified method .
13676	Initialize the history manager .
13677	Called when an exception occurs .
13678	Show the traceback of an exception .
13679	Print a traceback .
13680	Show the traceback of an exception .
13681	Prepare the readline .
13682	Completes the given text .
13683	Add a completer to the completer .
13684	Set the frame of the completer frame .
13685	Run a line magic .
13686	Find a magic magic .
13687	Define a macro .
13688	Run a command .
13689	Auto rewrite input .
13690	Return a dictionary with the given names .
13691	Parse a set of expressions .
13692	Evaluate expression .
13693	Execute a file .
13694	Run a cell magic .
13695	Run a single cell .
13696	Run the given AST nodes .
13697	Enable a pylab .
13698	Expand a variable into its locals .
13699	Create a temporary file .
13700	Extract lines from the given range .
13701	Find user code for target .
13702	End the session .
13703	Publish a message .
13704	Send a message .
13705	Decorator to skip a test .
13706	Decorator to specify a test failure .
13707	Mark a function as deprecated .
13708	List all profiles in a directory
13709	Return a list of all installed profiles .
13710	Find a dist .
13711	Run a command .
13712	Return the path to a filename
13713	Return the next line .
13714	Send data to the child process .
13715	Send a VINTR command .
13716	Recompile unicode regexes as byteses .
13717	Expect a pattern .
13718	Perform an expect loop .
13719	Recompile bytes regexes as unicode regexes .
13720	Search the string using the search .
13721	Search the buffer and return the index .
13722	Create a log listener .
13723	Unpack a directory .
13724	Print a message to stdout .
13725	Return the last error .
13726	Execute a command and return its output .
13727	Tries to find the source for a given file .
13728	Return a sorted list of all arcs in the file .
13729	Return a list of all arcs that are missing .
13730	Return a list of all arcs that are not in the branch .
13731	Get branch lines .
13732	Return the total number of branches .
13733	Return a dictionary with all branches that are missing .
13734	Compute branch stats .
13735	Set the precision .
13736	Returns the percentage of coverage covered by this block .
13737	Returns a string with the PC covered by this PC .
13738	Highlight a list of strings .
13739	Highlight the given string .
13740	Highlight keywords .
13741	Run a function on the file .
13742	Remove quotes from a string .
13743	Indent a string .
13744	Return a marquee .
13745	Convert a string to a string
13746	Recursively dedent text .
13747	Wrap the given text into lines .
13748	Determine the optimal size of a list .
13749	Return the value at i .
13750	Compute a matrix of items .
13751	Return a list of fields with the given fields .
13752	Build the kernel argv .
13753	Initialize the SSH connection .
13754	Pretty print an object .
13755	Print object to stdout .
13756	Get the mRO name of an object .
13757	Default print function .
13758	Factory function for pprinter function .
13759	Return a function that returns a pretty printer .
13760	Print super class .
13761	Print compiled regex pattern .
13762	Print the name of an object .
13763	Print the function name .
13764	Print exception information .
13765	Decorator for a type .
13766	Return a Deferred for a given type .
13767	Write text to the output buffer .
13768	Add a breakable to the stack .
13769	End a group .
13770	Flush the buffer .
13771	Pretty print the object .
13772	Add exception colors .
13773	Writes a row into the spreadsheet .
13774	Get the text from the win32 clipboard .
13775	Get the contents of the OSX clipboard .
13776	Get text from the clipboard .
13777	Return the path to the build directory .
13778	Replace all keys in a dictionary .
13779	Extract dates from an object .
13780	Recursively convert datetime objects to datetime
13781	Convert obj to datetime .
13782	Convert obj to JSON
13783	Check if site directory is valid .
13784	Write a script to the install directory .
13785	sleep the number of times
13786	Create an argument parser .
13787	convert . pyx extensions to . c
13788	Main function .
13789	Build a PackageFinder object .
13790	Change log level .
13791	Default logging handler .
13792	Handle changes .
13793	Print help for aliases .
13794	Print help for flags .
13795	Print all subcommands .
13796	Print help .
13797	Print examples .
13798	Merge a dictionary into the config .
13799	Initialize a subcommand .
13800	Flatten the flags into a dictionary .
13801	Parse command line arguments .
13802	Load a config file .
13803	Generate configuration file .
13804	Downsample an array .
13805	Formats an info .
13806	Write a message to stdout .
13807	Called when config changes .
13808	Return the help for the class .
13809	Get the help for a trait .
13810	Generate a section for a class .
13811	Clears the instance .
13812	Return an instance of this class .
13813	Format a test failure .
13814	Displays crash handler .
13815	Flush the queue .
13816	Start the channel .
13817	Read data from file .
13818	Read data from a file .
13819	A subprocess handler .
13820	Split a string into a list of tokens .
13821	Compress a Dhistogram by removing duplicates .
13822	Class decorator .
13823	Record a magic magic function .
13824	Decorator to mark a method magic .
13825	Create a decorator for a magic function .
13826	Return a dictionary of the docstrings of the lsmagic functions .
13827	Registers the given magic objects .
13828	Register a function .
13829	Formats a latex string .
13830	Parse command line options .
13831	Add a default option .
13832	Open IPython notebook .
13833	Create a task with a callable .
13834	Get task info by label
13835	Retrieve a function from the info dictionary .
13836	Calculate the next run .
13837	Submit the task .
13838	Run the task .
13839	Run the task asap .
13840	Run a task .
13841	Run the given callable .
13842	Searches the config file for security .
13843	Create an IPython kernel .
13844	Execute test steps .
13845	Create an interrupt event .
13846	Main thread .
13847	Filters a namespace by name and type .
13848	List all objects in a namespace .
13849	Raise ValueError if arguments are mutually exclusive .
13850	Draw a matplotlib figure .
13851	Send all the figures to the console .
13852	Send a matplotlib figure .
13853	Load an IPython extension .
13854	Unload an IPython extension .
13855	Generate a list of ports .
13856	Initialize the notebook .
13857	Handles SIGINT signals .
13858	Confirm exit .
13859	Shutdown kernels .
13860	Generate market prices .
13861	Replace multiple strings in a dictionary .
13862	Renders the given name .
13863	Launch a kernel .
13864	Create a zip file .
13865	Fix version information .
13866	Return True if the object is mappable .
13867	Get a partition from a sequence .
13868	Monkey patch pyxpect .
13869	Run a source file .
13870	Run a source .
13871	Generate coverage report .
13872	Generate XML file .
13873	Fetch a file from the super - computer .
13874	Reduces the frequencies of a frequency list
13875	Compute n - digit frequency frequency freq file .
13876	Convert a txt file to a number of digits .
13877	Calculate the frequency of a number of digits .
13878	Calculate the frequency of two digits .
13879	Calculate the frequency frequencies for a given number of digits .
13880	Plot two digit frequencies .
13881	Plot frequency frequencies in pi .
13882	Print debugx .
13883	Reverse view .
13884	Determine if a class is private .
13885	Create a test suite .
13886	Debug script .
13887	Debug a test script . src is a string as a string .
13888	Debug a module .
13889	Get a hash of the hashroot .
13890	Compress a hashroot
13891	Return a list of all files matching glob pattern .
13892	Allow the given record .
13893	Determine if a record matches a pattern .
13894	Format an error .
13895	Embed a shell .
13896	Main loop .
13897	Return a new csv writer and meta data .
13898	Prepare the locale directories .
13899	Create POEntry objects .
13900	Write the header to a po file .
13901	Subscribe to a user .
13902	Initialize the parser .
13903	Run a python module .
13904	Run a python file .
13905	Make source code from a python file .
13906	Make code from a Python file .
13907	Convert an item_matrix into an HTML table .
13908	Set the current value .
13909	Cancel tab completion .
13910	Select the index of a given row .
13911	Select the top up to the bottom .
13912	Selects down down the bottom down .
13913	Select the left of the left .
13914	Select the right index .
13915	Update the list .
13916	Calculate frequency of word frequency
13917	Print a word frequency list .
13918	Return a string representation of the object .
13919	Write to a file .
13920	Validate pin .
13921	Send a shared pin .
13922	Delete a shared pin .
13923	Send a pin .
13924	Delete a pin .
13925	Subscribe to a topic .
13926	List all subscribed topics .
13927	Decorator to monitor a function .
13928	Begin the progress monitor .
13929	Start a task .
13930	Context manager for submonitor .
13931	Update progress monitor .
13932	Create a new progress monitor .
13933	Mark the task as done .
13934	Display a page .
13935	Ensure that the package is correct .
13936	Load a configuration file into a Config object .
13937	Load the config file .
13938	Read the config file as a dictionary .
13939	Load a flag from the config
13940	Return a list of unicode arguments .
13941	Load a configuration file .
13942	Load configuration from argv .
13943	Parse command line arguments .
13944	Convert parsed data into a Config object .
13945	Find a module by name
13946	Register a callback function .
13947	Called when the process starts .
13948	Notify the stop callback .
13949	Send SIGINT to the bot .
13950	Return command line arguments .
13951	Start the dispatcher .
13952	Send a remote file .
13953	fetch remote from remote
13954	Return the number of engines .
13955	Start the engines .
13956	Submit a WinHPC job .
13957	Return a context dictionary .
13958	Parse the job id from the output .
13959	Write the batch script to disk .
13960	Execute a batch script .
13961	Create context menu .
13962	Append a JPG to the list .
13963	Append png to the screen .
13964	Append an svg .
13965	Add an image .
13966	Copies an image to the clipboard .
13967	Retrieves an image .
13968	Inserts an image .
13969	Insert an SVG .
13970	Save an image .
13971	Called when a timer is changed .
13972	Initialize the environment .
13973	Auto - rewrite input .
13974	Ask zmq to exit .
13975	Sets the next input .
13976	Read a config file .
13977	Get a list of values from a section .
13978	Get a list of values from a section .
13979	Parse environment variables .
13980	Set attributes from keyword arguments .
13981	Load configuration from a file .
13982	Set an attribute from a config option
13983	Expand a path .
13984	Defines a list of delimiters .
13985	Split a line .
13986	Return a list of keywords that match the global namespace .
13987	Return a list of attributes matching the given attribute .
13988	Called when a splitter is changed .
13989	Return a list of files matching the given text .
13990	Return a list of aliases matching the given text .
13991	Return a list of matches for the given text .
13992	Return the default arguments for the given object .
13993	Complete the text .
13994	Complete the line .
13995	Match one or more tests .
13996	Return a list of records matching the given filter .
13997	Extract a subdict from a record .
13998	Is the prompt?
13999	Write output prompt .
14000	Write format data to stdout .
14001	Log output .
14002	Raises InvalidOperationException if the object is not free .
14003	Convert a mysql timestamp to a Timestamp .
14004	Called when an event is changed .
14005	Dispatch a control message .
14006	Dispatch a message .
14007	Start the shell .
14008	Run one iteration .
14009	Publish a pyin .
14010	Abort a request .
14011	Send a message to the server .
14012	Return the topic name .
14013	Called when shutdown is shutdown .
14014	Add a new context to the stack .
14015	Remove modules from the stack .
14016	Return absolute path .
14017	Return True if filename is a file - like object .
14018	Return True if object is a class .
14019	Return True if path is a package .
14020	Extract a package name from a file .
14021	Convert a label to a string .
14022	Return a function that matches a regular expression .
14023	Return a copy of the decorated function .
14024	Creates a class with the given module .
14025	Returns a tuple of CPU times .
14026	Get the command line for this process .
14027	Return a list of open files .
14028	Return a list of connections for the process .
14029	Check if a user has a group .
14030	Resolve a class .
14031	Return the percentage of the current usage .
14032	Memoize a function .
14033	Mark a function as deprecated .
14034	Login to Google .
14035	Extract GDocs key from the URL .
14036	Ensure the temp path exists .
14037	Remove temp files from the temp directory .
14038	Upload a file to the spreadsheet .
14039	Synchronize the source and metadata .
14040	Download data from GOCS .
14041	Upload the po files to the local filesystem .
14042	Delete all the files from the temp directory .
14043	Create a new Qt console
14044	Check if url is accessible
14045	Return True if the given URL has the given contents .
14046	Get the response code from the given URL .
14047	Compare the content type of a URL .
14048	Compare the response code .
14049	Validate data .
14050	Clear the output .
14051	Find the full path to a command .
14052	Return a list of CodeUnit objects .
14053	Return the root name of the module .
14054	Return the source file for this code .
14055	Determine if the file should be a python file .
14056	Return the total number of seconds .
14057	Return the result .
14058	Block until all the messages are ready .
14059	Get the metadata for the job .
14060	Abort the task .
14061	Return the amount of time in seconds .
14062	Wait for tasks to finish .
14063	Republish a display .
14064	Waits until all outputs are ready .
14065	Block until the result is reached .
14066	Return absolute path of filename
14067	Prepares a list of patterns .
14068	Return the separator of a string .
14069	Find all python files in a directory .
14070	Return the relative filename
14071	Return canonical filename for given filename .
14072	Extract data from a zip file .
14073	Return True if fpath is a valid directory
14074	Return True if path matches pattern .
14075	Replace all aliases in path .
14076	Start an interactive thread .
14077	The main loop .
14078	The main loop .
14079	Loop over the kernel .
14080	Decorator for loop functions .
14081	Enables an IPython GUI .
14082	Calculate GO E .
14083	Compute the difference between the center eigenvalue of a matrix .
14084	Calculate the difference between ensemble eigenvalues .
14085	Initialize the class .
14086	Parse step configuration file .
14087	Parse step configuration .
14088	Initialize crash handler .
14089	Load the config file .
14090	Initialize profile directory .
14091	Save the default config file .
14092	Write the file to disk .
14093	Erases the file .
14094	Return a dictionary of line data .
14095	A dictionary containing the arc data .
14096	Write the data to a pickle file .
14097	Read and parse a file .
14098	Read data from a pickle file .
14099	Read a single file .
14100	Merge parallel data .
14101	Add line data .
14102	Add arc data .
14103	Add a file to the hash .
14104	Return a summary of the file .
14105	Return a generator that yields a list of lines .
14106	Main loop .
14107	Replace the number of lines in a single line .
14108	Return the raw input .
14109	Edit syntax error .
14110	Determine if an error should be recompiled .
14111	Exit .
14112	Extract the url and revision from the server .
14113	Create a new frontend page
14114	Initialize the colors .
14115	Return information about the identity .
14116	Convert ROJ to numpy array
14117	Return the source code for the given object .
14118	Sets the color scheme .
14119	Toggle color scheme
14120	Convert traceback to text .
14121	Format a traceback for a traceback .
14122	Format a list of extracted files .
14123	Formats an exception only .
14124	Show the exception only for an exception .
14125	Start the debugger .
14126	Set mode .
14127	Decorator for views that require a group .
14128	Recursively imports from a module .
14129	Add a line to the code .
14130	Create a new section .
14131	Get a function by name .
14132	Return the code for an expression .
14133	Render the template .
14134	Dump a value to a value
14135	Render a template .
14136	Return a dictionary with the default formatters .
14137	Decorator for a type .
14138	Get a function for a given type .
14139	Change the precision of a float .
14140	Return a list of all config files .
14141	Configure the environment .
14142	Configure logging .
14143	Configure environment variables .
14144	Print a page of screen .
14145	Print a page of text .
14146	Page a file .
14147	Return pager command .
14148	Return start string
14149	Print a string to the screen .
14150	Print basic Unicode .
14151	Convert a Python object to a png file .
14152	Convert latex to png format
14153	Determines whether or not an object can be printed .
14154	Return a latex representation of an object .
14155	Add options to the plugin .
14156	Validate a list .
14157	Validate a dict .
14158	Main loop loop .
14159	Handle incoming messages .
14160	Execute code .
14161	Completes a complete message .
14162	Get information about an object .
14163	Send a history request .
14164	Shutdown the server .
14165	Flush the queue .
14166	Ask user for input .
14167	Start all channels .
14168	Stop all channels .
14169	Checks if all channels are alive .
14170	Load the SSH connection file
14171	Write connection file .
14172	Launch a kernel on the local machine .
14173	Shutdown the kernel .
14174	Restart the kernel .
14175	Kill the kernel .
14176	Interrupt the kernel .
14177	Send a signal to the kernel .
14178	Checks if the device is alive .
14179	Return a shell channel .
14180	The sub channel .
14181	Hb channel .
14182	Bind a kernel to an IPython notebook .
14183	Print debug message .
14184	Return a list of all the extension classes .
14185	Perform a pre_step step .
14186	Calls post_step after each step .
14187	Finalize all extensions .
14188	Recursively walk an egg
14189	Recursively scan a module .
14190	Launch an IP controller .
14191	Save connection info to a file .
14192	load config from json
14193	Load secondary configuration .
14194	Execute a single cell
14195	Enable autopx .
14196	Disable autopx .
14197	Run a single cell .
14198	Run a heartbeat .
14199	Run a task .
14200	Remove a task from the database .
14201	Patch the protocol for an agent .
14202	Patch an object s attribute .
14203	Accept a connection .
14204	Reject a pending connection .
14205	Returns an Agent with the given reactor .
14206	Validate the form .
14207	Handles delete action .
14208	Check if user is logged in .
14209	Generate a report from the given morfs .
14210	Check if the module is enabled .
14211	Execute the given editor .
14212	Fix error format .
14213	Get the current clipboard .
14214	Add a function to the chain .
14215	Return an instance of the class .
14216	Configure the configuration .
14217	Import an item from a module .
14218	Try to attempt a passwordless SSH connection .
14219	Try to open a passwordless SSH server .
14220	Try to attempt a passwordless connection .
14221	Connect to a remote server .
14222	Open a tunnel
14223	Stop scheduling tasks .
14224	Unwrap an exception .
14225	Register an engine .
14226	Unregisters an engine .
14227	Process a reply message .
14228	Flush all pending notifications .
14229	Flush results to the given socket .
14230	Flush control messages from the given socket .
14231	Flush the ignored control .
14232	Iterate over the given socket .
14233	Synchronously spin every interval .
14234	Stop the spin thread .
14235	Periodic loop .
14236	Wait for jobs to finish .
14237	Send a request to a socket .
14238	Send a request to the server .
14239	Returns an AsyncResult object .
14240	Queue the status of a queue .
14241	Purge results from the engine .
14242	Return the hub history .
14243	Execute a query .
14244	Return a set of opcodes .
14245	Return a ByteParser instance .
14246	Return the lines matching the given regexes .
14247	Parse the text .
14248	Return the first line of a line
14249	Return the first lines in the given lines .
14250	Parse the source .
14251	Return a sorted list of all arcs in the file .
14252	Return the number of exit counts in the excluded lines .
14253	Return a list of child parsers .
14254	Iterate over byte numbers .
14255	Find all statements in the parser .
14256	Return a string representation of a block stack .
14257	Split code into chunks .
14258	Validate a list of chunks .
14259	Return an iterator over the arc lines .
14260	Return a list of all the chunks in this parser .
14261	Return all arcs in this parser .
14262	Add options to the parser .
14263	Start coverage .
14264	Generate coverage report .
14265	Determine if a file should be included .
14266	Interpret a distro name .
14267	Open a URL with authentication .
14268	Fetch a given requirement .
14269	Get the parent of an object .
14270	Return the root topic .
14271	Render a template .
14272	Configure the plugin .
14273	Format an error .
14274	Split data by num .
14275	Convert a notebook to a v3 format .
14276	Convert hex color to RGB
14277	Return a dict with the colors for the given style .
14278	Return a QFont instance .
14279	Handles the reply message .
14280	Handle a history reply .
14281	Handle Pyout messages .
14282	Handle display data .
14283	Load the channel history .
14284	Execute a file .
14285	Process an error error .
14286	Process the payload .
14287	Sets the default style .
14288	Open a text editor .
14289	Make the in_prompt
14290	Make a continuation prompt .
14291	Updates the style sheet .
14292	Called when the syntax style is changed .
14293	Handle the async call .
14294	Signs the request parameters .
14295	Transform a dictionary into a dictionary .
14296	Return the virtual memory information .
14297	Returns a tuple of CPU times .
14298	Get the uids of the process .
14299	Get the number of processes in the process .
14300	Return a list of all processes in the process .
14301	Return a list of open files .
14302	Given a pkg_path return the SHA and the commit hash .
14303	Return information about a package .
14304	Return sys . info
14305	Return the number of cpus on Windows
14306	Return the number of CPU cores .
14307	Returns the next result set .
14308	Fetch one row .
14309	Fetch multiple rows .
14310	Fetch all rows .
14311	Connect to peers .
14312	Parse a JSON string into a notebook object .
14313	Convert a Python string to a notebook object .
14314	Read data from a string .
14315	Write an object to a file .
14316	Write nb to a file .
14317	Convert ipynb to metadata
14318	Load a value from a dictionary .
14319	Return True if the given name matches the given name .
14320	Determine whether a class is a class or not .
14321	Determine whether a directory is a directory or not .
14322	Determine if a file should be downloaded .
14323	Determine if the given function should be called .
14324	Determine if a method should be called .
14325	Determine if the given module is wanted .
14326	Return a list of lines from a file .
14327	Run a pydb command .
14328	Print a list of lines .
14329	Executor for pdef
14330	Returns the conversion factor between two currencies .
14331	Convert a currency from one currency to another .
14332	Compute the return rate for a given rate .
14333	Get the encoding of a stream .
14334	Return the default encoding .
14335	Write the connection file to disk .
14336	Initialize the heartbeat .
14337	Log connection info .
14338	Initialize the session .
14339	Initialize the IO interface .
14340	Initialize the kernel .
14341	Initialize the connection to the remote host .
14342	Register this controller .
14343	Convert HTML to text .
14344	Convert markdown to text .
14345	Convert a domain into a FQDN .
14346	Add options to the parser .
14347	Configure noseExclude .
14348	Return True if dirname is a directory
14349	Determine if the given extension is dynamic .
14350	Call multiple functions .
14351	Call a list of functions .
14352	Append a function to the list .
14353	Insert a function at the given index .
14354	Format the usage .
14355	Initialize the application .
14356	Write the PID file .
14357	Remove the pid file .
14358	Get the PID from the pid file .
14359	Construct an argument parser .
14360	Return the real name of a magic function .
14361	Highlight the current line .
14362	Rehighlight the given block .
14363	Sets the format .
14364	Copies the content to the clipboard .
14365	Execute a source .
14366	Called when the prompt finished .
14367	Determine if tab is pressed .
14368	Creates a new context menu .
14369	Called when the console is pressed .
14370	Insert a continuation prompt .
14371	Handles completion .
14372	Execute an exec callback .
14373	Handle an exec callback .
14374	Process a reply message .
14375	Handle input request .
14376	Called when kernel died .
14377	Handle an object info reply .
14378	Handle a Pyout message .
14379	Handle a stream message .
14380	Handle a shutdown reply .
14381	Execute a file .
14382	Interrupt the kernel .
14383	Reset the console .
14384	Restart the kernel .
14385	Gets the call tip .
14386	Complete the input buffer .
14387	Process an error message .
14388	Process an execute message .
14389	Called when the cursor changes .
14390	Add a plugin .
14391	Chain all registered plugins .
14392	Iterate through all plugins .
14393	Call a simple method .
14394	Configure the plugins .
14395	Load all registered plugins .
14396	Load plugins .
14397	Convert latex to png format
14398	Convert latex to HTML .
14399	Convert a string to an image .
14400	Check if the requirement exists .
14401	Iterate over all processes .
14402	Return the number of idle connections .
14403	Return the attributes as a dictionary .
14404	The process name .
14405	Return the path to the executable .
14406	Get the children of this process .
14407	Get the current CPU percent .
14408	Returns the amount of memory in bytes .
14409	Returns a list of memory maps .
14410	Determines if the process is running .
14411	Suspend the process .
14412	Resumes the process .
14413	Kill the process .
14414	Wait for the device to finish .
14415	Wrap the kernel .
14416	Hijack Gtk .
14417	Return True if the identifier is shadowed by the given IP .
14418	Initialize the transformer .
14419	Register a transformer .
14420	Unregisters a transformer .
14421	Initialize the checkers .
14422	Register a checker .
14423	Unregisters a checker .
14424	Initialize handlers .
14425	Register a handler .
14426	Unregisters a handler .
14427	Handles the given line_info .
14428	Find a handler by line_info .
14429	Apply transformers to a line .
14430	Preprocess a line .
14431	Apply prefilter to lines .
14432	Instances of IPyAutocall in user_nsget
14433	Allow ! in multi - line statements if multi_line_specials is on
14434	Return the handler for the given line_info .
14435	Check if the initital identifier on the line is an alias .
14436	Process line_info .
14437	Process line info .
14438	Handles the given line_info .
14439	Process line_info .
14440	Process line info .
14441	Handle a line .
14442	Reimplemented to hide the widget .
14443	Stop the hide timer .
14444	Draws the panel tip .
14445	Show the call info .
14446	Show the given tip .
14447	Updates the text cursor position .
14448	Creates a property with a proxied attribute .
14449	Convert path to absolute path .
14450	Validate an instance against a schema .
14451	Return a copy of this object .
14452	Return True if no global site packages are not global .
14453	Calculate the frequency of each word .
14454	Decorator for view decorators .
14455	Return a list of available aliases .
14456	Define an alias .
14457	Define an alias .
14458	Validate an alias command .
14459	Call an alias .
14460	Transform an alias into an alias .
14461	Expand aliases .
14462	Auto help directive .
14463	Reset the SGR color .
14464	Splits a string into parts .
14465	Convert color to QColor .
14466	Returns a QTextCharFormatFormat instance .
14467	Generate a new JWT .
14468	A decorator to acquire a lock .
14469	Remove expired JWT
14470	Check if the token is already used .
14471	Validate a JWT
14472	Create a new semaphore .
14473	Find the common prefix of a list of items .
14474	Filter the control events .
14475	Gets the size of the widget .
14476	Return whether the cursor can cut .
14477	Returns whether the clipboard can be paste .
14478	Clears the input buffer .
14479	Cuts the text .
14480	Execute the input .
14481	Get the input buffer .
14482	Sets the input buffer .
14483	Sets the font size .
14484	Pastes the clipboard .
14485	Prints the control window .
14486	Prompt the cursor to the top .
14487	Resets the font size .
14488	Appends text to the cursor .
14489	Append the given html string to the stack .
14490	Append HTML fetching to the page .
14491	Appends plain text to the stack .
14492	Clears the temporary buffer .
14493	Completes the completion widget .
14494	Fill a temporary buffer .
14495	Determine if a control key is down .
14496	Create the control .
14497	Create the page control .
14498	Filters the control page .
14499	Returns the plain text of the given block .
14500	Get the end cursor .
14501	Returns the column number .
14502	Get the line from the input buffer .
14503	Returns the prompt cursor .
14504	Returns the text cursor .
14505	Insert a continuation prompt .
14506	Insert HTML into the cursor .
14507	Insert HTML content into the cursor .
14508	Insert text into the cursor .
14509	Make sure the cursor is in the buffer .
14510	Cancel the keyboard .
14511	Insert text into the screen .
14512	Called when the input is started .
14513	Read a single line .
14514	Set the continuation prompt .
14515	Sets the top cursor position .
14516	Show a prompt .
14517	Adjust scrollbars .
14518	Main entry point .
14519	Copy config file to IPython .
14520	Create a profile directory by name .
14521	Find profile directory by name .
14522	Convert a cmp = function into a key = function
14523	Read the contents of a file .
14524	Return a list of input lines .
14525	Create a temporary file in a temporary directory .
14526	Close the stream .
14527	Write data to the file .
14528	Add a new heartbeat handler .
14529	Add a new heart failure handler .
14530	a heart just beat
14531	Batch list from a sequence .
14532	Convert a path to a filename .
14533	Iterate over all files matching a pattern .
14534	Display the elapsed time .
14535	Calculate the time unit .
14536	Extract a Wininst configuration from a dist_filename .
14537	Uncaches a zipdir .
14538	quote argument
14539	Check to see if a distribution is found .
14540	Set fetch options .
14541	Create the home directory .
14542	Return True if name is an archive file .
14543	Make a mutable object .
14544	Decorator to set a property on an object .
14545	Create a new heading cell .
14546	Create a new NotebookNode .
14547	Create a new notebook .
14548	Return True if path is writable .
14549	Unquote a filename .
14550	Return the path to a Python file .
14551	Find a file in the search path .
14552	Return the path to the IPython notebook .
14553	Return the xdg config directory .
14554	Get IPython directory .
14555	Get IPython package directory .
14556	Get the path to a Python module .
14557	Determine if a target is outdated .
14558	Calculate a hash of a file .
14559	Check for IPython config files .
14560	Updates the suggestions dictionary for the given object .
14561	Return a list of suggested suggestions for the given object .
14562	Return the suggestions for the given object .
14563	Return the relative path of this directory .
14564	Return a list of objects matching pattern .
14565	r Returns a list of lines .
14566	Return the MD5 of the file .
14567	Begin profiling .
14568	Print profiler report .
14569	Close the profiler .
14570	The main loop .
14571	Enable wx . App .
14572	Disables the WX event loop .
14573	Disable Qt4 .
14574	Enable GTK integration .
14575	Enables a tkinter .
14576	Enables a pyglet .
14577	Saver function .
14578	Initialize the database .
14579	Execute a SQL statement
14580	Get session information .
14581	Get the last n rows .
14582	Iterate over a histogram by a string .
14583	Get the history file name .
14584	Name a session .
14585	Reset the history .
14586	Generator for a range of values
14587	Store the output for the given line number .
14588	Write out the output to a new session .
14589	Stop the loop .
14590	Return the number of CPU cores .
14591	Returns the number of times per CPU .
14592	Return a list of disk partitions .
14593	Return a list of all processes in the system
14594	Convert a pair into a string .
14595	Format a list of statements .
14596	Shortcut to shorten the stack
14597	A decorator that caches a function .
14598	Join a list of regexes .
14599	Make sure the file is gone .
14600	Update the contents of a dictionary .
14601	Update cluster profiles
14602	Starts a cluster .
14603	Stop a cluster .
14604	Find a command in PATH
14605	Read the body of the system .
14606	Searches for code units .
14607	Report all the code units in the given file .
14608	A decorator that raises an AssertionError .
14609	Sets the traceback .
14610	A decorator that ensures a time limit is exceeded .
14611	Load IPython extensions
14612	Initialize the code .
14613	Run code in ipython app .
14614	Run startup scripts .
14615	Run all the files in the IPython app .
14616	Run code line at command line .
14617	Run the module .
14618	Decorator for class methods .
14619	Return the filename of a static file .
14620	Read data from a file .
14621	Escape a string .
14622	Report the status of the report .
14623	Copy static report files .
14624	Write HTML to file .
14625	Compute the hash of a file .
14626	Write an index file .
14627	Read coverage file .
14628	Write coverage data to a directory .
14629	Sort two lists .
14630	Get a slice of a sequence .
14631	Splits a sequence into chunks .
14632	Read config file .
14633	Read manifest from MANIFEST .
14634	Convert a glob pattern to a regular expression .
14635	Return True if filename matches a pattern .
14636	Return a list of all files in the current working directory .
14637	Start a kernel .
14638	Shutdown a kernel .
14639	Kill a kernel .
14640	Retrieves a kernel by its ID .
14641	Get the ports of a kernel .
14642	Returns the notebook associated with the given kernel .
14643	Start the kernel .
14644	Shutdown a kernel .
14645	Interrupt the kernel .
14646	Restart a kernel .
14647	Create an IOCub stream .
14648	Create a shell stream .
14649	Create an HDB stream .
14650	Reset the object s properties .
14651	Export HTML to a file .
14652	Export an HTML string to a file .
14653	Ensure image tag is utf8
14654	Replace empty HTML tags .
14655	Exports the figure to a file .
14656	Get a single object or None
14657	Given a list of terms and a list of terms return the query .
14658	Extract the query from the given query string .
14659	Build a query for the given number of days .
14660	Gets a query for the given number of days .
14661	Get null or blank query
14662	Ensure fields_dict is case insensitive
14663	Add options to the parser .
14664	Validate that all attributes match a method .
14665	Determine whether the given method should be targeted .
14666	Rotates the text .
14667	Monkey patch zmq .
14668	Create a parser from a URL .
14669	The websocket URL .
14670	Deserialize a reply .
14671	Inject a cookie into the request .
14672	Start the heartbeat .
14673	Start the hb .
14674	Stop the hb .
14675	Load the file .
14676	Get the index .
14677	Seek to the next block .
14678	Edit a block .
14679	Print the block at the given index .
14680	Print all src_blocks colored .
14681	Execute a method on a collection .
14682	Batch a collection of batches .
14683	Run a function on a sequence .
14684	Run a function in parallel .
14685	A decorator that wraps the wrapped function .
14686	Decorator to add object attributes .
14687	Return the source code and index of the source code .
14688	Searches for inspectable lines at pos .
14689	Display a countdown .
14690	Stop all engines .
14691	Run pre_call .
14692	Called when an action is received .
14693	Save all pending messages .
14694	Synchronize the results .
14695	Execute a function after a function .
14696	Return a list of all available messages .
14697	Gets a message if there is one .
14698	Decorator to create a property .
14699	Get only one or more fields .
14700	Parse a URL .
14701	Return a list of module names .
14702	Return a list of all the root modules .
14703	Create a completer for commands .
14704	Parse a module completion .
14705	Return a list of compiled completions .
14706	Return a list of completions for the user .
14707	Ensure the attribute is quoted .
14708	Configure the plugin .
14709	Write test results to XML file .
14710	Add an error .
14711	Add a test failure .
14712	Add a test result .
14713	Generate a random integer .
14714	Generate a random number from a distribution .
14715	Register an engine .
14716	Unregisters an engine .
14717	Handles tasks that have finished tasks .
14718	Dispatch a task .
14719	Audits the timeouts for this task .
14720	Fail a failed message .
14721	Determine if a task can be run or not .
14722	Add an unmetric to the graph .
14723	Submit a task .
14724	Called when a result is received .
14725	Handle a result .
14726	Handle an unmetric dependency .
14727	Update the graph based on the given dep_id .
14728	Start logging .
14729	Print the current log state .
14730	Log a line
14731	Write data to logfile .
14732	Stop logging .
14733	Create a new worksheet node .
14734	Add a command chain .
14735	Add a regular expression to the command chain .
14736	Yield objects matching regex
14737	Returns a generator yielding all matches of the given key .
14738	Called when a notebook directory is changed .
14739	Return a list of all notebooks .
14740	Create a new notebook id .
14741	Delete a notebook .
14742	Check if a notebook exists .
14743	Find the path of a notebook .
14744	Get notebook path by name
14745	Get a notebook .
14746	Get the last modification of a notebook .
14747	Save a new notebook .
14748	Save a notebook .
14749	Save a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Parse a list of tokens .
14754	Generate a list of tokens from a source string .
14755	Load the default config file .
14756	Return the default class .
14757	Parse command line arguments .
14758	Initialize the IPython app .
14759	Initialize the interactive shell .
14760	Initialize the banner .
14761	Return a string representation of an object .
14762	Parse a notification name .
14763	Set default value .
14764	Called when a new event changes .
14765	Return a mapping of traits to traits .
14766	Get the metadata for a given trait .
14767	Validate the value .
14768	Return the default value .
14769	Checks whether this set meets the given criteria .
14770	Return whether or not this collection is unreachable .
14771	Return the result as a dict .
14772	Determines the depth of a node n .
14773	Print a bintree .
14774	Disambiguate a DNS URL .
14775	Apply a function to each element .
14776	Validate a list of targets .
14777	Dispatch a monitor traffic .
14778	Dispatch a query message .
14779	Handle a new heartbeat .
14780	Handles a heart failure .
14781	Save a task request .
14782	Save task result .
14783	Save an IOPub message .
14784	Send a connection request .
14785	Register an engine .
14786	Unregisters an engine .
14787	Finish the registration process .
14788	Send a shutdown request .
14789	Purge results from the database .
14790	Extract a record from a record .
14791	Get results from client .
14792	Get the history of a message .
14793	Handle a query .
14794	Change the current working directory .
14795	Decodes and decodes the stdout and stderr .
14796	Run a command under r root
14797	Execute the script .
14798	Dispatch a message .
14799	Check if a message is from the current session .
14800	Report the annotated files .
14801	Annotate a file with the analysis .
14802	Get the installed version of apt - cache .
14803	Recursively convert unicode objects to unicode
14804	Extract the header from a message or dict .
14805	Make sure the packer is valid .
14806	Create a message object .
14807	Sign a message list .
14808	Serialize a message .
14809	Send a message .
14810	Send a message to the given stream .
14811	Receive messages from a zmq socket .
14812	Given a list of msg_list and a list of bytes return a tuple of the identities and the corresponding identities .
14813	Unserialize a message .
14814	Save string to SVG file .
14815	Copy an SVG string to the clipboard .
14816	Convert SVG to QImage .
14817	Return an object s info .
14818	Get the docstring of an object .
14819	Get the source of an object .
14820	Get the arguments for the given object .
14821	Return the line and docstring for a call .
14822	Return the absolute path of an object .
14823	Find the source code lines of an object .
14824	Get the definition of an object .
14825	Return the header string .
14826	Display no info message .
14827	Print the definition of an object .
14828	docstring for docstring
14829	Displays source .
14830	Print a file .
14831	Formats a list of fields
14832	Display info about an object .
14833	Perform a search on a namespace .
14834	Return a thread that is running in a thread .
14835	A decorator that returns a Deferred .
14836	Find the best matching query .
14837	Return a string representation of the document .
14838	Convert to XML
14839	Load all the modules in a given package .
14840	Invert a dictionary
14841	Merge the contents of a dictionary .
14842	Recursively convert an object into a primitive primitive .
14843	Convert raw string to a string .
14844	Return a list of matplotlib figures .
14845	Print a matplotlib figure .
14846	Run matplotlib .
14847	Select figure format .
14848	Find and return the gui and backend for a given gui .
14849	Activate matplotlib .
14850	Configure inline support .
14851	Activate a pylab .
14852	Trace a frame .
14853	Start the trace .
14854	Stop the trace .
14855	Start a tracer .
14856	Installs the trace function .
14857	Start tracing .
14858	Stop recording .
14859	Pause profiling .
14860	Resumes all tracers .
14861	Get the branch data .
14862	Takes an rdict and returns a list of RemoteError objects .
14863	Render the traceback for an exception .
14864	Start coverage process .
14865	Return canonical directory for given morf .
14866	Return the source code for a file .
14867	Determines if the given filename should be traced with .
14868	Determines if a filename should be traced .
14869	Log a warning message .
14870	Check for missing packages .
14871	Start the configuration .
14872	Exit the container .
14873	Exclude a regular expression
14874	Return a regex for the exclude regex
14875	Saves the test data to disk .
14876	Merge data into self . data .
14877	Harvest the source data .
14878	Perform the analysis of a morf
14879	Convert a morf morf morf .
14880	Return an Analysis object .
14881	Generate a summary report .
14882	Annotate an annotation file .
14883	Generate HTML report .
14884	Generate XML report .
14885	Display an IPython notebook .
14886	Display an HTML page .
14887	Display an image .
14888	Display a PNG image .
14889	Display a jpeg image .
14890	Display a latex document .
14891	Display a JSON object .
14892	Display javascript content .
14893	Reload the file .
14894	Find a command in the environment
14895	Run a command .
14896	Forward read events .
14897	Read a line from the socket .
14898	Dynamically import a launcher class .
14899	Stops the cluster .
14900	Build a launcher .
14901	Start the cluster .
14902	Start the cluster .
14903	Return a wx . App object
14904	Is the main event loop running?
14905	Start the event loop .
14906	Get an IPython QApplication .
14907	Checks if the Qt4 application is running in Qt4 .
14908	Start the event loop .
14909	Create a blank canvas
14910	Draw a cross .
14911	Draw a line between two positions .
14912	Draw text at the given position .
14913	Create an ANTsImage from grayscale image .
14914	Generate a UUID .
14915	Returns a unique key for a GET request .
14916	Get the domain of a URL .
14917	Extract query arguments from a URL .
